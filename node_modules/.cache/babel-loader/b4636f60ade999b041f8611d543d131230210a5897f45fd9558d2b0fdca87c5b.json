{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { Auth } from 'aws-amplify';\nimport { getSortedFormFields } from '@aws-amplify/ui';\nimport { areEmptyArrays, areEmptyObjects } from '../../../utils';\nimport { COMPONENT_ROUTE_KEYS } from './constants';\nexport const defaultComparator = () => false;\n/**\n * Does an ordering and shallow comparison of each array value,\n * plus a value equality check for empty objects and arrays.\n */\nexport function areSelectorDepsEqual(currentDeps, nextDeps) {\n  if (currentDeps.length !== nextDeps.length) {\n    return false;\n  }\n  return currentDeps.every((currentDep, index) => {\n    const nextDep = nextDeps[index];\n    if (areEmptyArrays(currentDep, nextDep) || areEmptyObjects(currentDep, nextDep)) {\n      return true;\n    }\n    return currentDep === nextDep;\n  });\n}\nexport const getComparator = selector => (currentFacade, nextFacade) => {\n  const currentSelectorDeps = selector(currentFacade);\n  const nextSelectorDeps = selector(nextFacade);\n  // Shallow compare the array values\n  return areSelectorDepsEqual(currentSelectorDeps, nextSelectorDeps);\n};\nexport const getTotpSecretCodeCallback = user => function getTotpSecretCode() {\n  return __awaiter(this, void 0, void 0, function* () {\n    return yield Auth.setupTOTP(user);\n  });\n};\nexport const isComponentRouteKey = route => COMPONENT_ROUTE_KEYS.some(componentRoute => componentRoute === route);\nconst flattenFormFields = fields => fields.flatMap(_ref => {\n  let [name, options] = _ref;\n  return Object.assign({\n    name\n  }, options);\n});\n/**\n * Retrieves legacy form field values from state machine for routes that have fields\n */\nexport const getLegacyFields = (route, state) =>\n// verifyUser is a component route, but does not have form fields\nisComponentRouteKey(route) && route !== 'verifyUser' ? flattenFormFields(getSortedFormFields(route, state)) : [];","map":{"version":3,"names":["__awaiter","Auth","getSortedFormFields","areEmptyArrays","areEmptyObjects","COMPONENT_ROUTE_KEYS","defaultComparator","areSelectorDepsEqual","currentDeps","nextDeps","length","every","currentDep","index","nextDep","getComparator","selector","currentFacade","nextFacade","currentSelectorDeps","nextSelectorDeps","getTotpSecretCodeCallback","user","getTotpSecretCode","setupTOTP","isComponentRouteKey","route","some","componentRoute","flattenFormFields","fields","flatMap","name","options","Object","assign","getLegacyFields","state"],"sources":["C:/Users/weida/Desktop/playground_CC/node_modules/@aws-amplify/ui-react-core/dist/esm/Authenticator/hooks/useAuthenticator/utils.js"],"sourcesContent":["import { __awaiter } from \"tslib\";\nimport { Auth } from 'aws-amplify';\nimport { getSortedFormFields, } from '@aws-amplify/ui';\nimport { areEmptyArrays, areEmptyObjects } from '../../../utils';\nimport { COMPONENT_ROUTE_KEYS } from './constants';\nexport const defaultComparator = () => false;\n/**\n * Does an ordering and shallow comparison of each array value,\n * plus a value equality check for empty objects and arrays.\n */\nexport function areSelectorDepsEqual(currentDeps, nextDeps) {\n    if (currentDeps.length !== nextDeps.length) {\n        return false;\n    }\n    return currentDeps.every((currentDep, index) => {\n        const nextDep = nextDeps[index];\n        if (areEmptyArrays(currentDep, nextDep) ||\n            areEmptyObjects(currentDep, nextDep)) {\n            return true;\n        }\n        return currentDep === nextDep;\n    });\n}\nexport const getComparator = (selector) => (currentFacade, nextFacade) => {\n    const currentSelectorDeps = selector(currentFacade);\n    const nextSelectorDeps = selector(nextFacade);\n    // Shallow compare the array values\n    return areSelectorDepsEqual(currentSelectorDeps, nextSelectorDeps);\n};\nexport const getTotpSecretCodeCallback = (user) => function getTotpSecretCode() {\n    return __awaiter(this, void 0, void 0, function* () {\n        return yield Auth.setupTOTP(user);\n    });\n};\nexport const isComponentRouteKey = (route) => COMPONENT_ROUTE_KEYS.some((componentRoute) => componentRoute === route);\nconst flattenFormFields = (fields) => fields.flatMap(([name, options]) => (Object.assign({ name }, options)));\n/**\n * Retrieves legacy form field values from state machine for routes that have fields\n */\nexport const getLegacyFields = (route, state) => \n// verifyUser is a component route, but does not have form fields\nisComponentRouteKey(route) && route !== 'verifyUser'\n    ? flattenFormFields(getSortedFormFields(route, state))\n    : [];\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,IAAI,QAAQ,aAAa;AAClC,SAASC,mBAAmB,QAAS,iBAAiB;AACtD,SAASC,cAAc,EAAEC,eAAe,QAAQ,gBAAgB;AAChE,SAASC,oBAAoB,QAAQ,aAAa;AAClD,OAAO,MAAMC,iBAAiB,GAAG,MAAM,KAAK;AAC5C;AACA;AACA;AACA;AACA,OAAO,SAASC,oBAAoB,CAACC,WAAW,EAAEC,QAAQ,EAAE;EACxD,IAAID,WAAW,CAACE,MAAM,KAAKD,QAAQ,CAACC,MAAM,EAAE;IACxC,OAAO,KAAK;EAChB;EACA,OAAOF,WAAW,CAACG,KAAK,CAAC,CAACC,UAAU,EAAEC,KAAK,KAAK;IAC5C,MAAMC,OAAO,GAAGL,QAAQ,CAACI,KAAK,CAAC;IAC/B,IAAIV,cAAc,CAACS,UAAU,EAAEE,OAAO,CAAC,IACnCV,eAAe,CAACQ,UAAU,EAAEE,OAAO,CAAC,EAAE;MACtC,OAAO,IAAI;IACf;IACA,OAAOF,UAAU,KAAKE,OAAO;EACjC,CAAC,CAAC;AACN;AACA,OAAO,MAAMC,aAAa,GAAIC,QAAQ,IAAK,CAACC,aAAa,EAAEC,UAAU,KAAK;EACtE,MAAMC,mBAAmB,GAAGH,QAAQ,CAACC,aAAa,CAAC;EACnD,MAAMG,gBAAgB,GAAGJ,QAAQ,CAACE,UAAU,CAAC;EAC7C;EACA,OAAOX,oBAAoB,CAACY,mBAAmB,EAAEC,gBAAgB,CAAC;AACtE,CAAC;AACD,OAAO,MAAMC,yBAAyB,GAAIC,IAAI,IAAK,SAASC,iBAAiB,GAAG;EAC5E,OAAOvB,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;IAChD,OAAO,MAAMC,IAAI,CAACuB,SAAS,CAACF,IAAI,CAAC;EACrC,CAAC,CAAC;AACN,CAAC;AACD,OAAO,MAAMG,mBAAmB,GAAIC,KAAK,IAAKrB,oBAAoB,CAACsB,IAAI,CAAEC,cAAc,IAAKA,cAAc,KAAKF,KAAK,CAAC;AACrH,MAAMG,iBAAiB,GAAIC,MAAM,IAAKA,MAAM,CAACC,OAAO,CAAC;EAAA,IAAC,CAACC,IAAI,EAAEC,OAAO,CAAC;EAAA,OAAMC,MAAM,CAACC,MAAM,CAAC;IAAEH;EAAK,CAAC,EAAEC,OAAO,CAAC;AAAA,CAAC,CAAC;AAC7G;AACA;AACA;AACA,OAAO,MAAMG,eAAe,GAAG,CAACV,KAAK,EAAEW,KAAK;AAC5C;AACAZ,mBAAmB,CAACC,KAAK,CAAC,IAAIA,KAAK,KAAK,YAAY,GAC9CG,iBAAiB,CAAC3B,mBAAmB,CAACwB,KAAK,EAAEW,KAAK,CAAC,CAAC,GACpD,EAAE"},"metadata":{},"sourceType":"module","externalDependencies":[]}