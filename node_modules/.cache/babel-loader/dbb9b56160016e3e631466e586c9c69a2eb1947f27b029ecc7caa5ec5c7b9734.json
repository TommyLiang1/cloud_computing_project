{"ast":null,"code":"import { useEscapeKeydown as e } from \"@radix-ui/react-use-escape-keydown\";\nimport { useCallbackRef as t } from \"@radix-ui/react-use-callback-ref\";\nimport { useBodyPointerEvents as n } from \"@radix-ui/react-use-body-pointer-events\";\nimport { useComposedRefs as r } from \"@radix-ui/react-compose-refs\";\nimport { Primitive as s } from \"@radix-ui/react-primitive\";\nimport { composeEventHandlers as o } from \"@radix-ui/primitive\";\nimport * as i from \"react\";\nimport a from \"@babel/runtime/helpers/esm/extends\";\nconst u = /*#__PURE__*/i.createContext({\n  layers: new Set(),\n  layersWithOutsidePointerEventsDisabled: new Set(),\n  branches: new Set()\n});\nexport const DismissableLayer = /*#__PURE__*/i.forwardRef((l, m) => {\n  const {\n      disableOutsidePointerEvents: f = !1,\n      onEscapeKeyDown: p,\n      onPointerDownOutside: v,\n      onFocusOutside: b,\n      onInteractOutside: E,\n      onDismiss: y,\n      ...w\n    } = l,\n    h = i.useContext(u),\n    [D, x] = i.useState(null),\n    [, C] = i.useState({}),\n    L = r(m, e => x(e)),\n    P = Array.from(h.layers),\n    [O] = [...h.layersWithOutsidePointerEventsDisabled].slice(-1),\n    g = P.indexOf(O),\n    B = D ? P.indexOf(D) : -1,\n    R = h.layersWithOutsidePointerEventsDisabled.size > 0,\n    F = B >= g,\n    S = function (e) {\n      const n = t(e),\n        r = i.useRef(!1);\n      return i.useEffect(() => {\n        const e = e => {\n            if (e.target && !r.current) {\n              d(\"dismissableLayer.pointerDownOutside\", n, {\n                originalEvent: e\n              });\n            }\n            r.current = !1;\n          },\n          t = window.setTimeout(() => {\n            document.addEventListener(\"pointerdown\", e);\n          }, 0);\n        return () => {\n          window.clearTimeout(t), document.removeEventListener(\"pointerdown\", e);\n        };\n      }, [n]), {\n        onPointerDownCapture: () => r.current = !0\n      };\n    }(e => {\n      const t = e.target,\n        n = [...h.branches].some(e => e.contains(t));\n      F && !n && (null == v || v(e), null == E || E(e), e.defaultPrevented || null == y || y());\n    }),\n    W = function (e) {\n      const n = t(e),\n        r = i.useRef(!1);\n      return i.useEffect(() => {\n        const e = e => {\n          if (e.target && !r.current) {\n            d(\"dismissableLayer.focusOutside\", n, {\n              originalEvent: e\n            });\n          }\n        };\n        return document.addEventListener(\"focusin\", e), () => document.removeEventListener(\"focusin\", e);\n      }, [n]), {\n        onFocusCapture: () => r.current = !0,\n        onBlurCapture: () => r.current = !1\n      };\n    }(e => {\n      const t = e.target;\n      [...h.branches].some(e => e.contains(t)) || (null == b || b(e), null == E || E(e), e.defaultPrevented || null == y || y());\n    });\n  return e(e => {\n    B === h.layers.size - 1 && (null == p || p(e), e.defaultPrevented || null == y || y());\n  }), n({\n    disabled: f\n  }), i.useEffect(() => {\n    D && (f && h.layersWithOutsidePointerEventsDisabled.add(D), h.layers.add(D), c());\n  }, [D, f, h]), i.useEffect(() => () => {\n    D && (h.layers.delete(D), h.layersWithOutsidePointerEventsDisabled.delete(D), c());\n  }, [D, h]), i.useEffect(() => {\n    const e = () => C({});\n    return document.addEventListener(\"dismissableLayer.update\", e), () => document.removeEventListener(\"dismissableLayer.update\", e);\n  }, []), /*#__PURE__*/i.createElement(s.div, a({}, w, {\n    ref: L,\n    style: {\n      pointerEvents: R ? F ? \"auto\" : \"none\" : void 0,\n      ...l.style\n    },\n    onFocusCapture: o(l.onFocusCapture, W.onFocusCapture),\n    onBlurCapture: o(l.onBlurCapture, W.onBlurCapture),\n    onPointerDownCapture: o(l.onPointerDownCapture, S.onPointerDownCapture)\n  }));\n}); /*#__PURE__*/\nexport const DismissableLayerBranch = /*#__PURE__*/i.forwardRef((e, t) => {\n  const n = i.useContext(u),\n    o = i.useRef(null),\n    c = r(t, o);\n  return i.useEffect(() => {\n    const e = o.current;\n    if (e) return n.branches.add(e), () => {\n      n.branches.delete(e);\n    };\n  }, [n.branches]), /*#__PURE__*/i.createElement(s.div, a({}, e, {\n    ref: c\n  }));\n}); /*#__PURE__*/\nfunction c() {\n  const e = new Event(\"dismissableLayer.update\");\n  document.dispatchEvent(e);\n}\nfunction d(e, t, n) {\n  const r = n.originalEvent.target,\n    s = new CustomEvent(e, {\n      bubbles: !1,\n      cancelable: !0,\n      detail: n\n    });\n  return t && r.addEventListener(e, t, {\n    once: !0\n  }), !r.dispatchEvent(s);\n}\nexport const Root = DismissableLayer;\nexport const Branch = DismissableLayerBranch;","map":{"version":3,"mappings":"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","names":["DismissableLayerContext","React","createContext","layers","Set","layersWithOutsidePointerEventsDisabled","branches","DismissableLayer","forwardRef","props","forwardedRef","disableOutsidePointerEvents","onEscapeKeyDown","onPointerDownOutside","onFocusOutside","onInteractOutside","onDismiss","layerProps","context","useContext","node","setNode","useState","force","composedRefs","useComposedRefs","Array","from","highestLayerWithOutsidePointerEventsDisabled","slice","highestLayerWithOutsidePointerEventsDisabledIndex","indexOf","index","isBodyPointerEventsDisabled","size","isPointerEventsEnabled","pointerDownOutside","handlePointerDownOutside","useCallbackRef","isPointerInsideReactTreeRef","useRef","useEffect","handlePointerDown","event","target","current","dispatchCustomEvent","originalEvent","timerId","window","setTimeout","document","addEventListener","clearTimeout","removeEventListener","onPointerDownCapture","usePointerDownOutside","isPointerDownOnBranch","some","branch","contains","defaultPrevented","focusOutside","handleFocusOutside","isFocusInsideReactTreeRef","handleFocus","onFocusCapture","onBlurCapture","useFocusOutside","useEscapeKeydown","useBodyPointerEvents","disabled","add","dispatchUpdate","delete","handleUpdate","_react","Primitive","div","_babelRuntimeHelpersEsmExtends","ref","style","pointerEvents","undefined","composeEventHandlers","DismissableLayerBranch","Event","dispatchEvent","name","handler","detail","CustomEvent","bubbles","cancelable","once","Root","Branch"],"sources":["C:\\Users\\weida\\Desktop\\playground_CC\\node_modules\\@aws-amplify\\ui-react\\node_modules\\@radix-ui\\react-dropdown-menu\\node_modules\\@radix-ui\\react-menu\\node_modules\\@radix-ui\\react-dismissable-layer\\dist\\packages\\react\\dismissable-layer\\src\\DismissableLayer.tsx"],"sourcesContent":["import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { useBodyPointerEvents } from '@radix-ui/react-use-body-pointer-events';\nimport { useCallbackRef } from '@radix-ui/react-use-callback-ref';\nimport { useEscapeKeydown } from '@radix-ui/react-use-escape-keydown';\n\nimport type * as Radix from '@radix-ui/react-primitive';\n\n/* -------------------------------------------------------------------------------------------------\n * DismissableLayer\n * -----------------------------------------------------------------------------------------------*/\n\nconst DISMISSABLE_LAYER_NAME = 'DismissableLayer';\nconst CONTEXT_UPDATE = 'dismissableLayer.update';\nconst POINTER_DOWN_OUTSIDE = 'dismissableLayer.pointerDownOutside';\nconst FOCUS_OUTSIDE = 'dismissableLayer.focusOutside';\n\nconst DismissableLayerContext = React.createContext({\n  layers: new Set<DismissableLayerElement>(),\n  layersWithOutsidePointerEventsDisabled: new Set<DismissableLayerElement>(),\n  branches: new Set<DismissableLayerBranchElement>(),\n});\n\ntype DismissableLayerElement = React.ElementRef<typeof Primitive.div>;\ntype PrimitiveDivProps = Radix.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface DismissableLayerProps extends PrimitiveDivProps {\n  /**\n   * When `true`, hover/focus/click interactions will be disabled on elements outside\n   * the `DismissableLayer`. Users will need to click twice on outside elements to\n   * interact with them: once to close the `DismissableLayer`, and again to trigger the element.\n   */\n  disableOutsidePointerEvents?: boolean;\n  /**\n   * Event handler called when the escape key is down.\n   * Can be prevented.\n   */\n  onEscapeKeyDown?: (event: KeyboardEvent) => void;\n  /**\n   * Event handler called when the a `pointerdown` event happens outside of the `DismissableLayer`.\n   * Can be prevented.\n   */\n  onPointerDownOutside?: (event: PointerDownOutsideEvent) => void;\n  /**\n   * Event handler called when the focus moves outside of the `DismissableLayer`.\n   * Can be prevented.\n   */\n  onFocusOutside?: (event: FocusOutsideEvent) => void;\n  /**\n   * Event handler called when an interaction happens outside the `DismissableLayer`.\n   * Specifically, when a `pointerdown` event happens outside or focus moves outside of it.\n   * Can be prevented.\n   */\n  onInteractOutside?: (event: PointerDownOutsideEvent | FocusOutsideEvent) => void;\n  /**\n   * Handler called when the `DismissableLayer` should be dismissed\n   */\n  onDismiss?: () => void;\n}\n\nconst DismissableLayer = React.forwardRef<DismissableLayerElement, DismissableLayerProps>(\n  (props, forwardedRef) => {\n    const {\n      disableOutsidePointerEvents = false,\n      onEscapeKeyDown,\n      onPointerDownOutside,\n      onFocusOutside,\n      onInteractOutside,\n      onDismiss,\n      ...layerProps\n    } = props;\n    const context = React.useContext(DismissableLayerContext);\n    const [node, setNode] = React.useState<DismissableLayerElement | null>(null);\n    const [, force] = React.useState({});\n    const composedRefs = useComposedRefs(forwardedRef, (node) => setNode(node));\n    const layers = Array.from(context.layers);\n    const [highestLayerWithOutsidePointerEventsDisabled] = [...context.layersWithOutsidePointerEventsDisabled].slice(-1); // prettier-ignore\n    const highestLayerWithOutsidePointerEventsDisabledIndex = layers.indexOf(highestLayerWithOutsidePointerEventsDisabled); // prettier-ignore\n    const index = node ? layers.indexOf(node) : -1;\n    const isBodyPointerEventsDisabled = context.layersWithOutsidePointerEventsDisabled.size > 0;\n    const isPointerEventsEnabled = index >= highestLayerWithOutsidePointerEventsDisabledIndex;\n\n    const pointerDownOutside = usePointerDownOutside((event) => {\n      const target = event.target as HTMLElement;\n      const isPointerDownOnBranch = [...context.branches].some((branch) => branch.contains(target));\n      if (!isPointerEventsEnabled || isPointerDownOnBranch) return;\n      onPointerDownOutside?.(event);\n      onInteractOutside?.(event);\n      if (!event.defaultPrevented) onDismiss?.();\n    });\n\n    const focusOutside = useFocusOutside((event) => {\n      const target = event.target as HTMLElement;\n      const isFocusInBranch = [...context.branches].some((branch) => branch.contains(target));\n      if (isFocusInBranch) return;\n      onFocusOutside?.(event);\n      onInteractOutside?.(event);\n      if (!event.defaultPrevented) onDismiss?.();\n    });\n\n    useEscapeKeydown((event) => {\n      const isHighestLayer = index === context.layers.size - 1;\n      if (!isHighestLayer) return;\n      onEscapeKeyDown?.(event);\n      if (!event.defaultPrevented) onDismiss?.();\n    });\n\n    useBodyPointerEvents({ disabled: disableOutsidePointerEvents });\n\n    React.useEffect(() => {\n      if (!node) return;\n      if (disableOutsidePointerEvents) context.layersWithOutsidePointerEventsDisabled.add(node);\n      context.layers.add(node);\n      dispatchUpdate();\n    }, [node, disableOutsidePointerEvents, context]);\n\n    /**\n     * We purposefully prevent combining this effect with the `disableOutsidePointerEvents` effect\n     * because a change to `disableOutsidePointerEvents` would remove this layer from the stack\n     * and add it to the end again so the layering order wouldn't be _creation order_.\n     * We only want them to be removed from context stacks when unmounted.\n     */\n    React.useEffect(() => {\n      return () => {\n        if (!node) return;\n        context.layers.delete(node);\n        context.layersWithOutsidePointerEventsDisabled.delete(node);\n        dispatchUpdate();\n      };\n    }, [node, context]);\n\n    React.useEffect(() => {\n      const handleUpdate = () => force({});\n      document.addEventListener(CONTEXT_UPDATE, handleUpdate);\n      return () => document.removeEventListener(CONTEXT_UPDATE, handleUpdate);\n    }, []);\n\n    return (\n      <Primitive.div\n        {...layerProps}\n        ref={composedRefs}\n        style={{\n          pointerEvents: isBodyPointerEventsDisabled\n            ? isPointerEventsEnabled\n              ? 'auto'\n              : 'none'\n            : undefined,\n          ...props.style,\n        }}\n        onFocusCapture={composeEventHandlers(props.onFocusCapture, focusOutside.onFocusCapture)}\n        onBlurCapture={composeEventHandlers(props.onBlurCapture, focusOutside.onBlurCapture)}\n        onPointerDownCapture={composeEventHandlers(\n          props.onPointerDownCapture,\n          pointerDownOutside.onPointerDownCapture\n        )}\n      />\n    );\n  }\n);\n\nDismissableLayer.displayName = DISMISSABLE_LAYER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DismissableLayerBranch\n * -----------------------------------------------------------------------------------------------*/\n\nconst BRANCH_NAME = 'DismissableLayerBranch';\n\ntype DismissableLayerBranchElement = React.ElementRef<typeof Primitive.div>;\ninterface DismissableLayerBranchProps extends PrimitiveDivProps {}\n\nconst DismissableLayerBranch = React.forwardRef<\n  DismissableLayerBranchElement,\n  DismissableLayerBranchProps\n>((props, forwardedRef) => {\n  const context = React.useContext(DismissableLayerContext);\n  const ref = React.useRef<DismissableLayerBranchElement>(null);\n  const composedRefs = useComposedRefs(forwardedRef, ref);\n\n  React.useEffect(() => {\n    const node = ref.current;\n    if (node) {\n      context.branches.add(node);\n      return () => {\n        context.branches.delete(node);\n      };\n    }\n  }, [context.branches]);\n\n  return <Primitive.div {...props} ref={composedRefs} />;\n});\n\nDismissableLayerBranch.displayName = BRANCH_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype PointerDownOutsideEvent = CustomEvent<{ originalEvent: PointerEvent }>;\ntype FocusOutsideEvent = CustomEvent<{ originalEvent: FocusEvent }>;\n\n/**\n * Listens for `pointerdown` outside a react subtree. We use `pointerdown` rather than `pointerup`\n * to mimic layer dismissing behaviour present in OS.\n * Returns props to pass to the node we want to check for outside events.\n */\nfunction usePointerDownOutside(onPointerDownOutside?: (event: PointerDownOutsideEvent) => void) {\n  const handlePointerDownOutside = useCallbackRef(onPointerDownOutside) as EventListener;\n  const isPointerInsideReactTreeRef = React.useRef(false);\n\n  React.useEffect(() => {\n    const handlePointerDown = (event: PointerEvent) => {\n      if (event.target && !isPointerInsideReactTreeRef.current) {\n        const eventDetail = { originalEvent: event };\n        dispatchCustomEvent(POINTER_DOWN_OUTSIDE, handlePointerDownOutside, eventDetail);\n      }\n      isPointerInsideReactTreeRef.current = false;\n    };\n    /**\n     * if this hook executes in a component that mounts via a `pointerdown` event, the event\n     * would bubble up to the document and trigger a `pointerDownOutside` event. We avoid\n     * this by delaying the event listener registration on the document.\n     * This is not React specific, but rather how the DOM works, ie:\n     * ```\n     * button.addEventListener('pointerdown', () => {\n     *   console.log('I will log');\n     *   document.addEventListener('pointerdown', () => {\n     *     console.log('I will also log');\n     *   })\n     * });\n     */\n    const timerId = window.setTimeout(() => {\n      document.addEventListener('pointerdown', handlePointerDown);\n    }, 0);\n    return () => {\n      window.clearTimeout(timerId);\n      document.removeEventListener('pointerdown', handlePointerDown);\n    };\n  }, [handlePointerDownOutside]);\n\n  return {\n    // ensures we check React component tree (not just DOM tree)\n    onPointerDownCapture: () => (isPointerInsideReactTreeRef.current = true),\n  };\n}\n\n/**\n * Listens for when focus happens outside a react subtree.\n * Returns props to pass to the root (node) of the subtree we want to check.\n */\nfunction useFocusOutside(onFocusOutside?: (event: FocusOutsideEvent) => void) {\n  const handleFocusOutside = useCallbackRef(onFocusOutside) as EventListener;\n  const isFocusInsideReactTreeRef = React.useRef(false);\n\n  React.useEffect(() => {\n    const handleFocus = (event: FocusEvent) => {\n      if (event.target && !isFocusInsideReactTreeRef.current) {\n        const eventDetail = { originalEvent: event };\n        dispatchCustomEvent(FOCUS_OUTSIDE, handleFocusOutside, eventDetail);\n      }\n    };\n    document.addEventListener('focusin', handleFocus);\n    return () => document.removeEventListener('focusin', handleFocus);\n  }, [handleFocusOutside]);\n\n  return {\n    onFocusCapture: () => (isFocusInsideReactTreeRef.current = true),\n    onBlurCapture: () => (isFocusInsideReactTreeRef.current = false),\n  };\n}\n\nfunction dispatchUpdate() {\n  const event = new Event(CONTEXT_UPDATE);\n  document.dispatchEvent(event);\n}\n\nfunction dispatchCustomEvent<E extends CustomEvent, OriginalEvent extends Event>(\n  name: string,\n  handler: ((event: E) => void) | undefined,\n  detail: { originalEvent: OriginalEvent } & (E extends CustomEvent<infer D> ? D : never)\n) {\n  const target = detail.originalEvent.target as HTMLElement;\n  const event = new CustomEvent(name, { bubbles: false, cancelable: true, detail });\n  if (handler) target.addEventListener(name, handler as EventListener, { once: true });\n  return !target.dispatchEvent(event);\n}\n\nconst Root = DismissableLayer;\nconst Branch = DismissableLayerBranch;\n\nexport {\n  DismissableLayer,\n  DismissableLayerBranch,\n  //\n  Root,\n  Branch,\n};\nexport type { DismissableLayerProps };\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}