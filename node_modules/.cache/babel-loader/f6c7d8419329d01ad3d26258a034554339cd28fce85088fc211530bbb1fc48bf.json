{"ast":null,"code":"import { exhaustiveCheck, extractPrimaryKeyFieldNames, extractPrimaryKeyValues } from '../util';\nexport { ModelSortPredicateCreator } from './sort';\nvar predicatesAllSet = new WeakSet();\nexport function isPredicatesAll(predicate) {\n  return predicatesAllSet.has(predicate);\n}\n// This symbol is not used at runtime, only its type (unique symbol)\nexport var PredicateAll = Symbol('A predicate that matches all records');\nvar Predicates = /** @class */function () {\n  function Predicates() {}\n  Object.defineProperty(Predicates, \"ALL\", {\n    get: function () {\n      var predicate = function (c) {\n        return c;\n      };\n      predicatesAllSet.add(predicate);\n      return predicate;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Predicates;\n}();\nexport { Predicates };\nvar ModelPredicateCreator = /** @class */function () {\n  function ModelPredicateCreator() {}\n  ModelPredicateCreator.createPredicateBuilder = function (modelDefinition) {\n    var modelName = modelDefinition.name;\n    var fieldNames = new Set(Object.keys(modelDefinition.fields));\n    var handler;\n    var predicate = new Proxy({}, handler = {\n      get: function (_target, propertyKey, receiver) {\n        var groupType = propertyKey;\n        switch (groupType) {\n          case 'and':\n          case 'or':\n          case 'not':\n            var result_1 = function (newPredicate) {\n              var group = {\n                type: groupType,\n                predicates: []\n              };\n              // Create a new recorder\n              var tmpPredicateRecorder = new Proxy({}, handler);\n              // Set the recorder group\n              ModelPredicateCreator.predicateGroupsMap.set(tmpPredicateRecorder, group);\n              // Apply the predicates to the recorder (this is the step that records the changes)\n              newPredicate(tmpPredicateRecorder);\n              // Push the group to the top-level recorder\n              ModelPredicateCreator.predicateGroupsMap.get(receiver).predicates.push(group);\n              return receiver;\n            };\n            return result_1;\n          default:\n            exhaustiveCheck(groupType, false);\n        }\n        var field = propertyKey;\n        if (!fieldNames.has(field)) {\n          throw new Error(\"Invalid field for model. field: \" + field + \", model: \" + modelName);\n        }\n        var result = function (operator, operand) {\n          ModelPredicateCreator.predicateGroupsMap.get(receiver).predicates.push({\n            field: field,\n            operator: operator,\n            operand: operand\n          });\n          return receiver;\n        };\n        return result;\n      }\n    });\n    var group = {\n      type: 'and',\n      predicates: []\n    };\n    ModelPredicateCreator.predicateGroupsMap.set(predicate, group);\n    return predicate;\n  };\n  ModelPredicateCreator.isValidPredicate = function (predicate) {\n    return ModelPredicateCreator.predicateGroupsMap.has(predicate);\n  };\n  ModelPredicateCreator.getPredicates = function (predicate, throwOnInvalid) {\n    if (throwOnInvalid === void 0) {\n      throwOnInvalid = true;\n    }\n    if (throwOnInvalid && !ModelPredicateCreator.isValidPredicate(predicate)) {\n      throw new Error('The predicate is not valid');\n    }\n    return ModelPredicateCreator.predicateGroupsMap.get(predicate);\n  };\n  // transforms cb-style predicate into Proxy\n  ModelPredicateCreator.createFromExisting = function (modelDefinition, existing) {\n    if (!existing || !modelDefinition) {\n      return undefined;\n    }\n    return existing(ModelPredicateCreator.createPredicateBuilder(modelDefinition));\n  };\n  ModelPredicateCreator.createForSingleField = function (modelDefinition, fieldName, value) {\n    return ModelPredicateCreator.createPredicateBuilder(modelDefinition)[fieldName]('eq', value);\n  };\n  ModelPredicateCreator.createForPk = function (modelDefinition, model) {\n    var keyFields = extractPrimaryKeyFieldNames(modelDefinition);\n    var keyValues = extractPrimaryKeyValues(model, keyFields);\n    var modelPredicate = ModelPredicateCreator.createPredicateBuilder(modelDefinition);\n    keyFields.forEach(function (field, idx) {\n      var operand = keyValues[idx];\n      modelPredicate = modelPredicate[field]('eq', operand);\n    });\n    return modelPredicate;\n  };\n  ModelPredicateCreator.predicateGroupsMap = new WeakMap();\n  return ModelPredicateCreator;\n}();\nexport { ModelPredicateCreator };","map":{"version":3,"mappings":"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","names":["exhaustiveCheck","extractPrimaryKeyFieldNames","extractPrimaryKeyValues","ModelSortPredicateCreator","predicatesAllSet","WeakSet","isPredicatesAll","predicate","has","PredicateAll","Symbol","Object","Predicates","add","ModelPredicateCreator","modelDefinition","fieldNames","Set","keys","fields","handler","Proxy","get","_target","propertyKey","receiver","groupType","result_1","newPredicate","group","type","predicates","tmpPredicateRecorder","predicateGroupsMap","set","push","field","Error","modelName","result","operator","operand","throwOnInvalid","isValidPredicate","existing","undefined","createPredicateBuilder","fieldName","value","model","keyFields","keyValues","modelPredicate","forEach","idx","WeakMap"],"sources":["C:\\Users\\weida\\Desktop\\playground_CC\\node_modules\\@aws-amplify\\datastore\\src\\predicates\\index.ts"],"sourcesContent":["import {\n\tAllOperators,\n\tModelPredicate,\n\tPersistentModel,\n\tPredicateExpression,\n\tPredicateGroups,\n\tPredicatesGroup,\n\tProducerModelPredicate,\n\tSchemaModel,\n} from '../types';\nimport {\n\texhaustiveCheck,\n\textractPrimaryKeyFieldNames,\n\textractPrimaryKeyValues,\n} from '../util';\n\nexport { ModelSortPredicateCreator } from './sort';\n\nconst predicatesAllSet = new WeakSet<ProducerModelPredicate<any>>();\n\nexport function isPredicatesAll(\n\tpredicate: any\n): predicate is typeof PredicateAll {\n\treturn predicatesAllSet.has(predicate);\n}\n\n// This symbol is not used at runtime, only its type (unique symbol)\nexport const PredicateAll = Symbol('A predicate that matches all records');\n\nexport class Predicates {\n\tpublic static get ALL(): typeof PredicateAll {\n\t\tconst predicate = <ProducerModelPredicate<any>>(c => c);\n\n\t\tpredicatesAllSet.add(predicate);\n\n\t\treturn <typeof PredicateAll>(<unknown>predicate);\n\t}\n}\n\nexport class ModelPredicateCreator {\n\tprivate static predicateGroupsMap = new WeakMap<\n\t\tModelPredicate<any>,\n\t\tPredicatesGroup<any>\n\t>();\n\n\tprivate static createPredicateBuilder<T extends PersistentModel>(\n\t\tmodelDefinition: SchemaModel\n\t) {\n\t\tconst { name: modelName } = modelDefinition;\n\t\tconst fieldNames = new Set<keyof T>(Object.keys(modelDefinition.fields));\n\n\t\tlet handler: ProxyHandler<ModelPredicate<T>>;\n\t\tconst predicate = new Proxy(\n\t\t\t{} as ModelPredicate<T>,\n\t\t\t(handler = {\n\t\t\t\tget(\n\t\t\t\t\t_target,\n\t\t\t\t\tpropertyKey,\n\t\t\t\t\treceiver: ModelPredicate<T>\n\t\t\t\t): PredicateExpression<T, any> {\n\t\t\t\t\tconst groupType = propertyKey as keyof PredicateGroups<T>;\n\n\t\t\t\t\tswitch (groupType) {\n\t\t\t\t\t\tcase 'and':\n\t\t\t\t\t\tcase 'or':\n\t\t\t\t\t\tcase 'not':\n\t\t\t\t\t\t\tconst result: PredicateExpression<T, any> = (\n\t\t\t\t\t\t\t\tnewPredicate: (criteria: ModelPredicate<T>) => ModelPredicate<T>\n\t\t\t\t\t\t\t) => {\n\t\t\t\t\t\t\t\tconst group: PredicatesGroup<T> = {\n\t\t\t\t\t\t\t\t\ttype: groupType,\n\t\t\t\t\t\t\t\t\tpredicates: [],\n\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\t// Create a new recorder\n\t\t\t\t\t\t\t\tconst tmpPredicateRecorder = new Proxy(\n\t\t\t\t\t\t\t\t\t{} as ModelPredicate<T>,\n\t\t\t\t\t\t\t\t\thandler\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t// Set the recorder group\n\t\t\t\t\t\t\t\tModelPredicateCreator.predicateGroupsMap.set(\n\t\t\t\t\t\t\t\t\ttmpPredicateRecorder,\n\t\t\t\t\t\t\t\t\tgroup\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t// Apply the predicates to the recorder (this is the step that records the changes)\n\t\t\t\t\t\t\t\tnewPredicate(tmpPredicateRecorder);\n\n\t\t\t\t\t\t\t\t// Push the group to the top-level recorder\n\t\t\t\t\t\t\t\tModelPredicateCreator.predicateGroupsMap\n\t\t\t\t\t\t\t\t\t.get(receiver)!\n\t\t\t\t\t\t\t\t\t.predicates.push(group);\n\n\t\t\t\t\t\t\t\treturn receiver;\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\treturn result;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\texhaustiveCheck(groupType, false);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst field = propertyKey as keyof T;\n\n\t\t\t\t\tif (!fieldNames.has(field)) {\n\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t`Invalid field for model. field: ${field}, model: ${modelName}`\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst result: PredicateExpression<T, any> = (\n\t\t\t\t\t\toperator: keyof AllOperators,\n\t\t\t\t\t\toperand: any\n\t\t\t\t\t) => {\n\t\t\t\t\t\tModelPredicateCreator.predicateGroupsMap\n\t\t\t\t\t\t\t.get(receiver)!\n\t\t\t\t\t\t\t.predicates.push({ field, operator, operand });\n\t\t\t\t\t\treturn receiver;\n\t\t\t\t\t};\n\t\t\t\t\treturn result;\n\t\t\t\t},\n\t\t\t})\n\t\t);\n\n\t\tconst group: PredicatesGroup<T> = {\n\t\t\ttype: 'and',\n\t\t\tpredicates: [],\n\t\t};\n\t\tModelPredicateCreator.predicateGroupsMap.set(predicate, group);\n\n\t\treturn predicate;\n\t}\n\n\tstatic isValidPredicate<T extends PersistentModel>(\n\t\tpredicate: any\n\t): predicate is ModelPredicate<T> {\n\t\treturn ModelPredicateCreator.predicateGroupsMap.has(predicate);\n\t}\n\n\tstatic getPredicates<T extends PersistentModel>(\n\t\tpredicate: ModelPredicate<T>,\n\t\tthrowOnInvalid: boolean = true\n\t) {\n\t\tif (throwOnInvalid && !ModelPredicateCreator.isValidPredicate(predicate)) {\n\t\t\tthrow new Error('The predicate is not valid');\n\t\t}\n\n\t\treturn ModelPredicateCreator.predicateGroupsMap.get(predicate);\n\t}\n\n\t// transforms cb-style predicate into Proxy\n\tstatic createFromExisting<T extends PersistentModel>(\n\t\tmodelDefinition: SchemaModel,\n\t\texisting?: ProducerModelPredicate<T>\n\t) {\n\t\tif (!existing || !modelDefinition) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn existing(\n\t\t\tModelPredicateCreator.createPredicateBuilder(modelDefinition)\n\t\t);\n\t}\n\n\tstatic createForSingleField<T extends PersistentModel>(\n\t\tmodelDefinition: SchemaModel,\n\t\tfieldName: string,\n\t\tvalue: string\n\t) {\n\t\treturn ModelPredicateCreator.createPredicateBuilder<T>(modelDefinition)[\n\t\t\tfieldName\n\t\t](<any>'eq', <any>value);\n\t}\n\n\tstatic createForPk<T extends PersistentModel>(\n\t\tmodelDefinition: SchemaModel,\n\t\tmodel: T\n\t) {\n\t\tconst keyFields = extractPrimaryKeyFieldNames(modelDefinition);\n\t\tconst keyValues = extractPrimaryKeyValues(model, keyFields);\n\n\t\tlet modelPredicate =\n\t\t\tModelPredicateCreator.createPredicateBuilder<T>(modelDefinition);\n\n\t\tkeyFields.forEach((field, idx) => {\n\t\t\tconst operand = keyValues[idx];\n\t\t\tmodelPredicate = modelPredicate[field](<any>'eq', <any>operand);\n\t\t});\n\n\t\treturn modelPredicate;\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}