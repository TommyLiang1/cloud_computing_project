{"ast":null,"code":"import { useControllableState as e } from \"@radix-ui/react-use-controllable-state\";\nimport { useCallbackRef as o } from \"@radix-ui/react-use-callback-ref\";\nimport { Primitive as r } from \"@radix-ui/react-primitive\";\nimport { useId as t } from \"@radix-ui/react-id\";\nimport { createContextScope as n } from \"@radix-ui/react-context\";\nimport { useComposedRefs as i } from \"@radix-ui/react-compose-refs\";\nimport { createCollection as c } from \"@radix-ui/react-collection\";\nimport { composeEventHandlers as u } from \"@radix-ui/primitive\";\nimport * as s from \"react\";\nimport a from \"@babel/runtime/helpers/esm/extends\";\nconst f = {\n    bubbles: !1,\n    cancelable: !0\n  },\n  [p, l, m] = c(\"RovingFocusGroup\"),\n  [d, v] = n(\"RovingFocusGroup\", [m]);\nexport { v as createRovingFocusGroupScope };\nconst [g, F] = d(\"RovingFocusGroup\");\nexport const RovingFocusGroup = /*#__PURE__*/s.forwardRef((e, o) => /*#__PURE__*/s.createElement(p.Provider, {\n  scope: e.__scopeRovingFocusGroup\n}, /*#__PURE__*/s.createElement(p.Slot, {\n  scope: e.__scopeRovingFocusGroup\n}, /*#__PURE__*/s.createElement(w, a({}, e, {\n  ref: o\n}))))); /*#__PURE__*/\nconst w = /*#__PURE__*/s.forwardRef((t, n) => {\n  const {\n      __scopeRovingFocusGroup: c,\n      orientation: p,\n      dir: m = \"ltr\",\n      loop: d = !1,\n      currentTabStopId: v,\n      defaultCurrentTabStopId: F,\n      onCurrentTabStopIdChange: w,\n      onEntryFocus: b,\n      ...x\n    } = t,\n    E = s.useRef(null),\n    I = i(n, E),\n    [G = null, h] = e({\n      prop: v,\n      defaultProp: F,\n      onChange: w\n    }),\n    [T, A] = s.useState(!1),\n    y = o(b),\n    D = l(c),\n    S = s.useRef(!1);\n  return s.useEffect(() => {\n    const e = E.current;\n    if (e) return e.addEventListener(\"rovingFocusGroup.onEntryFocus\", y), () => e.removeEventListener(\"rovingFocusGroup.onEntryFocus\", y);\n  }, [y]), /*#__PURE__*/s.createElement(g, {\n    scope: c,\n    orientation: p,\n    dir: m,\n    loop: d,\n    currentTabStopId: G,\n    onItemFocus: s.useCallback(e => h(e), [h]),\n    onItemShiftTab: s.useCallback(() => A(!0), [])\n  }, /*#__PURE__*/s.createElement(r.div, a({\n    tabIndex: T ? -1 : 0,\n    \"data-orientation\": p\n  }, x, {\n    ref: I,\n    style: {\n      outline: \"none\",\n      ...t.style\n    },\n    onMouseDown: u(t.onMouseDown, () => {\n      S.current = !0;\n    }),\n    onFocus: u(t.onFocus, e => {\n      const o = !S.current;\n      if (e.target === e.currentTarget && o && !T) {\n        const o = new Event(\"rovingFocusGroup.onEntryFocus\", f);\n        if (e.currentTarget.dispatchEvent(o), !o.defaultPrevented) {\n          const e = D().filter(e => e.focusable);\n          R([e.find(e => e.active), e.find(e => e.id === G), ...e].filter(Boolean).map(e => e.ref.current));\n        }\n      }\n      S.current = !1;\n    }),\n    onBlur: u(t.onBlur, () => A(!1))\n  })));\n});\nexport const RovingFocusGroupItem = /*#__PURE__*/s.forwardRef((e, o) => {\n  const {\n      __scopeRovingFocusGroup: n,\n      focusable: i = !0,\n      active: c = !1,\n      ...f\n    } = e,\n    m = t(),\n    d = F(\"RovingFocusGroupItem\", n),\n    v = d.currentTabStopId === m,\n    g = l(n); /*#__PURE__*/\n  return s.createElement(p.ItemSlot, {\n    scope: n,\n    id: m,\n    focusable: i,\n    active: c\n  }, /*#__PURE__*/s.createElement(r.span, a({\n    tabIndex: v ? 0 : -1,\n    \"data-orientation\": d.orientation\n  }, f, {\n    ref: o,\n    onMouseDown: u(e.onMouseDown, e => {\n      i ? d.onItemFocus(m) : e.preventDefault();\n    }),\n    onFocus: u(e.onFocus, () => d.onItemFocus(m)),\n    onKeyDown: u(e.onKeyDown, e => {\n      if (\"Tab\" === e.key && e.shiftKey) return void d.onItemShiftTab();\n      if (e.target !== e.currentTarget) return;\n      const o = function (e, o, r) {\n        const t = function (e, o) {\n          return \"rtl\" !== o ? e : \"ArrowLeft\" === e ? \"ArrowRight\" : \"ArrowRight\" === e ? \"ArrowLeft\" : e;\n        }(e.key, r);\n        return \"vertical\" === o && [\"ArrowLeft\", \"ArrowRight\"].includes(t) || \"horizontal\" === o && [\"ArrowUp\", \"ArrowDown\"].includes(t) ? void 0 : b[t];\n      }(e, d.orientation, d.dir);\n      if (void 0 !== o) {\n        e.preventDefault();\n        let n = g().filter(e => e.focusable).map(e => e.ref.current);\n        if (\"last\" === o) n.reverse();else if (\"prev\" === o || \"next\" === o) {\n          \"prev\" === o && n.reverse();\n          const i = n.indexOf(e.currentTarget);\n          n = d.loop ? (t = i + 1, (r = n).map((e, o) => r[(t + o) % r.length])) : n.slice(i + 1);\n        }\n        setTimeout(() => R(n));\n      }\n      var r, t;\n    })\n  })));\n}); /*#__PURE__*/\nconst b = {\n  ArrowLeft: \"prev\",\n  ArrowUp: \"prev\",\n  ArrowRight: \"next\",\n  ArrowDown: \"next\",\n  PageUp: \"first\",\n  Home: \"first\",\n  PageDown: \"last\",\n  End: \"last\"\n};\nfunction R(e) {\n  const o = document.activeElement;\n  for (const r of e) {\n    if (r === o) return;\n    if (r.focus(), document.activeElement !== o) return;\n  }\n}\nexport const Root = RovingFocusGroup;\nexport const Item = RovingFocusGroupItem;","map":{"version":3,"mappings":"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","names":["EVENT_OPTIONS","bubbles","cancelable","Collection","useCollection","createCollectionScope","createCollection","createRovingFocusGroupContext","createRovingFocusGroupScope","createContextScope","RovingFocusProvider","useRovingFocusContext","RovingFocusGroup","React","forwardRef","props","forwardedRef","_react","$aa7392b6d04813384a511e60e09$var$Collection","Provider","scope","__scopeRovingFocusGroup","Slot","$aa7392b6d04813384a511e60e09$var$RovingFocusGroupImpl","_babelRuntimeHelpersEsmExtends","ref","RovingFocusGroupImpl","orientation","dir","loop","currentTabStopId","currentTabStopIdProp","defaultCurrentTabStopId","onCurrentTabStopIdChange","onEntryFocus","groupProps","useRef","composedRefs","useComposedRefs","setCurrentTabStopId","useControllableState","prop","defaultProp","onChange","isTabbingBackOut","setIsTabbingBackOut","useState","handleEntryFocus","useCallbackRef","getItems","isClickFocusRef","useEffect","node","current","addEventListener","removeEventListener","$aa7392b6d04813384a511e60e09$var$RovingFocusProvider","onItemFocus","useCallback","tabStopId","onItemShiftTab","Primitive","div","tabIndex","style","outline","onMouseDown","composeEventHandlers","onFocus","event","isKeyboardFocus","target","currentTarget","entryFocusEvent","Event","dispatchEvent","defaultPrevented","items","filter","item","focusable","focusFirst","find","active","id","Boolean","map","onBlur","RovingFocusGroupItem","itemProps","useId","context","isCurrentTabStop","ItemSlot","span","preventDefault","onKeyDown","key","shiftKey","focusIntent","getDirectionAwareKey","includes","MAP_KEY_TO_FOCUS_INTENT","getFocusIntent","undefined","candidateNodes","reverse","currentIndex","indexOf","startIndex","array","_","index","length","slice","setTimeout","ArrowLeft","ArrowUp","ArrowRight","ArrowDown","PageUp","Home","PageDown","End","candidates","PREVIOUSLY_FOCUSED_ELEMENT","document","activeElement","candidate","focus","Root","Item"],"sources":["C:\\Users\\weida\\Desktop\\playground_CC\\node_modules\\@aws-amplify\\ui-react\\node_modules\\@radix-ui\\react-tabs\\node_modules\\@radix-ui\\react-roving-focus\\dist\\packages\\react\\roving-focus\\src\\RovingFocusGroup.tsx"],"sourcesContent":["import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { createCollection } from '@radix-ui/react-collection';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { useId } from '@radix-ui/react-id';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport { useCallbackRef } from '@radix-ui/react-use-callback-ref';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\n\nimport type * as Radix from '@radix-ui/react-primitive';\nimport type { Scope } from '@radix-ui/react-context';\n\nconst ENTRY_FOCUS = 'rovingFocusGroup.onEntryFocus';\nconst EVENT_OPTIONS = { bubbles: false, cancelable: true };\n\n/* -------------------------------------------------------------------------------------------------\n * RovingFocusGroup\n * -----------------------------------------------------------------------------------------------*/\n\nconst GROUP_NAME = 'RovingFocusGroup';\n\ntype ItemData = { id: string; focusable: boolean; active: boolean };\nconst [Collection, useCollection, createCollectionScope] = createCollection<\n  HTMLSpanElement,\n  ItemData\n>(GROUP_NAME);\n\ntype ScopedProps<P> = P & { __scopeRovingFocusGroup?: Scope };\nconst [createRovingFocusGroupContext, createRovingFocusGroupScope] = createContextScope(\n  GROUP_NAME,\n  [createCollectionScope]\n);\n\ntype Orientation = React.AriaAttributes['aria-orientation'];\ntype Direction = 'ltr' | 'rtl';\n\ninterface RovingFocusGroupOptions {\n  /**\n   * The orientation of the group.\n   * Mainly so arrow navigation is done accordingly (left & right vs. up & down)\n   */\n  orientation?: Orientation;\n  /**\n   * The direction of navigation between items.\n   * @defaultValue ltr\n   */\n  dir?: Direction;\n  /**\n   * Whether keyboard navigation should loop around\n   * @defaultValue false\n   */\n  loop?: boolean;\n}\n\ntype RovingContextValue = RovingFocusGroupOptions & {\n  currentTabStopId: string | null;\n  onItemFocus(tabStopId: string): void;\n  onItemShiftTab(): void;\n};\n\nconst [RovingFocusProvider, useRovingFocusContext] =\n  createRovingFocusGroupContext<RovingContextValue>(GROUP_NAME);\n\ntype RovingFocusGroupElement = RovingFocusGroupImplElement;\ninterface RovingFocusGroupProps extends RovingFocusGroupImplProps {}\n\nconst RovingFocusGroup = React.forwardRef<RovingFocusGroupElement, RovingFocusGroupProps>(\n  (props: ScopedProps<RovingFocusGroupProps>, forwardedRef) => {\n    return (\n      <Collection.Provider scope={props.__scopeRovingFocusGroup}>\n        <Collection.Slot scope={props.__scopeRovingFocusGroup}>\n          <RovingFocusGroupImpl {...props} ref={forwardedRef} />\n        </Collection.Slot>\n      </Collection.Provider>\n    );\n  }\n);\n\nRovingFocusGroup.displayName = GROUP_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype RovingFocusGroupImplElement = React.ElementRef<typeof Primitive.div>;\ntype PrimitiveDivProps = Radix.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface RovingFocusGroupImplProps\n  extends Omit<PrimitiveDivProps, 'dir'>,\n    RovingFocusGroupOptions {\n  currentTabStopId?: string | null;\n  defaultCurrentTabStopId?: string;\n  onCurrentTabStopIdChange?: (tabStopId: string | null) => void;\n  onEntryFocus?: (event: Event) => void;\n}\n\nconst RovingFocusGroupImpl = React.forwardRef<\n  RovingFocusGroupImplElement,\n  RovingFocusGroupImplProps\n>((props: ScopedProps<RovingFocusGroupImplProps>, forwardedRef) => {\n  const {\n    __scopeRovingFocusGroup,\n    orientation,\n    dir = 'ltr',\n    loop = false,\n    currentTabStopId: currentTabStopIdProp,\n    defaultCurrentTabStopId,\n    onCurrentTabStopIdChange,\n    onEntryFocus,\n    ...groupProps\n  } = props;\n  const ref = React.useRef<RovingFocusGroupImplElement>(null);\n  const composedRefs = useComposedRefs(forwardedRef, ref);\n  const [currentTabStopId = null, setCurrentTabStopId] = useControllableState({\n    prop: currentTabStopIdProp,\n    defaultProp: defaultCurrentTabStopId,\n    onChange: onCurrentTabStopIdChange,\n  });\n  const [isTabbingBackOut, setIsTabbingBackOut] = React.useState(false);\n  const handleEntryFocus = useCallbackRef(onEntryFocus);\n  const getItems = useCollection(__scopeRovingFocusGroup);\n  const isClickFocusRef = React.useRef(false);\n\n  React.useEffect(() => {\n    const node = ref.current;\n    if (node) {\n      node.addEventListener(ENTRY_FOCUS, handleEntryFocus);\n      return () => node.removeEventListener(ENTRY_FOCUS, handleEntryFocus);\n    }\n  }, [handleEntryFocus]);\n\n  return (\n    <RovingFocusProvider\n      scope={__scopeRovingFocusGroup}\n      orientation={orientation}\n      dir={dir}\n      loop={loop}\n      currentTabStopId={currentTabStopId}\n      onItemFocus={React.useCallback(\n        (tabStopId) => setCurrentTabStopId(tabStopId),\n        [setCurrentTabStopId]\n      )}\n      onItemShiftTab={React.useCallback(() => setIsTabbingBackOut(true), [])}\n    >\n      <Primitive.div\n        tabIndex={isTabbingBackOut ? -1 : 0}\n        data-orientation={orientation}\n        {...groupProps}\n        ref={composedRefs}\n        style={{ outline: 'none', ...props.style }}\n        onMouseDown={composeEventHandlers(props.onMouseDown, () => {\n          isClickFocusRef.current = true;\n        })}\n        onFocus={composeEventHandlers(props.onFocus, (event) => {\n          // We normally wouldn't need this check, because we already check\n          // that the focus is on the current target and not bubbling to it.\n          // We do this because Safari doesn't focus buttons when clicked, and\n          // instead, the wrapper will get focused and not through a bubbling event.\n          const isKeyboardFocus = !isClickFocusRef.current;\n\n          if (event.target === event.currentTarget && isKeyboardFocus && !isTabbingBackOut) {\n            const entryFocusEvent = new Event(ENTRY_FOCUS, EVENT_OPTIONS);\n            event.currentTarget.dispatchEvent(entryFocusEvent);\n\n            if (!entryFocusEvent.defaultPrevented) {\n              const items = getItems().filter((item) => item.focusable);\n              const activeItem = items.find((item) => item.active);\n              const currentItem = items.find((item) => item.id === currentTabStopId);\n              const candidateItems = [activeItem, currentItem, ...items].filter(\n                Boolean\n              ) as typeof items;\n              const candidateNodes = candidateItems.map((item) => item.ref.current!);\n              focusFirst(candidateNodes);\n            }\n          }\n\n          isClickFocusRef.current = false;\n        })}\n        onBlur={composeEventHandlers(props.onBlur, () => setIsTabbingBackOut(false))}\n      />\n    </RovingFocusProvider>\n  );\n});\n\n/* -------------------------------------------------------------------------------------------------\n * RovingFocusGroupItem\n * -----------------------------------------------------------------------------------------------*/\n\nconst ITEM_NAME = 'RovingFocusGroupItem';\n\ntype RovingFocusItemElement = React.ElementRef<typeof Primitive.span>;\ntype PrimitiveSpanProps = Radix.ComponentPropsWithoutRef<typeof Primitive.span>;\ninterface RovingFocusItemProps extends PrimitiveSpanProps {\n  focusable?: boolean;\n  active?: boolean;\n}\n\nconst RovingFocusGroupItem = React.forwardRef<RovingFocusItemElement, RovingFocusItemProps>(\n  (props: ScopedProps<RovingFocusItemProps>, forwardedRef) => {\n    const { __scopeRovingFocusGroup, focusable = true, active = false, ...itemProps } = props;\n    const id = useId();\n    const context = useRovingFocusContext(ITEM_NAME, __scopeRovingFocusGroup);\n    const isCurrentTabStop = context.currentTabStopId === id;\n    const getItems = useCollection(__scopeRovingFocusGroup);\n\n    return (\n      <Collection.ItemSlot\n        scope={__scopeRovingFocusGroup}\n        id={id}\n        focusable={focusable}\n        active={active}\n      >\n        <Primitive.span\n          tabIndex={isCurrentTabStop ? 0 : -1}\n          data-orientation={context.orientation}\n          {...itemProps}\n          ref={forwardedRef}\n          onMouseDown={composeEventHandlers(props.onMouseDown, (event) => {\n            // We prevent focusing non-focusable items on `mousedown`.\n            // Even though the item has tabIndex={-1}, that only means take it out of the tab order.\n            if (!focusable) event.preventDefault();\n            // Safari doesn't focus a button when clicked so we run our logic on mousedown also\n            else context.onItemFocus(id);\n          })}\n          onFocus={composeEventHandlers(props.onFocus, () => context.onItemFocus(id))}\n          onKeyDown={composeEventHandlers(props.onKeyDown, (event) => {\n            if (event.key === 'Tab' && event.shiftKey) {\n              context.onItemShiftTab();\n              return;\n            }\n\n            if (event.target !== event.currentTarget) return;\n\n            const focusIntent = getFocusIntent(event, context.orientation, context.dir);\n\n            if (focusIntent !== undefined) {\n              event.preventDefault();\n              const items = getItems().filter((item) => item.focusable);\n              let candidateNodes = items.map((item) => item.ref.current!);\n\n              if (focusIntent === 'last') candidateNodes.reverse();\n              else if (focusIntent === 'prev' || focusIntent === 'next') {\n                if (focusIntent === 'prev') candidateNodes.reverse();\n                const currentIndex = candidateNodes.indexOf(event.currentTarget);\n                candidateNodes = context.loop\n                  ? wrapArray(candidateNodes, currentIndex + 1)\n                  : candidateNodes.slice(currentIndex + 1);\n              }\n\n              /**\n               * Imperative focus during keydown is risky so we prevent React's batching updates\n               * to avoid potential bugs. See: https://github.com/facebook/react/issues/20332\n               */\n              setTimeout(() => focusFirst(candidateNodes));\n            }\n          })}\n        />\n      </Collection.ItemSlot>\n    );\n  }\n);\n\nRovingFocusGroupItem.displayName = ITEM_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\n// prettier-ignore\nconst MAP_KEY_TO_FOCUS_INTENT: Record<string, FocusIntent> = {\n  ArrowLeft: 'prev', ArrowUp: 'prev',\n  ArrowRight: 'next', ArrowDown: 'next',\n  PageUp: 'first', Home: 'first',\n  PageDown: 'last', End: 'last',\n};\n\nfunction getDirectionAwareKey(key: string, dir?: Direction) {\n  if (dir !== 'rtl') return key;\n  return key === 'ArrowLeft' ? 'ArrowRight' : key === 'ArrowRight' ? 'ArrowLeft' : key;\n}\n\ntype FocusIntent = 'first' | 'last' | 'prev' | 'next';\n\nfunction getFocusIntent(event: React.KeyboardEvent, orientation?: Orientation, dir?: Direction) {\n  const key = getDirectionAwareKey(event.key, dir);\n  if (orientation === 'vertical' && ['ArrowLeft', 'ArrowRight'].includes(key)) return undefined;\n  if (orientation === 'horizontal' && ['ArrowUp', 'ArrowDown'].includes(key)) return undefined;\n  return MAP_KEY_TO_FOCUS_INTENT[key];\n}\n\nfunction focusFirst(candidates: HTMLElement[]) {\n  const PREVIOUSLY_FOCUSED_ELEMENT = document.activeElement;\n  for (const candidate of candidates) {\n    // if focus is already where we want to go, we don't want to keep going through the candidates\n    if (candidate === PREVIOUSLY_FOCUSED_ELEMENT) return;\n    candidate.focus();\n    if (document.activeElement !== PREVIOUSLY_FOCUSED_ELEMENT) return;\n  }\n}\n\n/**\n * Wraps an array around itself at a given start index\n * Example: `wrapArray(['a', 'b', 'c', 'd'], 2) === ['c', 'd', 'a', 'b']`\n */\nfunction wrapArray<T>(array: T[], startIndex: number) {\n  return array.map((_, index) => array[(startIndex + index) % array.length]);\n}\n\nconst Root = RovingFocusGroup;\nconst Item = RovingFocusGroupItem;\n\nexport {\n  createRovingFocusGroupScope,\n  //\n  RovingFocusGroup,\n  RovingFocusGroupItem,\n  //\n  Root,\n  Item,\n};\nexport type { RovingFocusGroupProps, RovingFocusItemProps };\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}