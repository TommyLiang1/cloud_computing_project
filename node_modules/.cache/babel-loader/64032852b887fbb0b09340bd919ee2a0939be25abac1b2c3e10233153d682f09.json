{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nimport { Logger, Mutex } from '@aws-amplify/core';\nimport PushStream from 'zen-push';\nimport { ModelPredicateCreator } from '../predicates';\nimport { OpType, QueryOne, isTargetNameAssociation } from '../types';\nimport { isModelConstructor, STORAGE, validatePredicate, valuesEqual } from '../util';\nimport { getIdentifierValue } from '../sync/utils';\nimport getDefaultAdapter from './adapter/getDefaultAdapter';\nvar logger = new Logger('DataStore');\nvar StorageClass = /** @class */function () {\n  function StorageClass(schema, namespaceResolver, getModelConstructorByModelName, modelInstanceCreator, adapter, sessionId) {\n    this.schema = schema;\n    this.namespaceResolver = namespaceResolver;\n    this.getModelConstructorByModelName = getModelConstructorByModelName;\n    this.modelInstanceCreator = modelInstanceCreator;\n    this.adapter = adapter;\n    this.sessionId = sessionId;\n    this.adapter = this.adapter || getDefaultAdapter();\n    this.pushStream = new PushStream();\n  }\n  StorageClass.getNamespace = function () {\n    var namespace = {\n      name: STORAGE,\n      relationships: {},\n      enums: {},\n      models: {},\n      nonModels: {}\n    };\n    return namespace;\n  };\n  StorageClass.prototype.init = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var resolve, reject;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!(this.initialized !== undefined)) return [3 /*break*/, 2];\n            return [4 /*yield*/, this.initialized];\n          case 1:\n            _a.sent();\n            return [2 /*return*/];\n          case 2:\n            logger.debug('Starting Storage');\n            this.initialized = new Promise(function (res, rej) {\n              resolve = res;\n              reject = rej;\n            });\n            this.adapter.setUp(this.schema, this.namespaceResolver, this.modelInstanceCreator, this.getModelConstructorByModelName, this.sessionId).then(resolve, reject);\n            return [4 /*yield*/, this.initialized];\n          case 3:\n            _a.sent();\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  StorageClass.prototype.save = function (model, condition, mutator, patchesTuple) {\n    return __awaiter(this, void 0, void 0, function () {\n      var result;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.init()];\n          case 1:\n            _a.sent();\n            return [4 /*yield*/, this.adapter.save(model, condition)];\n          case 2:\n            result = _a.sent();\n            result.forEach(function (r) {\n              var _a = __read(r, 2),\n                savedElement = _a[0],\n                opType = _a[1];\n              // truthy when save is called by the Merger\n              var syncResponse = !!mutator;\n              var updateMutationInput;\n              // don't attempt to calc mutation input when storage.save\n              // is called by Merger, i.e., when processing an AppSync response\n              if (opType === OpType.UPDATE && !syncResponse) {\n                //\n                // TODO: LOOK!!!\n                // the `model` used here is in effect regardless of what model\n                // comes back from adapter.save().\n                // Prior to fix, SQLite adapter had been returning two models\n                // of different types, resulting in invalid outbox entries.\n                //\n                // the bug is essentially fixed in SQLite adapter.\n                // leaving as-is, because it's currently unclear whether anything\n                // depends on this remaining as-is.\n                //\n                updateMutationInput = _this.getUpdateMutationInput(model, savedElement, patchesTuple);\n                // // an update without changed user fields\n                // => don't create mutationEvent\n                if (updateMutationInput === null) {\n                  return result;\n                }\n              }\n              var element = updateMutationInput || savedElement;\n              var modelConstructor = Object.getPrototypeOf(savedElement).constructor;\n              _this.pushStream.next({\n                model: modelConstructor,\n                opType: opType,\n                element: element,\n                mutator: mutator,\n                condition: ModelPredicateCreator.getPredicates(condition, false),\n                savedElement: savedElement\n              });\n            });\n            return [2 /*return*/, result];\n        }\n      });\n    });\n  };\n  StorageClass.prototype.delete = function (modelOrModelConstructor, condition, mutator) {\n    return __awaiter(this, void 0, void 0, function () {\n      var deleted, models, modelConstructor, namespaceName, modelDefinition, modelIds;\n      var _a;\n      var _this = this;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4 /*yield*/, this.init()];\n          case 1:\n            _b.sent();\n            return [4 /*yield*/, this.adapter.delete(modelOrModelConstructor, condition)];\n          case 2:\n            _a = __read.apply(void 0, [_b.sent(), 2]), models = _a[0], deleted = _a[1];\n            modelConstructor = isModelConstructor(modelOrModelConstructor) ? modelOrModelConstructor : Object.getPrototypeOf(modelOrModelConstructor || {}).constructor;\n            namespaceName = this.namespaceResolver(modelConstructor);\n            modelDefinition = this.schema.namespaces[namespaceName].models[modelConstructor.name];\n            modelIds = new Set(models.map(function (model) {\n              var modelId = getIdentifierValue(modelDefinition, model);\n              return modelId;\n            }));\n            if (!isModelConstructor(modelOrModelConstructor) && !Array.isArray(deleted)) {\n              deleted = [deleted];\n            }\n            deleted.forEach(function (model) {\n              var modelConstructor = Object.getPrototypeOf(model).constructor;\n              var theCondition;\n              if (!isModelConstructor(modelOrModelConstructor)) {\n                var modelId = getIdentifierValue(modelDefinition, model);\n                theCondition = modelIds.has(modelId) ? ModelPredicateCreator.getPredicates(condition, false) : undefined;\n              }\n              _this.pushStream.next({\n                model: modelConstructor,\n                opType: OpType.DELETE,\n                element: model,\n                mutator: mutator,\n                condition: theCondition\n              });\n            });\n            return [2 /*return*/, [models, deleted]];\n        }\n      });\n    });\n  };\n  StorageClass.prototype.query = function (modelConstructor, predicate, pagination) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.init()];\n          case 1:\n            _a.sent();\n            return [4 /*yield*/, this.adapter.query(modelConstructor, predicate, pagination)];\n          case 2:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  StorageClass.prototype.queryOne = function (modelConstructor, firstOrLast) {\n    if (firstOrLast === void 0) {\n      firstOrLast = QueryOne.FIRST;\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      var record;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.init()];\n          case 1:\n            _a.sent();\n            return [4 /*yield*/, this.adapter.queryOne(modelConstructor, firstOrLast)];\n          case 2:\n            record = _a.sent();\n            return [2 /*return*/, record];\n        }\n      });\n    });\n  };\n  StorageClass.prototype.observe = function (modelConstructor, predicate, skipOwn) {\n    var listenToAll = !modelConstructor;\n    var _a = ModelPredicateCreator.getPredicates(predicate, false) || {},\n      predicates = _a.predicates,\n      type = _a.type;\n    var hasPredicate = !!predicates;\n    var result = this.pushStream.observable.filter(function (_a) {\n      var mutator = _a.mutator;\n      return !skipOwn || mutator !== skipOwn;\n    }).map(function (_a) {\n      var _mutator = _a.mutator,\n        message = __rest(_a, [\"mutator\"]);\n      return message;\n    });\n    if (!listenToAll) {\n      result = result.filter(function (_a) {\n        var model = _a.model,\n          element = _a.element;\n        if (modelConstructor !== model) {\n          return false;\n        }\n        if (hasPredicate) {\n          return validatePredicate(element, type, predicates);\n        }\n        return true;\n      });\n    }\n    return result;\n  };\n  StorageClass.prototype.clear = function (completeObservable) {\n    if (completeObservable === void 0) {\n      completeObservable = true;\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.initialized = undefined;\n            return [4 /*yield*/, this.adapter.clear()];\n          case 1:\n            _a.sent();\n            if (completeObservable) {\n              this.pushStream.complete();\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  StorageClass.prototype.batchSave = function (modelConstructor, items, mutator) {\n    return __awaiter(this, void 0, void 0, function () {\n      var result;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.init()];\n          case 1:\n            _a.sent();\n            return [4 /*yield*/, this.adapter.batchSave(modelConstructor, items)];\n          case 2:\n            result = _a.sent();\n            result.forEach(function (_a) {\n              var _b = __read(_a, 2),\n                element = _b[0],\n                opType = _b[1];\n              _this.pushStream.next({\n                model: modelConstructor,\n                opType: opType,\n                element: element,\n                mutator: mutator,\n                condition: undefined\n              });\n            });\n            return [2 /*return*/, result];\n        }\n      });\n    });\n  };\n  // returns null if no user fields were changed (determined by value comparison)\n  StorageClass.prototype.getUpdateMutationInput = function (model, originalElement, patchesTuple) {\n    var e_1, _a;\n    var containsPatches = patchesTuple && patchesTuple.length;\n    if (!containsPatches) {\n      return null;\n    }\n    var _b = __read(patchesTuple, 2),\n      patches = _b[0],\n      source = _b[1];\n    var updatedElement = {};\n    // extract array of updated fields from patches\n    var updatedFields = patches.map(function (patch) {\n      return patch.path && patch.path[0];\n    });\n    // check model def for association and replace with targetName if exists\n    var modelConstructor = Object.getPrototypeOf(model).constructor;\n    var namespace = this.namespaceResolver(modelConstructor);\n    var fields = this.schema.namespaces[namespace].models[modelConstructor.name].fields;\n    var _c = this.schema.namespaces[namespace].keys[modelConstructor.name],\n      primaryKey = _c.primaryKey,\n      _d = _c.compositeKeys,\n      compositeKeys = _d === void 0 ? [] : _d;\n    // set original values for these fields\n    updatedFields.forEach(function (field) {\n      var e_2, _a, e_3, _b, e_4, _c, e_5, _d, e_6, _e;\n      var _f;\n      var targetNames = isTargetNameAssociation((_f = fields[field]) === null || _f === void 0 ? void 0 : _f.association);\n      if (Array.isArray(targetNames)) {\n        try {\n          // if field refers to a belongsTo relation, use the target field instead\n          for (var targetNames_1 = __values(targetNames), targetNames_1_1 = targetNames_1.next(); !targetNames_1_1.done; targetNames_1_1 = targetNames_1.next()) {\n            var targetName = targetNames_1_1.value;\n            // check field values by value. Ignore unchanged fields\n            if (!valuesEqual(source[targetName], originalElement[targetName])) {\n              // if the field was updated to 'undefined', replace with 'null' for compatibility with JSON and GraphQL\n              updatedElement[targetName] = originalElement[targetName] === undefined ? null : originalElement[targetName];\n              try {\n                for (var compositeKeys_1 = (e_3 = void 0, __values(compositeKeys)), compositeKeys_1_1 = compositeKeys_1.next(); !compositeKeys_1_1.done; compositeKeys_1_1 = compositeKeys_1.next()) {\n                  var fieldSet = compositeKeys_1_1.value;\n                  // include all of the fields that comprise the composite key\n                  if (fieldSet.has(targetName)) {\n                    try {\n                      for (var fieldSet_1 = (e_4 = void 0, __values(fieldSet)), fieldSet_1_1 = fieldSet_1.next(); !fieldSet_1_1.done; fieldSet_1_1 = fieldSet_1.next()) {\n                        var compositeField = fieldSet_1_1.value;\n                        updatedElement[compositeField] = originalElement[compositeField];\n                      }\n                    } catch (e_4_1) {\n                      e_4 = {\n                        error: e_4_1\n                      };\n                    } finally {\n                      try {\n                        if (fieldSet_1_1 && !fieldSet_1_1.done && (_c = fieldSet_1.return)) _c.call(fieldSet_1);\n                      } finally {\n                        if (e_4) throw e_4.error;\n                      }\n                    }\n                  }\n                }\n              } catch (e_3_1) {\n                e_3 = {\n                  error: e_3_1\n                };\n              } finally {\n                try {\n                  if (compositeKeys_1_1 && !compositeKeys_1_1.done && (_b = compositeKeys_1.return)) _b.call(compositeKeys_1);\n                } finally {\n                  if (e_3) throw e_3.error;\n                }\n              }\n            }\n          }\n        } catch (e_2_1) {\n          e_2 = {\n            error: e_2_1\n          };\n        } finally {\n          try {\n            if (targetNames_1_1 && !targetNames_1_1.done && (_a = targetNames_1.return)) _a.call(targetNames_1);\n          } finally {\n            if (e_2) throw e_2.error;\n          }\n        }\n      } else {\n        // Backwards compatibility pre-CPK\n        // if field refers to a belongsTo relation, use the target field instead\n        var key = targetNames || field;\n        // check field values by value. Ignore unchanged fields\n        if (!valuesEqual(source[key], originalElement[key])) {\n          // if the field was updated to 'undefined', replace with 'null' for compatibility with JSON and GraphQL\n          updatedElement[key] = originalElement[key] === undefined ? null : originalElement[key];\n          try {\n            for (var compositeKeys_2 = __values(compositeKeys), compositeKeys_2_1 = compositeKeys_2.next(); !compositeKeys_2_1.done; compositeKeys_2_1 = compositeKeys_2.next()) {\n              var fieldSet = compositeKeys_2_1.value;\n              // include all of the fields that comprise the composite key\n              if (fieldSet.has(key)) {\n                try {\n                  for (var fieldSet_2 = (e_6 = void 0, __values(fieldSet)), fieldSet_2_1 = fieldSet_2.next(); !fieldSet_2_1.done; fieldSet_2_1 = fieldSet_2.next()) {\n                    var compositeField = fieldSet_2_1.value;\n                    updatedElement[compositeField] = originalElement[compositeField];\n                  }\n                } catch (e_6_1) {\n                  e_6 = {\n                    error: e_6_1\n                  };\n                } finally {\n                  try {\n                    if (fieldSet_2_1 && !fieldSet_2_1.done && (_e = fieldSet_2.return)) _e.call(fieldSet_2);\n                  } finally {\n                    if (e_6) throw e_6.error;\n                  }\n                }\n              }\n            }\n          } catch (e_5_1) {\n            e_5 = {\n              error: e_5_1\n            };\n          } finally {\n            try {\n              if (compositeKeys_2_1 && !compositeKeys_2_1.done && (_d = compositeKeys_2.return)) _d.call(compositeKeys_2);\n            } finally {\n              if (e_5) throw e_5.error;\n            }\n          }\n        }\n      }\n    });\n    // Exit early when there are no changes introduced in the update mutation\n    if (Object.keys(updatedElement).length === 0) {\n      return null;\n    }\n    // include field(s) from custom PK if one is specified for the model\n    if (primaryKey && primaryKey.length) {\n      try {\n        for (var primaryKey_1 = __values(primaryKey), primaryKey_1_1 = primaryKey_1.next(); !primaryKey_1_1.done; primaryKey_1_1 = primaryKey_1.next()) {\n          var pkField = primaryKey_1_1.value;\n          updatedElement[pkField] = originalElement[pkField];\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (primaryKey_1_1 && !primaryKey_1_1.done && (_a = primaryKey_1.return)) _a.call(primaryKey_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    }\n    var id = originalElement.id,\n      _version = originalElement._version,\n      _lastChangedAt = originalElement._lastChangedAt,\n      _deleted = originalElement._deleted;\n    // For update mutations we only want to send fields with changes\n    // and the required internal fields\n    return __assign(__assign({}, updatedElement), {\n      id: id,\n      _version: _version,\n      _lastChangedAt: _lastChangedAt,\n      _deleted: _deleted\n    });\n  };\n  return StorageClass;\n}();\nvar ExclusiveStorage = /** @class */function () {\n  function ExclusiveStorage(schema, namespaceResolver, getModelConstructorByModelName, modelInstanceCreator, adapter, sessionId) {\n    this.mutex = new Mutex();\n    this.storage = new StorageClass(schema, namespaceResolver, getModelConstructorByModelName, modelInstanceCreator, adapter, sessionId);\n  }\n  ExclusiveStorage.prototype.runExclusive = function (fn) {\n    return this.mutex.runExclusive(fn.bind(this, this.storage));\n  };\n  ExclusiveStorage.prototype.save = function (model, condition, mutator, patchesTuple) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, this.runExclusive(function (storage) {\n          return storage.save(model, condition, mutator, patchesTuple);\n        })];\n      });\n    });\n  };\n  ExclusiveStorage.prototype.delete = function (modelOrModelConstructor, condition, mutator) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, this.runExclusive(function (storage) {\n          if (isModelConstructor(modelOrModelConstructor)) {\n            var modelConstructor = modelOrModelConstructor;\n            return storage.delete(modelConstructor, condition, mutator);\n          } else {\n            var model = modelOrModelConstructor;\n            return storage.delete(model, condition, mutator);\n          }\n        })];\n      });\n    });\n  };\n  ExclusiveStorage.prototype.query = function (modelConstructor, predicate, pagination) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, this.runExclusive(function (storage) {\n          return storage.query(modelConstructor, predicate, pagination);\n        })];\n      });\n    });\n  };\n  ExclusiveStorage.prototype.queryOne = function (modelConstructor, firstOrLast) {\n    if (firstOrLast === void 0) {\n      firstOrLast = QueryOne.FIRST;\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, this.runExclusive(function (storage) {\n          return storage.queryOne(modelConstructor, firstOrLast);\n        })];\n      });\n    });\n  };\n  ExclusiveStorage.getNamespace = function () {\n    return StorageClass.getNamespace();\n  };\n  ExclusiveStorage.prototype.observe = function (modelConstructor, predicate, skipOwn) {\n    return this.storage.observe(modelConstructor, predicate, skipOwn);\n  };\n  ExclusiveStorage.prototype.clear = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.runExclusive(function (storage) {\n              return storage.clear();\n            })];\n          case 1:\n            _a.sent();\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  ExclusiveStorage.prototype.batchSave = function (modelConstructor, items) {\n    return this.storage.batchSave(modelConstructor, items);\n  };\n  ExclusiveStorage.prototype.init = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, this.storage.init()];\n      });\n    });\n  };\n  return ExclusiveStorage;\n}();\nexport { ExclusiveStorage };","map":{"version":3,"mappings":"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","names":["Logger","Mutex","PushStream","ModelPredicateCreator","OpType","QueryOne","isTargetNameAssociation","isModelConstructor","STORAGE","validatePredicate","valuesEqual","getIdentifierValue","getDefaultAdapter","logger","schema","namespaceResolver","getModelConstructorByModelName","modelInstanceCreator","adapter","sessionId","pushStream","StorageClass","namespace","name","relationships","enums","models","nonModels","initialized","undefined","_a","debug","Promise","res","rej","resolve","reject","setUp","then","model","condition","mutator","patchesTuple","init","save","result","forEach","savedElement","opType","syncResponse","updateMutationInput","UPDATE","_this","getUpdateMutationInput","element","modelConstructor","Object","getPrototypeOf","constructor","next","getPredicates","modelOrModelConstructor","_b","delete","deleted","namespaceName","modelDefinition","namespaces","modelIds","Set","map","modelId","Array","isArray","theCondition","has","DELETE","predicate","pagination","query","firstOrLast","FIRST","queryOne","record","skipOwn","listenToAll","predicates","type","hasPredicate","observable","filter","message","completeObservable","clear","complete","items","batchSave","originalElement","containsPatches","length","patches","source","updatedElement","updatedFields","path","patch","primaryKey","_d","compositeKeys","field","targetNames","fields","association","targetName","fieldSet","compositeField","key","keys","pkField","_version","_lastChangedAt","_deleted","id","storage","ExclusiveStorage","fn","mutex","runExclusive","bind","getNamespace","observe"],"sources":["C:\\Users\\weida\\Desktop\\playground_CC\\node_modules\\@aws-amplify\\datastore\\src\\storage\\storage.ts"],"sourcesContent":["import { Logger, Mutex } from '@aws-amplify/core';\nimport Observable, { ZenObservable } from 'zen-observable-ts';\nimport PushStream from 'zen-push';\nimport { Patch } from 'immer';\nimport { ModelInstanceCreator } from '../datastore/datastore';\nimport { ModelPredicateCreator } from '../predicates';\nimport {\n\tInternalSchema,\n\tModelInstanceMetadata,\n\tModelPredicate,\n\tNamespaceResolver,\n\tOpType,\n\tPaginationInput,\n\tPersistentModel,\n\tPersistentModelConstructor,\n\tPredicatesGroup,\n\tQueryOne,\n\tSchemaNamespace,\n\tInternalSubscriptionMessage,\n\tSubscriptionMessage,\n\tisTargetNameAssociation,\n} from '../types';\nimport {\n\tisModelConstructor,\n\tSTORAGE,\n\tvalidatePredicate,\n\tvaluesEqual,\n} from '../util';\nimport { getIdentifierValue } from '../sync/utils';\nimport { Adapter } from './adapter';\nimport getDefaultAdapter from './adapter/getDefaultAdapter';\n\nexport type StorageSubscriptionMessage<T extends PersistentModel> =\n\tInternalSubscriptionMessage<T> & {\n\t\tmutator?: Symbol;\n\t};\n\nexport type StorageFacade = Omit<Adapter, 'setUp'>;\nexport type Storage = InstanceType<typeof StorageClass>;\n\nconst logger = new Logger('DataStore');\nclass StorageClass implements StorageFacade {\n\tprivate initialized: Promise<void>;\n\tprivate readonly pushStream: {\n\t\tobservable: Observable<StorageSubscriptionMessage<PersistentModel>>;\n\t} & Required<\n\t\tZenObservable.Observer<StorageSubscriptionMessage<PersistentModel>>\n\t>;\n\n\tconstructor(\n\t\tprivate readonly schema: InternalSchema,\n\t\tprivate readonly namespaceResolver: NamespaceResolver,\n\t\tprivate readonly getModelConstructorByModelName: (\n\t\t\tnamsespaceName: string,\n\t\t\tmodelName: string\n\t\t) => PersistentModelConstructor<any>,\n\t\tprivate readonly modelInstanceCreator: ModelInstanceCreator,\n\t\tprivate readonly adapter?: Adapter,\n\t\tprivate readonly sessionId?: string\n\t) {\n\t\tthis.adapter = this.adapter || getDefaultAdapter();\n\t\tthis.pushStream = new PushStream();\n\t}\n\n\tstatic getNamespace() {\n\t\tconst namespace: SchemaNamespace = {\n\t\t\tname: STORAGE,\n\t\t\trelationships: {},\n\t\t\tenums: {},\n\t\t\tmodels: {},\n\t\t\tnonModels: {},\n\t\t};\n\n\t\treturn namespace;\n\t}\n\n\tasync init() {\n\t\tif (this.initialized !== undefined) {\n\t\t\tawait this.initialized;\n\t\t\treturn;\n\t\t}\n\t\tlogger.debug('Starting Storage');\n\n\t\tlet resolve: (value?: void | PromiseLike<void>) => void;\n\t\tlet reject: (value?: void | PromiseLike<void>) => void;\n\n\t\tthis.initialized = new Promise<void>((res, rej) => {\n\t\t\tresolve = res;\n\t\t\treject = rej;\n\t\t});\n\n\t\tthis.adapter\n\t\t\t.setUp(\n\t\t\t\tthis.schema,\n\t\t\t\tthis.namespaceResolver,\n\t\t\t\tthis.modelInstanceCreator,\n\t\t\t\tthis.getModelConstructorByModelName,\n\t\t\t\tthis.sessionId\n\t\t\t)\n\t\t\t.then(resolve, reject);\n\n\t\tawait this.initialized;\n\t}\n\n\tasync save<T extends PersistentModel>(\n\t\tmodel: T,\n\t\tcondition?: ModelPredicate<T>,\n\t\tmutator?: Symbol,\n\t\tpatchesTuple?: [Patch[], PersistentModel]\n\t): Promise<[T, OpType.INSERT | OpType.UPDATE][]> {\n\t\tawait this.init();\n\n\t\tconst result = await this.adapter.save(model, condition);\n\n\t\tresult.forEach(r => {\n\t\t\tconst [savedElement, opType] = r;\n\n\t\t\t// truthy when save is called by the Merger\n\t\t\tconst syncResponse = !!mutator;\n\n\t\t\tlet updateMutationInput;\n\t\t\t// don't attempt to calc mutation input when storage.save\n\t\t\t// is called by Merger, i.e., when processing an AppSync response\n\t\t\tif (opType === OpType.UPDATE && !syncResponse) {\n\t\t\t\t//\n\t\t\t\t// TODO: LOOK!!!\n\t\t\t\t// the `model` used here is in effect regardless of what model\n\t\t\t\t// comes back from adapter.save().\n\t\t\t\t// Prior to fix, SQLite adapter had been returning two models\n\t\t\t\t// of different types, resulting in invalid outbox entries.\n\t\t\t\t//\n\t\t\t\t// the bug is essentially fixed in SQLite adapter.\n\t\t\t\t// leaving as-is, because it's currently unclear whether anything\n\t\t\t\t// depends on this remaining as-is.\n\t\t\t\t//\n\n\t\t\t\tupdateMutationInput = this.getUpdateMutationInput(\n\t\t\t\t\tmodel,\n\t\t\t\t\tsavedElement,\n\t\t\t\t\tpatchesTuple\n\t\t\t\t);\n\t\t\t\t// // an update without changed user fields\n\t\t\t\t// => don't create mutationEvent\n\t\t\t\tif (updateMutationInput === null) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst element = updateMutationInput || savedElement;\n\n\t\t\tconst modelConstructor = (Object.getPrototypeOf(savedElement) as Object)\n\t\t\t\t.constructor as PersistentModelConstructor<T>;\n\n\t\t\tthis.pushStream.next({\n\t\t\t\tmodel: modelConstructor,\n\t\t\t\topType,\n\t\t\t\telement,\n\t\t\t\tmutator,\n\t\t\t\tcondition: ModelPredicateCreator.getPredicates(condition, false),\n\t\t\t\tsavedElement,\n\t\t\t});\n\t\t});\n\n\t\treturn result;\n\t}\n\n\tdelete<T extends PersistentModel>(\n\t\tmodel: T,\n\t\tcondition?: ModelPredicate<T>,\n\t\tmutator?: Symbol\n\t): Promise<[T[], T[]]>;\n\tdelete<T extends PersistentModel>(\n\t\tmodelConstructor: PersistentModelConstructor<T>,\n\t\tcondition?: ModelPredicate<T>,\n\t\tmutator?: Symbol\n\t): Promise<[T[], T[]]>;\n\tasync delete<T extends PersistentModel>(\n\t\tmodelOrModelConstructor: T | PersistentModelConstructor<T>,\n\t\tcondition?: ModelPredicate<T>,\n\t\tmutator?: Symbol\n\t): Promise<[T[], T[]]> {\n\t\tawait this.init();\n\n\t\tlet deleted: T[];\n\t\tlet models: T[];\n\n\t\t[models, deleted] = await this.adapter.delete(\n\t\t\tmodelOrModelConstructor,\n\t\t\tcondition\n\t\t);\n\n\t\tconst modelConstructor = isModelConstructor(modelOrModelConstructor)\n\t\t\t? modelOrModelConstructor\n\t\t\t: (Object.getPrototypeOf(modelOrModelConstructor || {})\n\t\t\t\t\t.constructor as PersistentModelConstructor<T>);\n\t\tconst namespaceName = this.namespaceResolver(modelConstructor);\n\n\t\tconst modelDefinition =\n\t\t\tthis.schema.namespaces[namespaceName].models[modelConstructor.name];\n\n\t\tconst modelIds = new Set(\n\t\t\tmodels.map(model => {\n\t\t\t\tconst modelId = getIdentifierValue(modelDefinition, model);\n\t\t\t\treturn modelId;\n\t\t\t})\n\t\t);\n\n\t\tif (\n\t\t\t!isModelConstructor(modelOrModelConstructor) &&\n\t\t\t!Array.isArray(deleted)\n\t\t) {\n\t\t\tdeleted = [deleted];\n\t\t}\n\n\t\tdeleted.forEach(model => {\n\t\t\tconst modelConstructor = (Object.getPrototypeOf(model) as Object)\n\t\t\t\t.constructor as PersistentModelConstructor<T>;\n\n\t\t\tlet theCondition: PredicatesGroup<any>;\n\n\t\t\tif (!isModelConstructor(modelOrModelConstructor)) {\n\t\t\t\tconst modelId = getIdentifierValue(modelDefinition, model);\n\t\t\t\ttheCondition = modelIds.has(modelId)\n\t\t\t\t\t? ModelPredicateCreator.getPredicates(condition, false)\n\t\t\t\t\t: undefined;\n\t\t\t}\n\n\t\t\tthis.pushStream.next({\n\t\t\t\tmodel: modelConstructor,\n\t\t\t\topType: OpType.DELETE,\n\t\t\t\telement: model,\n\t\t\t\tmutator,\n\t\t\t\tcondition: theCondition,\n\t\t\t});\n\t\t});\n\n\t\treturn [models, deleted];\n\t}\n\n\tasync query<T extends PersistentModel>(\n\t\tmodelConstructor: PersistentModelConstructor<T>,\n\t\tpredicate?: ModelPredicate<T>,\n\t\tpagination?: PaginationInput<T>\n\t): Promise<T[]> {\n\t\tawait this.init();\n\n\t\treturn await this.adapter.query(modelConstructor, predicate, pagination);\n\t}\n\n\tasync queryOne<T extends PersistentModel>(\n\t\tmodelConstructor: PersistentModelConstructor<T>,\n\t\tfirstOrLast: QueryOne = QueryOne.FIRST\n\t): Promise<T> {\n\t\tawait this.init();\n\n\t\tconst record = await this.adapter.queryOne(modelConstructor, firstOrLast);\n\t\treturn record;\n\t}\n\n\tobserve<T extends PersistentModel>(\n\t\tmodelConstructor?: PersistentModelConstructor<T>,\n\t\tpredicate?: ModelPredicate<T>,\n\t\tskipOwn?: Symbol\n\t): Observable<SubscriptionMessage<T>> {\n\t\tconst listenToAll = !modelConstructor;\n\t\tconst { predicates, type } =\n\t\t\tModelPredicateCreator.getPredicates(predicate, false) || {};\n\t\tconst hasPredicate = !!predicates;\n\n\t\tlet result = this.pushStream.observable\n\t\t\t.filter(({ mutator }) => {\n\t\t\t\treturn !skipOwn || mutator !== skipOwn;\n\t\t\t})\n\t\t\t.map(\n\t\t\t\t({ mutator: _mutator, ...message }) => message as SubscriptionMessage<T>\n\t\t\t);\n\n\t\tif (!listenToAll) {\n\t\t\tresult = result.filter(({ model, element }) => {\n\t\t\t\tif (modelConstructor !== model) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tif (hasPredicate) {\n\t\t\t\t\treturn validatePredicate(element, type, predicates);\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t});\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tasync clear(completeObservable = true) {\n\t\tthis.initialized = undefined;\n\n\t\tawait this.adapter.clear();\n\n\t\tif (completeObservable) {\n\t\t\tthis.pushStream.complete();\n\t\t}\n\t}\n\n\tasync batchSave<T extends PersistentModel>(\n\t\tmodelConstructor: PersistentModelConstructor<any>,\n\t\titems: ModelInstanceMetadata[],\n\t\tmutator?: Symbol\n\t): Promise<[T, OpType][]> {\n\t\tawait this.init();\n\n\t\tconst result = await this.adapter.batchSave(modelConstructor, items);\n\n\t\tresult.forEach(([element, opType]) => {\n\t\t\tthis.pushStream.next({\n\t\t\t\tmodel: modelConstructor,\n\t\t\t\topType,\n\t\t\t\telement,\n\t\t\t\tmutator,\n\t\t\t\tcondition: undefined,\n\t\t\t});\n\t\t});\n\n\t\treturn result as any;\n\t}\n\n\t// returns null if no user fields were changed (determined by value comparison)\n\tprivate getUpdateMutationInput<T extends PersistentModel>(\n\t\tmodel: T,\n\t\toriginalElement: T,\n\t\tpatchesTuple?: [Patch[], PersistentModel]\n\t): PersistentModel | null {\n\t\tconst containsPatches = patchesTuple && patchesTuple.length;\n\t\tif (!containsPatches) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst [patches, source] = patchesTuple;\n\t\tconst updatedElement = {};\n\t\t// extract array of updated fields from patches\n\t\tconst updatedFields = <string[]>(\n\t\t\tpatches.map(patch => patch.path && patch.path[0])\n\t\t);\n\n\t\t// check model def for association and replace with targetName if exists\n\t\tconst modelConstructor = Object.getPrototypeOf(model)\n\t\t\t.constructor as PersistentModelConstructor<T>;\n\t\tconst namespace = this.namespaceResolver(modelConstructor);\n\t\tconst { fields } =\n\t\t\tthis.schema.namespaces[namespace].models[modelConstructor.name];\n\t\tconst { primaryKey, compositeKeys = [] } =\n\t\t\tthis.schema.namespaces[namespace].keys[modelConstructor.name];\n\n\t\t// set original values for these fields\n\t\tupdatedFields.forEach((field: string) => {\n\t\t\tconst targetNames: any = isTargetNameAssociation(\n\t\t\t\tfields[field]?.association\n\t\t\t);\n\n\t\t\tif (Array.isArray(targetNames)) {\n\t\t\t\t// if field refers to a belongsTo relation, use the target field instead\n\n\t\t\t\tfor (const targetName of targetNames) {\n\t\t\t\t\t// check field values by value. Ignore unchanged fields\n\t\t\t\t\tif (!valuesEqual(source[targetName], originalElement[targetName])) {\n\t\t\t\t\t\t// if the field was updated to 'undefined', replace with 'null' for compatibility with JSON and GraphQL\n\n\t\t\t\t\t\tupdatedElement[targetName] =\n\t\t\t\t\t\t\toriginalElement[targetName] === undefined\n\t\t\t\t\t\t\t\t? null\n\t\t\t\t\t\t\t\t: originalElement[targetName];\n\n\t\t\t\t\t\tfor (const fieldSet of compositeKeys) {\n\t\t\t\t\t\t\t// include all of the fields that comprise the composite key\n\t\t\t\t\t\t\tif (fieldSet.has(targetName)) {\n\t\t\t\t\t\t\t\tfor (const compositeField of fieldSet) {\n\t\t\t\t\t\t\t\t\tupdatedElement[compositeField] =\n\t\t\t\t\t\t\t\t\t\toriginalElement[compositeField];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Backwards compatibility pre-CPK\n\n\t\t\t\t// if field refers to a belongsTo relation, use the target field instead\n\t\t\t\tconst key = targetNames || field;\n\n\t\t\t\t// check field values by value. Ignore unchanged fields\n\t\t\t\tif (!valuesEqual(source[key], originalElement[key])) {\n\t\t\t\t\t// if the field was updated to 'undefined', replace with 'null' for compatibility with JSON and GraphQL\n\n\t\t\t\t\tupdatedElement[key] =\n\t\t\t\t\t\toriginalElement[key] === undefined ? null : originalElement[key];\n\n\t\t\t\t\tfor (const fieldSet of compositeKeys) {\n\t\t\t\t\t\t// include all of the fields that comprise the composite key\n\t\t\t\t\t\tif (fieldSet.has(key)) {\n\t\t\t\t\t\t\tfor (const compositeField of fieldSet) {\n\t\t\t\t\t\t\t\tupdatedElement[compositeField] =\n\t\t\t\t\t\t\t\t\toriginalElement[compositeField];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t// Exit early when there are no changes introduced in the update mutation\n\t\tif (Object.keys(updatedElement).length === 0) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// include field(s) from custom PK if one is specified for the model\n\t\tif (primaryKey && primaryKey.length) {\n\t\t\tfor (const pkField of primaryKey) {\n\t\t\t\tupdatedElement[pkField] = originalElement[pkField];\n\t\t\t}\n\t\t}\n\n\t\tconst { id, _version, _lastChangedAt, _deleted } = originalElement;\n\n\t\t// For update mutations we only want to send fields with changes\n\t\t// and the required internal fields\n\t\treturn {\n\t\t\t...updatedElement,\n\t\t\tid,\n\t\t\t_version,\n\t\t\t_lastChangedAt,\n\t\t\t_deleted,\n\t\t};\n\t}\n}\n\nclass ExclusiveStorage implements StorageFacade {\n\tprivate storage: StorageClass;\n\tprivate readonly mutex = new Mutex();\n\tconstructor(\n\t\tschema: InternalSchema,\n\t\tnamespaceResolver: NamespaceResolver,\n\t\tgetModelConstructorByModelName: (\n\t\t\tnamsespaceName: string,\n\t\t\tmodelName: string\n\t\t) => PersistentModelConstructor<any>,\n\t\tmodelInstanceCreator: ModelInstanceCreator,\n\t\tadapter?: Adapter,\n\t\tsessionId?: string\n\t) {\n\t\tthis.storage = new StorageClass(\n\t\t\tschema,\n\t\t\tnamespaceResolver,\n\t\t\tgetModelConstructorByModelName,\n\t\t\tmodelInstanceCreator,\n\t\t\tadapter,\n\t\t\tsessionId\n\t\t);\n\t}\n\n\trunExclusive<T>(fn: (storage: StorageClass) => Promise<T>) {\n\t\treturn <Promise<T>>this.mutex.runExclusive(fn.bind(this, this.storage));\n\t}\n\n\tasync save<T extends PersistentModel>(\n\t\tmodel: T,\n\t\tcondition?: ModelPredicate<T>,\n\t\tmutator?: Symbol,\n\t\tpatchesTuple?: [Patch[], PersistentModel]\n\t): Promise<[T, OpType.INSERT | OpType.UPDATE][]> {\n\t\treturn this.runExclusive<[T, OpType.INSERT | OpType.UPDATE][]>(storage =>\n\t\t\tstorage.save(model, condition, mutator, patchesTuple)\n\t\t);\n\t}\n\n\tasync delete<T extends PersistentModel>(\n\t\tmodel: T,\n\t\tcondition?: ModelPredicate<T>,\n\t\tmutator?: Symbol\n\t): Promise<[T[], T[]]>;\n\tasync delete<T extends PersistentModel>(\n\t\tmodelConstructor: PersistentModelConstructor<T>,\n\t\tcondition?: ModelPredicate<T>,\n\t\tmutator?: Symbol\n\t): Promise<[T[], T[]]>;\n\tasync delete<T extends PersistentModel>(\n\t\tmodelOrModelConstructor: T | PersistentModelConstructor<T>,\n\t\tcondition?: ModelPredicate<T>,\n\t\tmutator?: Symbol\n\t): Promise<[T[], T[]]> {\n\t\treturn this.runExclusive<[T[], T[]]>(storage => {\n\t\t\tif (isModelConstructor(modelOrModelConstructor)) {\n\t\t\t\tconst modelConstructor = modelOrModelConstructor;\n\n\t\t\t\treturn storage.delete(modelConstructor, condition, mutator);\n\t\t\t} else {\n\t\t\t\tconst model = modelOrModelConstructor;\n\n\t\t\t\treturn storage.delete(model, condition, mutator);\n\t\t\t}\n\t\t});\n\t}\n\n\tasync query<T extends PersistentModel>(\n\t\tmodelConstructor: PersistentModelConstructor<T>,\n\t\tpredicate?: ModelPredicate<T>,\n\t\tpagination?: PaginationInput<T>\n\t): Promise<T[]> {\n\t\treturn this.runExclusive<T[]>(storage =>\n\t\t\tstorage.query<T>(modelConstructor, predicate, pagination)\n\t\t);\n\t}\n\n\tasync queryOne<T extends PersistentModel>(\n\t\tmodelConstructor: PersistentModelConstructor<T>,\n\t\tfirstOrLast: QueryOne = QueryOne.FIRST\n\t): Promise<T> {\n\t\treturn this.runExclusive<T>(storage =>\n\t\t\tstorage.queryOne<T>(modelConstructor, firstOrLast)\n\t\t);\n\t}\n\n\tstatic getNamespace() {\n\t\treturn StorageClass.getNamespace();\n\t}\n\n\tobserve<T extends PersistentModel>(\n\t\tmodelConstructor?: PersistentModelConstructor<T>,\n\t\tpredicate?: ModelPredicate<T>,\n\t\tskipOwn?: Symbol\n\t): Observable<SubscriptionMessage<T>> {\n\t\treturn this.storage.observe(modelConstructor, predicate, skipOwn);\n\t}\n\n\tasync clear() {\n\t\tawait this.runExclusive(storage => storage.clear());\n\t}\n\n\tbatchSave<T extends PersistentModel>(\n\t\tmodelConstructor: PersistentModelConstructor<T>,\n\t\titems: ModelInstanceMetadata[]\n\t): Promise<[T, OpType][]> {\n\t\treturn this.storage.batchSave(modelConstructor, items);\n\t}\n\n\tasync init() {\n\t\treturn this.storage.init();\n\t}\n}\n\nexport { ExclusiveStorage };\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}