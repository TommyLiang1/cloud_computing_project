{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spread = this && this.__spread || function () {\n  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n  return ar;\n};\n/*\n * Copyright 2017-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nimport { ConsoleLogger as Logger, Credentials, Parser, StorageHelper, Hub } from '@aws-amplify/core';\nimport { GetObjectCommand, DeleteObjectCommand, ListObjectsV2Command, CopyObjectCommand } from '@aws-sdk/client-s3';\nimport { formatUrl } from '@aws-sdk/util-format-url';\nimport { createRequest } from '@aws-sdk/util-create-request';\nimport { S3RequestPresigner } from '@aws-sdk/s3-request-presigner';\nimport { SEND_DOWNLOAD_PROGRESS_EVENT, SEND_UPLOAD_PROGRESS_EVENT } from './axios-http-handler';\nimport { StorageErrorStrings } from '../common/StorageErrorStrings';\nimport { dispatchStorageEvent } from '../common/StorageUtils';\nimport { createPrefixMiddleware, prefixMiddlewareOptions, getPrefix, autoAdjustClockskewMiddleware, autoAdjustClockskewMiddlewareOptions, createS3Client } from '../common/S3ClientUtils';\nimport { AWSS3ProviderManagedUpload } from './AWSS3ProviderManagedUpload';\nimport { AWSS3UploadTask, TaskEvents } from './AWSS3UploadTask';\nimport { UPLOADS_STORAGE_KEY } from '../common/StorageConstants';\nimport * as events from 'events';\nvar logger = new Logger('AWSS3Provider');\nvar DEFAULT_STORAGE_LEVEL = 'public';\nvar DEFAULT_PRESIGN_EXPIRATION = 900;\n/**\n * Provide storage methods to use AWS S3\n */\nvar AWSS3Provider = /** @class */function () {\n  /**\n   * Initialize Storage with AWS configurations\n   * @param {Object} config - Configuration object for storage\n   */\n  function AWSS3Provider(config) {\n    var _this = this;\n    this._config = config ? config : {};\n    this._storage = new StorageHelper().getStorage();\n    Hub.listen('auth', function (data) {\n      var payload = data.payload;\n      if (payload.event === 'signOut' || payload.event === 'signIn') {\n        _this._storage.removeItem(UPLOADS_STORAGE_KEY);\n      }\n    });\n    logger.debug('Storage Options', this._config);\n  }\n  /**\n   * get the category of the plugin\n   */\n  AWSS3Provider.prototype.getCategory = function () {\n    return AWSS3Provider.CATEGORY;\n  };\n  /**\n   * get provider name of the plugin\n   */\n  AWSS3Provider.prototype.getProviderName = function () {\n    return AWSS3Provider.PROVIDER_NAME;\n  };\n  /**\n   * Configure Storage part with aws configuration\n   * @param {Object} config - Configuration of the Storage\n   * @return {Object} - Current configuration\n   */\n  AWSS3Provider.prototype.configure = function (config) {\n    logger.debug('configure Storage', config);\n    if (!config) return this._config;\n    var amplifyConfig = Parser.parseMobilehubConfig(config);\n    this._config = Object.assign({}, this._config, amplifyConfig.Storage);\n    if (!this._config.bucket) {\n      logger.debug('Do not have bucket yet');\n    }\n    return this._config;\n  };\n  AWSS3Provider.prototype.startResumableUpload = function (addTaskInput, config) {\n    var s3Client = addTaskInput.s3Client,\n      emitter = addTaskInput.emitter,\n      key = addTaskInput.key,\n      file = addTaskInput.file,\n      params = addTaskInput.params;\n    var progressCallback = config.progressCallback,\n      completeCallback = config.completeCallback,\n      errorCallback = config.errorCallback,\n      _a = config.track,\n      track = _a === void 0 ? false : _a;\n    if (!(file instanceof Blob)) {\n      throw new Error(StorageErrorStrings.INVALID_BLOB);\n    }\n    emitter.on(TaskEvents.UPLOAD_PROGRESS, function (event) {\n      if (progressCallback) {\n        if (typeof progressCallback === 'function') {\n          progressCallback(event);\n        } else {\n          logger.warn('progressCallback should be a function, not a ' + typeof progressCallback);\n        }\n      }\n    });\n    emitter.on(TaskEvents.UPLOAD_COMPLETE, function (event) {\n      if (completeCallback) {\n        if (typeof completeCallback === 'function') {\n          completeCallback(event);\n        } else {\n          logger.warn('completeCallback should be a function, not a ' + typeof completeCallback);\n        }\n      }\n    });\n    emitter.on(TaskEvents.ERROR, function (err) {\n      if (errorCallback) {\n        if (typeof errorCallback === 'function') {\n          errorCallback(err);\n        } else {\n          logger.warn('errorCallback should be a function, not a ' + typeof errorCallback);\n        }\n      }\n    });\n    // we want to keep this function sync so we defer this promise to AWSS3UploadTask to resolve when it's needed\n    // when its doing a final check with _listSingleFile function\n    var prefixPromise = Credentials.get().then(function (credentials) {\n      var cred = Credentials.shear(credentials);\n      return getPrefix(__assign(__assign({}, config), {\n        credentials: cred\n      }));\n    });\n    var task = new AWSS3UploadTask({\n      s3Client: s3Client,\n      file: file,\n      emitter: emitter,\n      level: config.level,\n      storage: this._storage,\n      params: params,\n      prefixPromise: prefixPromise\n    });\n    dispatchStorageEvent(track, 'upload', {\n      method: 'put',\n      result: 'success'\n    }, null, \"Upload Task created successfully for \" + key);\n    // automatically start the upload task\n    task.resume();\n    return task;\n  };\n  /**\n   * Copy an object from a source object to a new object within the same bucket. Can optionally copy files across\n   * different level or identityId (if source object's level is 'protected').\n   *\n   * @async\n   * @param {S3CopySource} src - Key and optionally access level and identityId of the source object.\n   * @param {S3CopyDestination} dest - Key and optionally access level of the destination object.\n   * @param {S3ProviderCopyConfig} [config] - Optional configuration for s3 commands.\n   * @return {Promise<S3ProviderCopyOutput>} The key of the copied object.\n   */\n  AWSS3Provider.prototype.copy = function (src, dest, config) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, opt, acl, bucket, cacheControl, expires, track, serverSideEncryption, SSECustomerAlgorithm, SSECustomerKey, SSECustomerKeyMD5, SSEKMSKeyId, _a, srcLevel, srcIdentityId, srcKey, _b, destLevel, destKey, srcPrefix, destPrefix, finalSrcKey, finalDestKey, params, s3, error_1;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            return [4 /*yield*/, this._ensureCredentials()];\n          case 1:\n            credentialsOK = _c.sent();\n            if (!credentialsOK || !this._isWithCredentials(this._config)) {\n              throw new Error(StorageErrorStrings.NO_CREDENTIALS);\n            }\n            opt = Object.assign({}, this._config, config);\n            acl = opt.acl, bucket = opt.bucket, cacheControl = opt.cacheControl, expires = opt.expires, track = opt.track, serverSideEncryption = opt.serverSideEncryption, SSECustomerAlgorithm = opt.SSECustomerAlgorithm, SSECustomerKey = opt.SSECustomerKey, SSECustomerKeyMD5 = opt.SSECustomerKeyMD5, SSEKMSKeyId = opt.SSEKMSKeyId;\n            _a = src.level, srcLevel = _a === void 0 ? DEFAULT_STORAGE_LEVEL : _a, srcIdentityId = src.identityId, srcKey = src.key;\n            _b = dest.level, destLevel = _b === void 0 ? DEFAULT_STORAGE_LEVEL : _b, destKey = dest.key;\n            if (!srcKey || typeof srcKey !== 'string') {\n              throw new Error(StorageErrorStrings.NO_SRC_KEY);\n            }\n            if (!destKey || typeof destKey !== 'string') {\n              throw new Error(StorageErrorStrings.NO_DEST_KEY);\n            }\n            if (srcLevel !== 'protected' && srcIdentityId) {\n              logger.warn(\"You may copy files from another user if the source level is \\\"protected\\\", currently it's \" + srcLevel);\n            }\n            srcPrefix = this._prefix(__assign(__assign(__assign({}, opt), {\n              level: srcLevel\n            }), srcIdentityId && {\n              identityId: srcIdentityId\n            }));\n            destPrefix = this._prefix(__assign(__assign({}, opt), {\n              level: destLevel\n            }));\n            finalSrcKey = bucket + \"/\" + srcPrefix + srcKey;\n            finalDestKey = \"\" + destPrefix + destKey;\n            logger.debug(\"copying \" + finalSrcKey + \" to \" + finalDestKey);\n            params = {\n              Bucket: bucket,\n              CopySource: finalSrcKey,\n              Key: finalDestKey,\n              // Copies over metadata like contentType as well\n              MetadataDirective: 'COPY'\n            };\n            if (cacheControl) params.CacheControl = cacheControl;\n            if (expires) params.Expires = expires;\n            if (serverSideEncryption) {\n              params.ServerSideEncryption = serverSideEncryption;\n            }\n            if (SSECustomerAlgorithm) {\n              params.SSECustomerAlgorithm = SSECustomerAlgorithm;\n            }\n            if (SSECustomerKey) {\n              params.SSECustomerKey = SSECustomerKey;\n            }\n            if (SSECustomerKeyMD5) {\n              params.SSECustomerKeyMD5 = SSECustomerKeyMD5;\n            }\n            if (SSEKMSKeyId) {\n              params.SSEKMSKeyId = SSEKMSKeyId;\n            }\n            if (acl) params.ACL = acl;\n            s3 = this._createNewS3Client(opt);\n            _c.label = 2;\n          case 2:\n            _c.trys.push([2, 4,, 5]);\n            return [4 /*yield*/, s3.send(new CopyObjectCommand(params))];\n          case 3:\n            _c.sent();\n            dispatchStorageEvent(track, 'copy', {\n              method: 'copy',\n              result: 'success'\n            }, null, \"Copy success from \" + srcKey + \" to \" + destKey);\n            return [2 /*return*/, {\n              key: destKey\n            }];\n          case 4:\n            error_1 = _c.sent();\n            dispatchStorageEvent(track, 'copy', {\n              method: 'copy',\n              result: 'failed'\n            }, null, \"Copy failed from \" + srcKey + \" to \" + destKey);\n            throw error_1;\n          case 5:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSS3Provider.prototype.get = function (key, config) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, opt, bucket, download, cacheControl, contentDisposition, contentEncoding, contentLanguage, contentType, expires, track, SSECustomerAlgorithm, SSECustomerKey, SSECustomerKeyMD5, progressCallback, prefix, final_key, emitter, s3, params, getObjectCommand, response, error_2, signer, request, url, _a, error_3;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4 /*yield*/, this._ensureCredentials()];\n          case 1:\n            credentialsOK = _b.sent();\n            if (!credentialsOK || !this._isWithCredentials(this._config)) {\n              throw new Error(StorageErrorStrings.NO_CREDENTIALS);\n            }\n            opt = Object.assign({}, this._config, config);\n            bucket = opt.bucket, download = opt.download, cacheControl = opt.cacheControl, contentDisposition = opt.contentDisposition, contentEncoding = opt.contentEncoding, contentLanguage = opt.contentLanguage, contentType = opt.contentType, expires = opt.expires, track = opt.track, SSECustomerAlgorithm = opt.SSECustomerAlgorithm, SSECustomerKey = opt.SSECustomerKey, SSECustomerKeyMD5 = opt.SSECustomerKeyMD5, progressCallback = opt.progressCallback;\n            prefix = this._prefix(opt);\n            final_key = prefix + key;\n            emitter = new events.EventEmitter();\n            s3 = this._createNewS3Client(opt, emitter);\n            logger.debug('get ' + key + ' from ' + final_key);\n            params = {\n              Bucket: bucket,\n              Key: final_key\n            };\n            // See: https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/S3.html#getObject-property\n            if (cacheControl) params.ResponseCacheControl = cacheControl;\n            if (contentDisposition) params.ResponseContentDisposition = contentDisposition;\n            if (contentEncoding) params.ResponseContentEncoding = contentEncoding;\n            if (contentLanguage) params.ResponseContentLanguage = contentLanguage;\n            if (contentType) params.ResponseContentType = contentType;\n            if (SSECustomerAlgorithm) {\n              params.SSECustomerAlgorithm = SSECustomerAlgorithm;\n            }\n            if (SSECustomerKey) {\n              params.SSECustomerKey = SSECustomerKey;\n            }\n            if (SSECustomerKeyMD5) {\n              params.SSECustomerKeyMD5 = SSECustomerKeyMD5;\n            }\n            if (!(download === true)) return [3 /*break*/, 5];\n            getObjectCommand = new GetObjectCommand(params);\n            _b.label = 2;\n          case 2:\n            _b.trys.push([2, 4,, 5]);\n            if (progressCallback) {\n              if (typeof progressCallback === 'function') {\n                emitter.on(SEND_DOWNLOAD_PROGRESS_EVENT, function (progress) {\n                  progressCallback(progress);\n                });\n              } else {\n                logger.warn('progressCallback should be a function, not a ' + typeof progressCallback);\n              }\n            }\n            return [4 /*yield*/, s3.send(getObjectCommand)];\n          case 3:\n            response = _b.sent();\n            emitter.removeAllListeners(SEND_DOWNLOAD_PROGRESS_EVENT);\n            dispatchStorageEvent(track, 'download', {\n              method: 'get',\n              result: 'success'\n            }, {\n              fileSize: Number(response.Body['size'] || response.Body['length'])\n            }, \"Download success for \" + key);\n            return [2 /*return*/, response];\n          case 4:\n            error_2 = _b.sent();\n            dispatchStorageEvent(track, 'download', {\n              method: 'get',\n              result: 'failed'\n            }, null, \"Download failed with \" + error_2.message);\n            throw error_2;\n          case 5:\n            _b.trys.push([5, 8,, 9]);\n            signer = new S3RequestPresigner(__assign({}, s3.config));\n            return [4 /*yield*/, createRequest(s3, new GetObjectCommand(params))];\n          case 6:\n            request = _b.sent();\n            _a = formatUrl;\n            return [4 /*yield*/, signer.presign(request, {\n              expiresIn: expires || DEFAULT_PRESIGN_EXPIRATION\n            })];\n          case 7:\n            url = _a.apply(void 0, [_b.sent()]);\n            dispatchStorageEvent(track, 'getSignedUrl', {\n              method: 'get',\n              result: 'success'\n            }, null, \"Signed URL: \" + url);\n            return [2 /*return*/, url];\n          case 8:\n            error_3 = _b.sent();\n            logger.warn('get signed url error', error_3);\n            dispatchStorageEvent(track, 'getSignedUrl', {\n              method: 'get',\n              result: 'failed'\n            }, null, \"Could not get a signed URL for \" + key);\n            throw error_3;\n          case 9:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Put a file in S3 bucket specified to configure method\n   * @param key - key of the object\n   * @param object - File to be put in Amazon S3 bucket\n   * @param [config] - Optional configuration for the underlying S3 command\n   * @return an instance of AWSS3UploadTask or a promise that resolves to an object with the new object's key on\n   * success.\n   */\n  AWSS3Provider.prototype.put = function (key, object, config) {\n    var opt = Object.assign({}, this._config, config);\n    var bucket = opt.bucket,\n      track = opt.track,\n      progressCallback = opt.progressCallback,\n      level = opt.level,\n      resumable = opt.resumable;\n    var contentType = opt.contentType,\n      contentDisposition = opt.contentDisposition,\n      contentEncoding = opt.contentEncoding,\n      cacheControl = opt.cacheControl,\n      expires = opt.expires,\n      metadata = opt.metadata,\n      tagging = opt.tagging,\n      acl = opt.acl;\n    var serverSideEncryption = opt.serverSideEncryption,\n      SSECustomerAlgorithm = opt.SSECustomerAlgorithm,\n      SSECustomerKey = opt.SSECustomerKey,\n      SSECustomerKeyMD5 = opt.SSECustomerKeyMD5,\n      SSEKMSKeyId = opt.SSEKMSKeyId;\n    var type = contentType ? contentType : 'binary/octet-stream';\n    var params = {\n      Bucket: bucket,\n      Key: key,\n      Body: object,\n      ContentType: type\n    };\n    if (cacheControl) {\n      params.CacheControl = cacheControl;\n    }\n    if (contentDisposition) {\n      params.ContentDisposition = contentDisposition;\n    }\n    if (contentEncoding) {\n      params.ContentEncoding = contentEncoding;\n    }\n    if (expires) {\n      params.Expires = expires;\n    }\n    if (metadata) {\n      params.Metadata = metadata;\n    }\n    if (tagging) {\n      params.Tagging = tagging;\n    }\n    if (serverSideEncryption) {\n      params.ServerSideEncryption = serverSideEncryption;\n    }\n    if (SSECustomerAlgorithm) {\n      params.SSECustomerAlgorithm = SSECustomerAlgorithm;\n    }\n    if (SSECustomerKey) {\n      params.SSECustomerKey = SSECustomerKey;\n    }\n    if (SSECustomerKeyMD5) {\n      params.SSECustomerKeyMD5 = SSECustomerKeyMD5;\n    }\n    if (SSEKMSKeyId) {\n      params.SSEKMSKeyId = SSEKMSKeyId;\n    }\n    var emitter = new events.EventEmitter();\n    var uploader = new AWSS3ProviderManagedUpload(params, opt, emitter);\n    if (acl) {\n      params.ACL = acl;\n    }\n    if (resumable === true) {\n      var s3Client = this._createNewS3Client(opt);\n      // we are using aws sdk middleware to inject the prefix to key, this way we don't have to call\n      // this._ensureCredentials() which allows us to make this function sync so we can return non-Promise like UploadTask\n      s3Client.middlewareStack.add(createPrefixMiddleware(opt, key), prefixMiddlewareOptions);\n      var addTaskInput = {\n        bucket: bucket,\n        key: key,\n        s3Client: s3Client,\n        file: object,\n        emitter: emitter,\n        accessLevel: level,\n        params: params\n      };\n      // explicitly asserting the type here as Typescript could not infer that resumable is of type true\n      return this.startResumableUpload(addTaskInput, config);\n    }\n    try {\n      if (progressCallback) {\n        if (typeof progressCallback === 'function') {\n          emitter.on(SEND_UPLOAD_PROGRESS_EVENT, function (progress) {\n            progressCallback(progress);\n          });\n        } else {\n          logger.warn('progressCallback should be a function, not a ' + typeof progressCallback);\n        }\n      }\n      return uploader.upload().then(function (response) {\n        logger.debug('upload result', response);\n        dispatchStorageEvent(track, 'upload', {\n          method: 'put',\n          result: 'success'\n        }, null, \"Upload success for \" + key);\n        return {\n          key: key\n        };\n      });\n    } catch (error) {\n      logger.warn('error uploading', error);\n      dispatchStorageEvent(track, 'upload', {\n        method: 'put',\n        result: 'failed'\n      }, null, \"Error uploading \" + key);\n      throw error;\n    }\n  };\n  /**\n   * Remove the object for specified key\n   * @param {string} key - key of the object\n   * @param {S3ProviderRemoveConfig} [config] - Optional configuration for the underlying S3 command\n   * @return {Promise<S3ProviderRemoveOutput>} - Promise resolves upon successful removal of the object\n   */\n  AWSS3Provider.prototype.remove = function (key, config) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, opt, bucket, track, prefix, final_key, s3, params, deleteObjectCommand, response, error_4;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this._ensureCredentials()];\n          case 1:\n            credentialsOK = _a.sent();\n            if (!credentialsOK || !this._isWithCredentials(this._config)) {\n              throw new Error(StorageErrorStrings.NO_CREDENTIALS);\n            }\n            opt = Object.assign({}, this._config, config);\n            bucket = opt.bucket, track = opt.track;\n            prefix = this._prefix(opt);\n            final_key = prefix + key;\n            s3 = this._createNewS3Client(opt);\n            logger.debug('remove ' + key + ' from ' + final_key);\n            params = {\n              Bucket: bucket,\n              Key: final_key\n            };\n            deleteObjectCommand = new DeleteObjectCommand(params);\n            _a.label = 2;\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n            return [4 /*yield*/, s3.send(deleteObjectCommand)];\n          case 3:\n            response = _a.sent();\n            dispatchStorageEvent(track, 'delete', {\n              method: 'remove',\n              result: 'success'\n            }, null, \"Deleted \" + key + \" successfully\");\n            return [2 /*return*/, response];\n          case 4:\n            error_4 = _a.sent();\n            dispatchStorageEvent(track, 'delete', {\n              method: 'remove',\n              result: 'failed'\n            }, null, \"Deletion of \" + key + \" failed with \" + error_4);\n            throw error_4;\n          case 5:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSS3Provider.prototype._list = function (params, opt, prefix) {\n    return __awaiter(this, void 0, void 0, function () {\n      var result, s3, listObjectsV2Command, response;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            result = {\n              contents: [],\n              nextToken: ''\n            };\n            s3 = this._createNewS3Client(opt);\n            listObjectsV2Command = new ListObjectsV2Command(__assign({}, params));\n            return [4 /*yield*/, s3.send(listObjectsV2Command)];\n          case 1:\n            response = _a.sent();\n            if (response && response.Contents) {\n              result.contents = response.Contents.map(function (item) {\n                return {\n                  key: item.Key.substr(prefix.length),\n                  eTag: item.ETag,\n                  lastModified: item.LastModified,\n                  size: item.Size\n                };\n              });\n              result.nextToken = response.NextContinuationToken;\n            }\n            return [2 /*return*/, result];\n        }\n      });\n    });\n  };\n  /**\n   * List bucket objects relative to the level and prefix specified\n   * @param {string} path - the path that contains objects\n   * @param {S3ProviderListConfig} [config] - Optional configuration for the underlying S3 command\n   * @return {Promise<S3ProviderListOutput>} - Promise resolves to list of keys, eTags, lastModified and file size for\n   * all objects in path\n   */\n  AWSS3Provider.prototype.list = function (path, config) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, opt, bucket, track, maxKeys, prefix, final_path, list, token, listResult, params, error_5;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this._ensureCredentials()];\n          case 1:\n            credentialsOK = _a.sent();\n            if (!credentialsOK || !this._isWithCredentials(this._config)) {\n              throw new Error(StorageErrorStrings.NO_CREDENTIALS);\n            }\n            opt = Object.assign({}, this._config, config);\n            bucket = opt.bucket, track = opt.track, maxKeys = opt.maxKeys;\n            prefix = this._prefix(opt);\n            final_path = prefix + path;\n            logger.debug('list ' + path + ' from ' + final_path);\n            _a.label = 2;\n          case 2:\n            _a.trys.push([2, 10,, 11]);\n            list = [];\n            token = void 0;\n            listResult = void 0;\n            params = {\n              Bucket: bucket,\n              Prefix: final_path,\n              MaxKeys: 1000\n            };\n            if (!(maxKeys === 'ALL')) return [3 /*break*/, 7];\n            _a.label = 3;\n          case 3:\n            params.ContinuationToken = token;\n            params.MaxKeys = 1000;\n            return [4 /*yield*/, this._list(params, opt, prefix)];\n          case 4:\n            listResult = _a.sent();\n            list.push.apply(list, __spread(listResult.contents));\n            if (listResult.nextToken) token = listResult.nextToken;\n            _a.label = 5;\n          case 5:\n            if (listResult.nextToken) return [3 /*break*/, 3];\n            _a.label = 6;\n          case 6:\n            return [3 /*break*/, 9];\n          case 7:\n            maxKeys < 1000 || typeof maxKeys === 'string' ? params.MaxKeys = maxKeys : params.MaxKeys = 1000;\n            return [4 /*yield*/, this._list(params, opt, prefix)];\n          case 8:\n            listResult = _a.sent();\n            list.push.apply(list, __spread(listResult.contents));\n            if (maxKeys > 1000) logger.warn(\"maxkeys can be from 0 - 1000 or 'ALL'. To list all files you can set maxKeys to 'ALL'.\");\n            _a.label = 9;\n          case 9:\n            dispatchStorageEvent(track, 'list', {\n              method: 'list',\n              result: 'success'\n            }, null, list.length + \" items returned from list operation\");\n            logger.debug('list', list);\n            return [2 /*return*/, list];\n          case 10:\n            error_5 = _a.sent();\n            logger.warn('list error', error_5);\n            dispatchStorageEvent(track, 'list', {\n              method: 'list',\n              result: 'failed'\n            }, null, \"Listing items failed: \" + error_5.message);\n            throw error_5;\n          case 11:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSS3Provider.prototype._ensureCredentials = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, cred, error_6;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n            return [4 /*yield*/, Credentials.get()];\n          case 1:\n            credentials = _a.sent();\n            if (!credentials) return [2 /*return*/, false];\n            cred = Credentials.shear(credentials);\n            logger.debug('set credentials for storage', cred);\n            this._config.credentials = cred;\n            return [2 /*return*/, true];\n          case 2:\n            error_6 = _a.sent();\n            logger.warn('ensure credentials error', error_6);\n            return [2 /*return*/, false];\n          case 3:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSS3Provider.prototype._isWithCredentials = function (config) {\n    return typeof config === 'object' && config.hasOwnProperty('credentials');\n  };\n  AWSS3Provider.prototype._prefix = function (config) {\n    var credentials = config.credentials,\n      level = config.level;\n    var customPrefix = config.customPrefix || {};\n    var identityId = config.identityId || credentials.identityId;\n    var privatePath = (customPrefix.private !== undefined ? customPrefix.private : 'private/') + identityId + '/';\n    var protectedPath = (customPrefix.protected !== undefined ? customPrefix.protected : 'protected/') + identityId + '/';\n    var publicPath = customPrefix.public !== undefined ? customPrefix.public : 'public/';\n    switch (level) {\n      case 'private':\n        return privatePath;\n      case 'protected':\n        return protectedPath;\n      default:\n        return publicPath;\n    }\n  };\n  /**\n   * Creates an S3 client with new V3 aws sdk\n   */\n  AWSS3Provider.prototype._createNewS3Client = function (config, emitter) {\n    var s3client = createS3Client(config, emitter);\n    s3client.middlewareStack.add(autoAdjustClockskewMiddleware(s3client.config), autoAdjustClockskewMiddlewareOptions);\n    return s3client;\n  };\n  AWSS3Provider.CATEGORY = 'Storage';\n  AWSS3Provider.PROVIDER_NAME = 'AWSS3';\n  return AWSS3Provider;\n}();\nexport { AWSS3Provider };\n/**\n * @deprecated use named import\n */\nexport default AWSS3Provider;","map":{"version":3,"mappings":"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","names":["ConsoleLogger","Logger","Credentials","Parser","StorageHelper","Hub","GetObjectCommand","DeleteObjectCommand","ListObjectsV2Command","CopyObjectCommand","formatUrl","createRequest","S3RequestPresigner","SEND_DOWNLOAD_PROGRESS_EVENT","SEND_UPLOAD_PROGRESS_EVENT","StorageErrorStrings","dispatchStorageEvent","createPrefixMiddleware","prefixMiddlewareOptions","getPrefix","autoAdjustClockskewMiddleware","autoAdjustClockskewMiddlewareOptions","createS3Client","AWSS3ProviderManagedUpload","AWSS3UploadTask","TaskEvents","UPLOADS_STORAGE_KEY","events","logger","DEFAULT_STORAGE_LEVEL","DEFAULT_PRESIGN_EXPIRATION","config","_config","_storage","getStorage","listen","payload","event","_this","removeItem","debug","AWSS3Provider","CATEGORY","PROVIDER_NAME","amplifyConfig","parseMobilehubConfig","Object","assign","Storage","bucket","addTaskInput","emitter","key","file","params","completeCallback","errorCallback","_a","track","Blob","Error","INVALID_BLOB","on","UPLOAD_PROGRESS","progressCallback","warn","UPLOAD_COMPLETE","ERROR","err","prefixPromise","get","then","credentials","cred","shear","task","s3Client","level","storage","method","result","resume","src","dest","_ensureCredentials","credentialsOK","_c","_isWithCredentials","NO_CREDENTIALS","opt","acl","cacheControl","expires","serverSideEncryption","SSECustomerAlgorithm","SSECustomerKey","SSECustomerKeyMD5","SSEKMSKeyId","srcLevel","srcIdentityId","srcKey","_b","destLevel","destKey","NO_SRC_KEY","NO_DEST_KEY","srcPrefix","_prefix","identityId","destPrefix","finalSrcKey","finalDestKey","Bucket","CopySource","Key","MetadataDirective","CacheControl","Expires","ServerSideEncryption","ACL","s3","_createNewS3Client","send","error_1","download","contentDisposition","contentEncoding","contentLanguage","contentType","prefix","final_key","EventEmitter","ResponseCacheControl","ResponseContentDisposition","ResponseContentEncoding","ResponseContentLanguage","ResponseContentType","getObjectCommand","progress","response","removeAllListeners","fileSize","Number","Body","error_2","message","signer","request","presign","expiresIn","url","error_3","object","resumable","metadata","tagging","type","ContentType","ContentDisposition","ContentEncoding","Metadata","Tagging","uploader","middlewareStack","add","accessLevel","startResumableUpload","upload","error","deleteObjectCommand","error_4","contents","nextToken","listObjectsV2Command","Contents","map","item","substr","length","eTag","ETag","lastModified","LastModified","size","Size","NextContinuationToken","path","maxKeys","final_path","list","token","listResult","Prefix","MaxKeys","ContinuationToken","_list","push","error_5","error_6","hasOwnProperty","customPrefix","privatePath","private","undefined","protectedPath","protected","publicPath","public","s3client"],"sources":["C:\\Users\\weida\\Desktop\\playground_CC\\node_modules\\@aws-amplify\\storage\\src\\providers\\AWSS3Provider.ts"],"sourcesContent":["/*\n * Copyright 2017-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nimport {\n\tConsoleLogger as Logger,\n\tCredentials,\n\tParser,\n\tICredentials,\n\tStorageHelper,\n\tHub,\n} from '@aws-amplify/core';\nimport {\n\tS3Client,\n\tGetObjectCommand,\n\tDeleteObjectCommand,\n\tListObjectsV2Command,\n\tGetObjectCommandOutput,\n\tDeleteObjectCommandInput,\n\tCopyObjectCommandInput,\n\tCopyObjectCommand,\n\tPutObjectCommandInput,\n\tGetObjectCommandInput,\n\tListObjectsV2Request,\n} from '@aws-sdk/client-s3';\nimport { formatUrl } from '@aws-sdk/util-format-url';\nimport { createRequest } from '@aws-sdk/util-create-request';\nimport { S3RequestPresigner } from '@aws-sdk/s3-request-presigner';\nimport {\n\tSEND_DOWNLOAD_PROGRESS_EVENT,\n\tSEND_UPLOAD_PROGRESS_EVENT,\n} from './axios-http-handler';\nimport {\n\tStorageOptions,\n\tStorageProvider,\n\tS3ProviderGetConfig,\n\tS3ProviderGetOuput,\n\tS3ProviderPutConfig,\n\tS3ProviderRemoveConfig,\n\tS3ProviderListOutput,\n\tS3ProviderListConfig,\n\tS3ProviderCopyConfig,\n\tS3ProviderCopyOutput,\n\tS3CopySource,\n\tS3CopyDestination,\n\tStorageAccessLevel,\n\tCustomPrefix,\n\tS3ProviderRemoveOutput,\n\tS3ProviderPutOutput,\n\tResumableUploadConfig,\n\tUploadTask,\n\tS3ClientOptions,\n} from '../types';\nimport { StorageErrorStrings } from '../common/StorageErrorStrings';\nimport { dispatchStorageEvent } from '../common/StorageUtils';\nimport {\n\tcreatePrefixMiddleware,\n\tprefixMiddlewareOptions,\n\tgetPrefix,\n\tautoAdjustClockskewMiddleware,\n\tautoAdjustClockskewMiddlewareOptions,\n\tcreateS3Client,\n} from '../common/S3ClientUtils';\nimport { S3ProviderListOutputWithToken } from '.././types/AWSS3Provider';\nimport { AWSS3ProviderManagedUpload } from './AWSS3ProviderManagedUpload';\nimport { AWSS3UploadTask, TaskEvents } from './AWSS3UploadTask';\nimport { UPLOADS_STORAGE_KEY } from '../common/StorageConstants';\nimport * as events from 'events';\nimport { CancelTokenSource } from 'axios';\n\nconst logger = new Logger('AWSS3Provider');\n\nconst DEFAULT_STORAGE_LEVEL = 'public';\nconst DEFAULT_PRESIGN_EXPIRATION = 900;\n\ninterface AddTaskInput {\n\taccessLevel: StorageAccessLevel;\n\tfile: Blob;\n\tbucket: string;\n\temitter: events.EventEmitter;\n\tkey: string;\n\ts3Client: S3Client;\n\tparams?: PutObjectCommandInput;\n}\n\n/**\n * Provide storage methods to use AWS S3\n */\nexport class AWSS3Provider implements StorageProvider {\n\tstatic readonly CATEGORY = 'Storage';\n\tstatic readonly PROVIDER_NAME = 'AWSS3';\n\tprivate _config: StorageOptions;\n\tprivate _storage: Storage;\n\n\t/**\n\t * Initialize Storage with AWS configurations\n\t * @param {Object} config - Configuration object for storage\n\t */\n\tconstructor(config?: StorageOptions) {\n\t\tthis._config = config ? config : {};\n\t\tthis._storage = new StorageHelper().getStorage();\n\t\tHub.listen('auth', data => {\n\t\t\tconst { payload } = data;\n\t\t\tif (payload.event === 'signOut' || payload.event === 'signIn') {\n\t\t\t\tthis._storage.removeItem(UPLOADS_STORAGE_KEY);\n\t\t\t}\n\t\t});\n\t\tlogger.debug('Storage Options', this._config);\n\t}\n\n\t/**\n\t * get the category of the plugin\n\t */\n\tpublic getCategory(): string {\n\t\treturn AWSS3Provider.CATEGORY;\n\t}\n\n\t/**\n\t * get provider name of the plugin\n\t */\n\tgetProviderName(): 'AWSS3' {\n\t\treturn AWSS3Provider.PROVIDER_NAME;\n\t}\n\n\t/**\n\t * Configure Storage part with aws configuration\n\t * @param {Object} config - Configuration of the Storage\n\t * @return {Object} - Current configuration\n\t */\n\tpublic configure(config?): object {\n\t\tlogger.debug('configure Storage', config);\n\t\tif (!config) return this._config;\n\t\tconst amplifyConfig = Parser.parseMobilehubConfig(config);\n\t\tthis._config = Object.assign({}, this._config, amplifyConfig.Storage);\n\t\tif (!this._config.bucket) {\n\t\t\tlogger.debug('Do not have bucket yet');\n\t\t}\n\t\treturn this._config;\n\t}\n\n\tprivate startResumableUpload(\n\t\taddTaskInput: AddTaskInput,\n\t\tconfig: S3ProviderPutConfig & ResumableUploadConfig\n\t): UploadTask {\n\t\tconst { s3Client, emitter, key, file, params } = addTaskInput;\n\t\tconst {\n\t\t\tprogressCallback,\n\t\t\tcompleteCallback,\n\t\t\terrorCallback,\n\t\t\ttrack = false,\n\t\t} = config;\n\t\tif (!(file instanceof Blob)) {\n\t\t\tthrow new Error(StorageErrorStrings.INVALID_BLOB);\n\t\t}\n\n\t\temitter.on(TaskEvents.UPLOAD_PROGRESS, event => {\n\t\t\tif (progressCallback) {\n\t\t\t\tif (typeof progressCallback === 'function') {\n\t\t\t\t\tprogressCallback(event);\n\t\t\t\t} else {\n\t\t\t\t\tlogger.warn(\n\t\t\t\t\t\t'progressCallback should be a function, not a ' +\n\t\t\t\t\t\t\ttypeof progressCallback\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\temitter.on(TaskEvents.UPLOAD_COMPLETE, event => {\n\t\t\tif (completeCallback) {\n\t\t\t\tif (typeof completeCallback === 'function') {\n\t\t\t\t\tcompleteCallback(event);\n\t\t\t\t} else {\n\t\t\t\t\tlogger.warn(\n\t\t\t\t\t\t'completeCallback should be a function, not a ' +\n\t\t\t\t\t\t\ttypeof completeCallback\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\temitter.on(TaskEvents.ERROR, err => {\n\t\t\tif (errorCallback) {\n\t\t\t\tif (typeof errorCallback === 'function') {\n\t\t\t\t\terrorCallback(err);\n\t\t\t\t} else {\n\t\t\t\t\tlogger.warn(\n\t\t\t\t\t\t'errorCallback should be a function, not a ' + typeof errorCallback\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t// we want to keep this function sync so we defer this promise to AWSS3UploadTask to resolve when it's needed\n\t\t// when its doing a final check with _listSingleFile function\n\t\tconst prefixPromise: Promise<string> = Credentials.get().then(\n\t\t\t(credentials: any) => {\n\t\t\t\tconst cred = Credentials.shear(credentials);\n\t\t\t\treturn getPrefix({\n\t\t\t\t\t...config,\n\t\t\t\t\tcredentials: cred,\n\t\t\t\t});\n\t\t\t}\n\t\t);\n\n\t\tconst task = new AWSS3UploadTask({\n\t\t\ts3Client,\n\t\t\tfile,\n\t\t\temitter,\n\t\t\tlevel: config.level,\n\t\t\tstorage: this._storage,\n\t\t\tparams,\n\t\t\tprefixPromise,\n\t\t});\n\n\t\tdispatchStorageEvent(\n\t\t\ttrack,\n\t\t\t'upload',\n\t\t\t{ method: 'put', result: 'success' },\n\t\t\tnull,\n\t\t\t`Upload Task created successfully for ${key}`\n\t\t);\n\n\t\t// automatically start the upload task\n\t\ttask.resume();\n\n\t\treturn task;\n\t}\n\n\t/**\n\t * Copy an object from a source object to a new object within the same bucket. Can optionally copy files across\n\t * different level or identityId (if source object's level is 'protected').\n\t *\n\t * @async\n\t * @param {S3CopySource} src - Key and optionally access level and identityId of the source object.\n\t * @param {S3CopyDestination} dest - Key and optionally access level of the destination object.\n\t * @param {S3ProviderCopyConfig} [config] - Optional configuration for s3 commands.\n\t * @return {Promise<S3ProviderCopyOutput>} The key of the copied object.\n\t */\n\tpublic async copy(\n\t\tsrc: S3CopySource,\n\t\tdest: S3CopyDestination,\n\t\tconfig?: S3ProviderCopyConfig\n\t): Promise<S3ProviderCopyOutput> {\n\t\tconst credentialsOK = await this._ensureCredentials();\n\t\tif (!credentialsOK || !this._isWithCredentials(this._config)) {\n\t\t\tthrow new Error(StorageErrorStrings.NO_CREDENTIALS);\n\t\t}\n\t\tconst opt = Object.assign({}, this._config, config);\n\t\tconst {\n\t\t\tacl,\n\t\t\tbucket,\n\t\t\tcacheControl,\n\t\t\texpires,\n\t\t\ttrack,\n\t\t\tserverSideEncryption,\n\t\t\tSSECustomerAlgorithm,\n\t\t\tSSECustomerKey,\n\t\t\tSSECustomerKeyMD5,\n\t\t\tSSEKMSKeyId,\n\t\t} = opt;\n\t\tconst {\n\t\t\tlevel: srcLevel = DEFAULT_STORAGE_LEVEL,\n\t\t\tidentityId: srcIdentityId,\n\t\t\tkey: srcKey,\n\t\t} = src;\n\t\tconst { level: destLevel = DEFAULT_STORAGE_LEVEL, key: destKey } = dest;\n\t\tif (!srcKey || typeof srcKey !== 'string') {\n\t\t\tthrow new Error(StorageErrorStrings.NO_SRC_KEY);\n\t\t}\n\t\tif (!destKey || typeof destKey !== 'string') {\n\t\t\tthrow new Error(StorageErrorStrings.NO_DEST_KEY);\n\t\t}\n\t\tif (srcLevel !== 'protected' && srcIdentityId) {\n\t\t\tlogger.warn(\n\t\t\t\t`You may copy files from another user if the source level is \"protected\", currently it's ${srcLevel}`\n\t\t\t);\n\t\t}\n\t\tconst srcPrefix = this._prefix({\n\t\t\t...opt,\n\t\t\tlevel: srcLevel,\n\t\t\t...(srcIdentityId && { identityId: srcIdentityId }),\n\t\t});\n\t\tconst destPrefix = this._prefix({ ...opt, level: destLevel });\n\t\tconst finalSrcKey = `${bucket}/${srcPrefix}${srcKey}`;\n\t\tconst finalDestKey = `${destPrefix}${destKey}`;\n\t\tlogger.debug(`copying ${finalSrcKey} to ${finalDestKey}`);\n\n\t\tconst params: CopyObjectCommandInput = {\n\t\t\tBucket: bucket,\n\t\t\tCopySource: finalSrcKey,\n\t\t\tKey: finalDestKey,\n\t\t\t// Copies over metadata like contentType as well\n\t\t\tMetadataDirective: 'COPY',\n\t\t};\n\n\t\tif (cacheControl) params.CacheControl = cacheControl;\n\t\tif (expires) params.Expires = expires;\n\t\tif (serverSideEncryption) {\n\t\t\tparams.ServerSideEncryption = serverSideEncryption;\n\t\t}\n\t\tif (SSECustomerAlgorithm) {\n\t\t\tparams.SSECustomerAlgorithm = SSECustomerAlgorithm;\n\t\t}\n\t\tif (SSECustomerKey) {\n\t\t\tparams.SSECustomerKey = SSECustomerKey;\n\t\t}\n\t\tif (SSECustomerKeyMD5) {\n\t\t\tparams.SSECustomerKeyMD5 = SSECustomerKeyMD5;\n\t\t}\n\t\tif (SSEKMSKeyId) {\n\t\t\tparams.SSEKMSKeyId = SSEKMSKeyId;\n\t\t}\n\t\tif (acl) params.ACL = acl;\n\n\t\tconst s3 = this._createNewS3Client(opt);\n\t\ttry {\n\t\t\tawait s3.send(new CopyObjectCommand(params));\n\t\t\tdispatchStorageEvent(\n\t\t\t\ttrack,\n\t\t\t\t'copy',\n\t\t\t\t{\n\t\t\t\t\tmethod: 'copy',\n\t\t\t\t\tresult: 'success',\n\t\t\t\t},\n\t\t\t\tnull,\n\t\t\t\t`Copy success from ${srcKey} to ${destKey}`\n\t\t\t);\n\t\t\treturn {\n\t\t\t\tkey: destKey,\n\t\t\t};\n\t\t} catch (error) {\n\t\t\tdispatchStorageEvent(\n\t\t\t\ttrack,\n\t\t\t\t'copy',\n\t\t\t\t{\n\t\t\t\t\tmethod: 'copy',\n\t\t\t\t\tresult: 'failed',\n\t\t\t\t},\n\t\t\t\tnull,\n\t\t\t\t`Copy failed from ${srcKey} to ${destKey}`\n\t\t\t);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t/**\n\t * Get a presigned URL of the file or the object data when download:true\n\t *\n\t * @param {string} key - key of the object\n\t * @param {S3ProviderGetConfig} [config] - Optional configuration for the underlying S3 command\n\t * @return {Promise<string | GetObjectCommandOutput>} - A promise resolves to Amazon S3 presigned URL or the\n\t * GetObjectCommandOutput if download is set to true on success\n\t */\n\tpublic async get<T extends S3ProviderGetConfig & StorageOptions>(\n\t\tkey: string,\n\t\tconfig?: T\n\t): Promise<S3ProviderGetOuput<T>>;\n\tpublic async get(\n\t\tkey: string,\n\t\tconfig?: S3ProviderGetConfig\n\t): Promise<string | GetObjectCommandOutput> {\n\t\tconst credentialsOK = await this._ensureCredentials();\n\t\tif (!credentialsOK || !this._isWithCredentials(this._config)) {\n\t\t\tthrow new Error(StorageErrorStrings.NO_CREDENTIALS);\n\t\t}\n\t\tconst opt = Object.assign({}, this._config, config);\n\t\tconst {\n\t\t\tbucket,\n\t\t\tdownload,\n\t\t\tcacheControl,\n\t\t\tcontentDisposition,\n\t\t\tcontentEncoding,\n\t\t\tcontentLanguage,\n\t\t\tcontentType,\n\t\t\texpires,\n\t\t\ttrack,\n\t\t\tSSECustomerAlgorithm,\n\t\t\tSSECustomerKey,\n\t\t\tSSECustomerKeyMD5,\n\t\t\tprogressCallback,\n\t\t} = opt;\n\t\tconst prefix = this._prefix(opt);\n\t\tconst final_key = prefix + key;\n\t\tconst emitter = new events.EventEmitter();\n\t\tconst s3 = this._createNewS3Client(opt, emitter);\n\t\tlogger.debug('get ' + key + ' from ' + final_key);\n\n\t\tconst params: GetObjectCommandInput = {\n\t\t\tBucket: bucket,\n\t\t\tKey: final_key,\n\t\t};\n\n\t\t// See: https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/S3.html#getObject-property\n\t\tif (cacheControl) params.ResponseCacheControl = cacheControl;\n\t\tif (contentDisposition)\n\t\t\tparams.ResponseContentDisposition = contentDisposition;\n\t\tif (contentEncoding) params.ResponseContentEncoding = contentEncoding;\n\t\tif (contentLanguage) params.ResponseContentLanguage = contentLanguage;\n\t\tif (contentType) params.ResponseContentType = contentType;\n\t\tif (SSECustomerAlgorithm) {\n\t\t\tparams.SSECustomerAlgorithm = SSECustomerAlgorithm;\n\t\t}\n\t\tif (SSECustomerKey) {\n\t\t\tparams.SSECustomerKey = SSECustomerKey;\n\t\t}\n\t\tif (SSECustomerKeyMD5) {\n\t\t\tparams.SSECustomerKeyMD5 = SSECustomerKeyMD5;\n\t\t}\n\n\t\tif (download === true) {\n\t\t\tconst getObjectCommand = new GetObjectCommand(params);\n\t\t\ttry {\n\t\t\t\tif (progressCallback) {\n\t\t\t\t\tif (typeof progressCallback === 'function') {\n\t\t\t\t\t\temitter.on(SEND_DOWNLOAD_PROGRESS_EVENT, progress => {\n\t\t\t\t\t\t\tprogressCallback(progress);\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlogger.warn(\n\t\t\t\t\t\t\t'progressCallback should be a function, not a ' +\n\t\t\t\t\t\t\t\ttypeof progressCallback\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconst response = await s3.send(getObjectCommand);\n\t\t\t\temitter.removeAllListeners(SEND_DOWNLOAD_PROGRESS_EVENT);\n\t\t\t\tdispatchStorageEvent(\n\t\t\t\t\ttrack,\n\t\t\t\t\t'download',\n\t\t\t\t\t{ method: 'get', result: 'success' },\n\t\t\t\t\t{\n\t\t\t\t\t\tfileSize: Number(response.Body['size'] || response.Body['length']),\n\t\t\t\t\t},\n\t\t\t\t\t`Download success for ${key}`\n\t\t\t\t);\n\t\t\t\treturn response;\n\t\t\t} catch (error) {\n\t\t\t\tdispatchStorageEvent(\n\t\t\t\t\ttrack,\n\t\t\t\t\t'download',\n\t\t\t\t\t{\n\t\t\t\t\t\tmethod: 'get',\n\t\t\t\t\t\tresult: 'failed',\n\t\t\t\t\t},\n\t\t\t\t\tnull,\n\t\t\t\t\t`Download failed with ${error.message}`\n\t\t\t\t);\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tconst signer = new S3RequestPresigner({ ...s3.config });\n\t\t\tconst request = await createRequest(s3, new GetObjectCommand(params));\n\t\t\t// Default is 15 mins as defined in V2 AWS SDK\n\t\t\tconst url = formatUrl(\n\t\t\t\tawait signer.presign(request, {\n\t\t\t\t\texpiresIn: expires || DEFAULT_PRESIGN_EXPIRATION,\n\t\t\t\t})\n\t\t\t);\n\t\t\tdispatchStorageEvent(\n\t\t\t\ttrack,\n\t\t\t\t'getSignedUrl',\n\t\t\t\t{ method: 'get', result: 'success' },\n\t\t\t\tnull,\n\t\t\t\t`Signed URL: ${url}`\n\t\t\t);\n\t\t\treturn url;\n\t\t} catch (error) {\n\t\t\tlogger.warn('get signed url error', error);\n\t\t\tdispatchStorageEvent(\n\t\t\t\ttrack,\n\t\t\t\t'getSignedUrl',\n\t\t\t\t{ method: 'get', result: 'failed' },\n\t\t\t\tnull,\n\t\t\t\t`Could not get a signed URL for ${key}`\n\t\t\t);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t/**\n\t * Put a file in S3 bucket specified to configure method\n\t * @param key - key of the object\n\t * @param object - File to be put in Amazon S3 bucket\n\t * @param [config] - Optional configuration for the underlying S3 command\n\t * @return an instance of AWSS3UploadTask or a promise that resolves to an object with the new object's key on\n\t * success.\n\t */\n\tpublic put<T extends S3ProviderPutConfig>(\n\t\tkey: string,\n\t\tobject: PutObjectCommandInput['Body'],\n\t\tconfig?: T\n\t): S3ProviderPutOutput<T> {\n\t\tconst opt = Object.assign({}, this._config, config);\n\t\tconst { bucket, track, progressCallback, level, resumable } = opt;\n\t\tconst {\n\t\t\tcontentType,\n\t\t\tcontentDisposition,\n\t\t\tcontentEncoding,\n\t\t\tcacheControl,\n\t\t\texpires,\n\t\t\tmetadata,\n\t\t\ttagging,\n\t\t\tacl,\n\t\t} = opt;\n\t\tconst {\n\t\t\tserverSideEncryption,\n\t\t\tSSECustomerAlgorithm,\n\t\t\tSSECustomerKey,\n\t\t\tSSECustomerKeyMD5,\n\t\t\tSSEKMSKeyId,\n\t\t} = opt;\n\t\tconst type = contentType ? contentType : 'binary/octet-stream';\n\n\t\tconst params: PutObjectCommandInput = {\n\t\t\tBucket: bucket,\n\t\t\tKey: key,\n\t\t\tBody: object,\n\t\t\tContentType: type,\n\t\t};\n\t\tif (cacheControl) {\n\t\t\tparams.CacheControl = cacheControl;\n\t\t}\n\t\tif (contentDisposition) {\n\t\t\tparams.ContentDisposition = contentDisposition;\n\t\t}\n\t\tif (contentEncoding) {\n\t\t\tparams.ContentEncoding = contentEncoding;\n\t\t}\n\t\tif (expires) {\n\t\t\tparams.Expires = expires;\n\t\t}\n\t\tif (metadata) {\n\t\t\tparams.Metadata = metadata;\n\t\t}\n\t\tif (tagging) {\n\t\t\tparams.Tagging = tagging;\n\t\t}\n\t\tif (serverSideEncryption) {\n\t\t\tparams.ServerSideEncryption = serverSideEncryption;\n\t\t}\n\t\tif (SSECustomerAlgorithm) {\n\t\t\tparams.SSECustomerAlgorithm = SSECustomerAlgorithm;\n\t\t}\n\t\tif (SSECustomerKey) {\n\t\t\tparams.SSECustomerKey = SSECustomerKey;\n\t\t}\n\t\tif (SSECustomerKeyMD5) {\n\t\t\tparams.SSECustomerKeyMD5 = SSECustomerKeyMD5;\n\t\t}\n\t\tif (SSEKMSKeyId) {\n\t\t\tparams.SSEKMSKeyId = SSEKMSKeyId;\n\t\t}\n\n\t\tconst emitter = new events.EventEmitter();\n\t\tconst uploader = new AWSS3ProviderManagedUpload(params, opt, emitter);\n\n\t\tif (acl) {\n\t\t\tparams.ACL = acl;\n\t\t}\n\n\t\tif (resumable === true) {\n\t\t\tconst s3Client = this._createNewS3Client(opt);\n\t\t\t// we are using aws sdk middleware to inject the prefix to key, this way we don't have to call\n\t\t\t// this._ensureCredentials() which allows us to make this function sync so we can return non-Promise like UploadTask\n\t\t\ts3Client.middlewareStack.add(\n\t\t\t\tcreatePrefixMiddleware(opt, key),\n\t\t\t\tprefixMiddlewareOptions\n\t\t\t);\n\t\t\tconst addTaskInput: AddTaskInput = {\n\t\t\t\tbucket,\n\t\t\t\tkey,\n\t\t\t\ts3Client,\n\t\t\t\tfile: object as Blob,\n\t\t\t\temitter,\n\t\t\t\taccessLevel: level,\n\t\t\t\tparams,\n\t\t\t};\n\t\t\t// explicitly asserting the type here as Typescript could not infer that resumable is of type true\n\t\t\treturn this.startResumableUpload(\n\t\t\t\taddTaskInput,\n\t\t\t\tconfig as typeof config & { resumable: true }\n\t\t\t) as S3ProviderPutOutput<T>;\n\t\t}\n\n\t\ttry {\n\t\t\tif (progressCallback) {\n\t\t\t\tif (typeof progressCallback === 'function') {\n\t\t\t\t\temitter.on(SEND_UPLOAD_PROGRESS_EVENT, progress => {\n\t\t\t\t\t\tprogressCallback(progress);\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tlogger.warn(\n\t\t\t\t\t\t'progressCallback should be a function, not a ' +\n\t\t\t\t\t\t\ttypeof progressCallback\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn uploader.upload().then(response => {\n\t\t\t\tlogger.debug('upload result', response);\n\t\t\t\tdispatchStorageEvent(\n\t\t\t\t\ttrack,\n\t\t\t\t\t'upload',\n\t\t\t\t\t{ method: 'put', result: 'success' },\n\t\t\t\t\tnull,\n\t\t\t\t\t`Upload success for ${key}`\n\t\t\t\t);\n\t\t\t\treturn { key };\n\t\t\t}) as S3ProviderPutOutput<T>;\n\t\t} catch (error) {\n\t\t\tlogger.warn('error uploading', error);\n\t\t\tdispatchStorageEvent(\n\t\t\t\ttrack,\n\t\t\t\t'upload',\n\t\t\t\t{ method: 'put', result: 'failed' },\n\t\t\t\tnull,\n\t\t\t\t`Error uploading ${key}`\n\t\t\t);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t/**\n\t * Remove the object for specified key\n\t * @param {string} key - key of the object\n\t * @param {S3ProviderRemoveConfig} [config] - Optional configuration for the underlying S3 command\n\t * @return {Promise<S3ProviderRemoveOutput>} - Promise resolves upon successful removal of the object\n\t */\n\tpublic async remove(\n\t\tkey: string,\n\t\tconfig?: S3ProviderRemoveConfig\n\t): Promise<S3ProviderRemoveOutput> {\n\t\tconst credentialsOK = await this._ensureCredentials();\n\t\tif (!credentialsOK || !this._isWithCredentials(this._config)) {\n\t\t\tthrow new Error(StorageErrorStrings.NO_CREDENTIALS);\n\t\t}\n\t\tconst opt = Object.assign({}, this._config, config);\n\t\tconst { bucket, track } = opt;\n\n\t\tconst prefix = this._prefix(opt);\n\t\tconst final_key = prefix + key;\n\t\tconst s3 = this._createNewS3Client(opt);\n\t\tlogger.debug('remove ' + key + ' from ' + final_key);\n\n\t\tconst params: DeleteObjectCommandInput = {\n\t\t\tBucket: bucket,\n\t\t\tKey: final_key,\n\t\t};\n\n\t\tconst deleteObjectCommand = new DeleteObjectCommand(params);\n\n\t\ttry {\n\t\t\tconst response = await s3.send(deleteObjectCommand);\n\t\t\tdispatchStorageEvent(\n\t\t\t\ttrack,\n\t\t\t\t'delete',\n\t\t\t\t{ method: 'remove', result: 'success' },\n\t\t\t\tnull,\n\t\t\t\t`Deleted ${key} successfully`\n\t\t\t);\n\t\t\treturn response;\n\t\t} catch (error) {\n\t\t\tdispatchStorageEvent(\n\t\t\t\ttrack,\n\t\t\t\t'delete',\n\t\t\t\t{ method: 'remove', result: 'failed' },\n\t\t\t\tnull,\n\t\t\t\t`Deletion of ${key} failed with ${error}`\n\t\t\t);\n\t\t\tthrow error;\n\t\t}\n\t}\n\tprivate async _list(\n\t\tparams: ListObjectsV2Request,\n\t\topt: S3ClientOptions,\n\t\tprefix: string\n\t): Promise<S3ProviderListOutputWithToken> {\n\t\tconst result: S3ProviderListOutputWithToken = {\n\t\t\tcontents: [],\n\t\t\tnextToken: '',\n\t\t};\n\t\tconst s3 = this._createNewS3Client(opt);\n\t\tconst listObjectsV2Command = new ListObjectsV2Command({ ...params });\n\t\tconst response = await s3.send(listObjectsV2Command);\n\t\tif (response && response.Contents) {\n\t\t\tresult.contents = response.Contents.map(item => {\n\t\t\t\treturn {\n\t\t\t\t\tkey: item.Key.substr(prefix.length),\n\t\t\t\t\teTag: item.ETag,\n\t\t\t\t\tlastModified: item.LastModified,\n\t\t\t\t\tsize: item.Size,\n\t\t\t\t};\n\t\t\t});\n\t\t\tresult.nextToken = response.NextContinuationToken;\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * List bucket objects relative to the level and prefix specified\n\t * @param {string} path - the path that contains objects\n\t * @param {S3ProviderListConfig} [config] - Optional configuration for the underlying S3 command\n\t * @return {Promise<S3ProviderListOutput>} - Promise resolves to list of keys, eTags, lastModified and file size for\n\t * all objects in path\n\t */\n\tpublic async list(\n\t\tpath: string,\n\t\tconfig?: S3ProviderListConfig\n\t): Promise<S3ProviderListOutput> {\n\t\tconst credentialsOK = await this._ensureCredentials();\n\t\tif (!credentialsOK || !this._isWithCredentials(this._config)) {\n\t\t\tthrow new Error(StorageErrorStrings.NO_CREDENTIALS);\n\t\t}\n\t\tconst opt: S3ClientOptions = Object.assign({}, this._config, config);\n\t\tconst { bucket, track, maxKeys } = opt;\n\t\tconst prefix = this._prefix(opt);\n\t\tconst final_path = prefix + path;\n\t\tlogger.debug('list ' + path + ' from ' + final_path);\n\t\ttry {\n\t\t\tconst list: S3ProviderListOutput = [];\n\t\t\tlet token: string;\n\t\t\tlet listResult: S3ProviderListOutputWithToken;\n\t\t\tconst params: ListObjectsV2Request = {\n\t\t\t\tBucket: bucket,\n\t\t\t\tPrefix: final_path,\n\t\t\t\tMaxKeys: 1000,\n\t\t\t};\n\t\t\tif (maxKeys === 'ALL') {\n\t\t\t\tdo {\n\t\t\t\t\tparams.ContinuationToken = token;\n\t\t\t\t\tparams.MaxKeys = 1000;\n\t\t\t\t\tlistResult = await this._list(params, opt, prefix);\n\t\t\t\t\tlist.push(...listResult.contents);\n\t\t\t\t\tif (listResult.nextToken) token = listResult.nextToken;\n\t\t\t\t} while (listResult.nextToken);\n\t\t\t} else {\n\t\t\t\tmaxKeys < 1000 || typeof maxKeys === 'string'\n\t\t\t\t\t? (params.MaxKeys = maxKeys)\n\t\t\t\t\t: (params.MaxKeys = 1000);\n\t\t\t\tlistResult = await this._list(params, opt, prefix);\n\t\t\t\tlist.push(...listResult.contents);\n\t\t\t\tif (maxKeys > 1000)\n\t\t\t\t\tlogger.warn(\n\t\t\t\t\t\t\"maxkeys can be from 0 - 1000 or 'ALL'. To list all files you can set maxKeys to 'ALL'.\"\n\t\t\t\t\t);\n\t\t\t}\n\t\t\tdispatchStorageEvent(\n\t\t\t\ttrack,\n\t\t\t\t'list',\n\t\t\t\t{ method: 'list', result: 'success' },\n\t\t\t\tnull,\n\t\t\t\t`${list.length} items returned from list operation`\n\t\t\t);\n\t\t\tlogger.debug('list', list);\n\t\t\treturn list;\n\t\t} catch (error) {\n\t\t\tlogger.warn('list error', error);\n\t\t\tdispatchStorageEvent(\n\t\t\t\ttrack,\n\t\t\t\t'list',\n\t\t\t\t{ method: 'list', result: 'failed' },\n\t\t\t\tnull,\n\t\t\t\t`Listing items failed: ${error.message}`\n\t\t\t);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tprivate async _ensureCredentials(): Promise<boolean> {\n\t\ttry {\n\t\t\tconst credentials = await Credentials.get();\n\t\t\tif (!credentials) return false;\n\t\t\tconst cred = Credentials.shear(credentials);\n\t\t\tlogger.debug('set credentials for storage', cred);\n\t\t\tthis._config.credentials = cred;\n\n\t\t\treturn true;\n\t\t} catch (error) {\n\t\t\tlogger.warn('ensure credentials error', error);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tprivate _isWithCredentials(\n\t\tconfig: StorageOptions\n\t): config is StorageOptions & { credentials: ICredentials } {\n\t\treturn typeof config === 'object' && config.hasOwnProperty('credentials');\n\t}\n\n\tprivate _prefix(config: {\n\t\tcredentials: ICredentials;\n\t\tlevel?: StorageAccessLevel;\n\t\tcustomPrefix?: CustomPrefix;\n\t\tidentityId?: string;\n\t}): string {\n\t\tconst { credentials, level } = config;\n\n\t\tconst customPrefix = config.customPrefix || {};\n\t\tconst identityId = config.identityId || credentials.identityId;\n\t\tconst privatePath =\n\t\t\t(customPrefix.private !== undefined ? customPrefix.private : 'private/') +\n\t\t\tidentityId +\n\t\t\t'/';\n\t\tconst protectedPath =\n\t\t\t(customPrefix.protected !== undefined\n\t\t\t\t? customPrefix.protected\n\t\t\t\t: 'protected/') +\n\t\t\tidentityId +\n\t\t\t'/';\n\t\tconst publicPath =\n\t\t\tcustomPrefix.public !== undefined ? customPrefix.public : 'public/';\n\n\t\tswitch (level) {\n\t\t\tcase 'private':\n\t\t\t\treturn privatePath;\n\t\t\tcase 'protected':\n\t\t\t\treturn protectedPath;\n\t\t\tdefault:\n\t\t\t\treturn publicPath;\n\t\t}\n\t}\n\n\t/**\n\t * Creates an S3 client with new V3 aws sdk\n\t */\n\tprivate _createNewS3Client(\n\t\tconfig: {\n\t\t\tregion?: string;\n\t\t\tcancelTokenSource?: CancelTokenSource;\n\t\t\tdangerouslyConnectToHttpEndpointForTesting?: boolean;\n\t\t\tuseAccelerateEndpoint?: boolean;\n\t\t},\n\t\temitter?: events.EventEmitter\n\t): S3Client {\n\t\tconst s3client = createS3Client(config, emitter);\n\t\ts3client.middlewareStack.add(\n\t\t\tautoAdjustClockskewMiddleware(s3client.config),\n\t\t\tautoAdjustClockskewMiddlewareOptions\n\t\t);\n\t\treturn s3client;\n\t}\n}\n\n/**\n * @deprecated use named import\n */\nexport default AWSS3Provider;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}