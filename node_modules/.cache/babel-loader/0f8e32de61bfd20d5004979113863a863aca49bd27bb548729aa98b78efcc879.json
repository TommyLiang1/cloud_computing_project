{"ast":null,"code":"import { __rest } from \"tslib\";\nimport React, { useCallback, useMemo } from 'react';\nimport { useSelector } from '@xstate/react';\nimport { getServiceFacade } from '@aws-amplify/ui';\nimport { AuthenticatorContext } from '../../context';\nimport { USE_AUTHENTICATOR_ERROR } from './constants';\nimport { defaultComparator, getComparator, getLegacyFields, getTotpSecretCodeCallback } from './utils';\n/**\n * [ðŸ“– Docs](https://ui.docs.amplify.aws/react/connected-components/authenticator/headless#useauthenticator-hook)\n */\nexport default function useAuthenticator(selector) {\n  const context = React.useContext(AuthenticatorContext);\n  if (!context) {\n    throw new Error(USE_AUTHENTICATOR_ERROR);\n  }\n  const {\n    service\n  } = context;\n  const {\n    send\n  } = service;\n  const xstateSelector = useCallback(state => Object.assign({}, getServiceFacade({\n    send,\n    state\n  })), [send]);\n  const comparator = selector ? getComparator(selector) : defaultComparator;\n  const facade = useSelector(service, xstateSelector, comparator);\n  const {\n      route,\n      user\n    } = facade,\n    rest = __rest(facade, [\"route\", \"user\"]);\n  // do not memoize output. `service.getSnapshot` reference remains stable preventing\n  // `fields` from updating with current form state on value changes\n  const serviceSnapshot = service.getSnapshot();\n  // legacy `formFields` values required until form state is removed from state machine\n  const fields = useMemo(() => getLegacyFields(route, serviceSnapshot), [route, serviceSnapshot]);\n  return Object.assign(Object.assign({}, rest), {\n    getTotpSecretCode: getTotpSecretCodeCallback(user),\n    route,\n    user,\n    /** @deprecated For internal use only */\n    fields,\n    /** @deprecated For internal use only */\n    _state: serviceSnapshot,\n    /** @deprecated For internal use only */\n    _send: send\n  });\n}","map":{"version":3,"names":["__rest","React","useCallback","useMemo","useSelector","getServiceFacade","AuthenticatorContext","USE_AUTHENTICATOR_ERROR","defaultComparator","getComparator","getLegacyFields","getTotpSecretCodeCallback","useAuthenticator","selector","context","useContext","Error","service","send","xstateSelector","state","Object","assign","comparator","facade","route","user","rest","serviceSnapshot","getSnapshot","fields","getTotpSecretCode","_state","_send"],"sources":["C:/Users/weida/Desktop/playground_CC/node_modules/@aws-amplify/ui-react-core/dist/esm/Authenticator/hooks/useAuthenticator/useAuthenticator.js"],"sourcesContent":["import { __rest } from \"tslib\";\nimport React, { useCallback, useMemo } from 'react';\nimport { useSelector } from '@xstate/react';\nimport { getServiceFacade } from '@aws-amplify/ui';\nimport { AuthenticatorContext } from '../../context';\nimport { USE_AUTHENTICATOR_ERROR } from './constants';\nimport { defaultComparator, getComparator, getLegacyFields, getTotpSecretCodeCallback, } from './utils';\n/**\n * [ðŸ“– Docs](https://ui.docs.amplify.aws/react/connected-components/authenticator/headless#useauthenticator-hook)\n */\nexport default function useAuthenticator(selector) {\n    const context = React.useContext(AuthenticatorContext);\n    if (!context) {\n        throw new Error(USE_AUTHENTICATOR_ERROR);\n    }\n    const { service } = context;\n    const { send } = service;\n    const xstateSelector = useCallback((state) => (Object.assign({}, getServiceFacade({ send, state }))), [send]);\n    const comparator = selector ? getComparator(selector) : defaultComparator;\n    const facade = useSelector(service, xstateSelector, comparator);\n    const { route, user } = facade, rest = __rest(facade, [\"route\", \"user\"]);\n    // do not memoize output. `service.getSnapshot` reference remains stable preventing\n    // `fields` from updating with current form state on value changes\n    const serviceSnapshot = service.getSnapshot();\n    // legacy `formFields` values required until form state is removed from state machine\n    const fields = useMemo(() => getLegacyFields(route, serviceSnapshot), [route, serviceSnapshot]);\n    return Object.assign(Object.assign({}, rest), { getTotpSecretCode: getTotpSecretCodeCallback(user), route,\n        user,\n        /** @deprecated For internal use only */\n        fields, \n        /** @deprecated For internal use only */\n        _state: serviceSnapshot, \n        /** @deprecated For internal use only */\n        _send: send });\n}\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,OAAO;AAC9B,OAAOC,KAAK,IAAIC,WAAW,EAAEC,OAAO,QAAQ,OAAO;AACnD,SAASC,WAAW,QAAQ,eAAe;AAC3C,SAASC,gBAAgB,QAAQ,iBAAiB;AAClD,SAASC,oBAAoB,QAAQ,eAAe;AACpD,SAASC,uBAAuB,QAAQ,aAAa;AACrD,SAASC,iBAAiB,EAAEC,aAAa,EAAEC,eAAe,EAAEC,yBAAyB,QAAS,SAAS;AACvG;AACA;AACA;AACA,eAAe,SAASC,gBAAgB,CAACC,QAAQ,EAAE;EAC/C,MAAMC,OAAO,GAAGb,KAAK,CAACc,UAAU,CAACT,oBAAoB,CAAC;EACtD,IAAI,CAACQ,OAAO,EAAE;IACV,MAAM,IAAIE,KAAK,CAACT,uBAAuB,CAAC;EAC5C;EACA,MAAM;IAAEU;EAAQ,CAAC,GAAGH,OAAO;EAC3B,MAAM;IAAEI;EAAK,CAAC,GAAGD,OAAO;EACxB,MAAME,cAAc,GAAGjB,WAAW,CAAEkB,KAAK,IAAMC,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEjB,gBAAgB,CAAC;IAAEa,IAAI;IAAEE;EAAM,CAAC,CAAC,CAAE,EAAE,CAACF,IAAI,CAAC,CAAC;EAC7G,MAAMK,UAAU,GAAGV,QAAQ,GAAGJ,aAAa,CAACI,QAAQ,CAAC,GAAGL,iBAAiB;EACzE,MAAMgB,MAAM,GAAGpB,WAAW,CAACa,OAAO,EAAEE,cAAc,EAAEI,UAAU,CAAC;EAC/D,MAAM;MAAEE,KAAK;MAAEC;IAAK,CAAC,GAAGF,MAAM;IAAEG,IAAI,GAAG3B,MAAM,CAACwB,MAAM,EAAE,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;EACxE;EACA;EACA,MAAMI,eAAe,GAAGX,OAAO,CAACY,WAAW,EAAE;EAC7C;EACA,MAAMC,MAAM,GAAG3B,OAAO,CAAC,MAAMO,eAAe,CAACe,KAAK,EAAEG,eAAe,CAAC,EAAE,CAACH,KAAK,EAAEG,eAAe,CAAC,CAAC;EAC/F,OAAOP,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEK,IAAI,CAAC,EAAE;IAAEI,iBAAiB,EAAEpB,yBAAyB,CAACe,IAAI,CAAC;IAAED,KAAK;IACrGC,IAAI;IACJ;IACAI,MAAM;IACN;IACAE,MAAM,EAAEJ,eAAe;IACvB;IACAK,KAAK,EAAEf;EAAK,CAAC,CAAC;AACtB"},"metadata":{},"sourceType":"module","externalDependencies":[]}