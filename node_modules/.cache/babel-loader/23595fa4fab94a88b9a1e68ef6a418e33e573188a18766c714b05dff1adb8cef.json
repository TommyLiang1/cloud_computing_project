{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spread = this && this.__spread || function () {\n  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n  return ar;\n};\nimport Auth from '@aws-amplify/auth';\nimport { GRAPHQL_AUTH_MODE } from '@aws-amplify/api-graphql';\nimport { ModelAttributeAuthProvider, ModelAttributeAuthAllow } from '../types';\nfunction getProviderFromRule(rule) {\n  // private with no provider means userPools\n  if (rule.allow === 'private' && !rule.provider) {\n    return ModelAttributeAuthProvider.USER_POOLS;\n  }\n  // public with no provider means apiKey\n  if (rule.allow === 'public' && !rule.provider) {\n    return ModelAttributeAuthProvider.API_KEY;\n  }\n  return rule.provider;\n}\nfunction sortAuthRulesWithPriority(rules) {\n  var allowSortPriority = [ModelAttributeAuthAllow.CUSTOM, ModelAttributeAuthAllow.OWNER, ModelAttributeAuthAllow.GROUPS, ModelAttributeAuthAllow.PRIVATE, ModelAttributeAuthAllow.PUBLIC];\n  var providerSortPriority = [ModelAttributeAuthProvider.FUNCTION, ModelAttributeAuthProvider.USER_POOLS, ModelAttributeAuthProvider.OIDC, ModelAttributeAuthProvider.IAM, ModelAttributeAuthProvider.API_KEY];\n  return __spread(rules).sort(function (a, b) {\n    if (a.allow === b.allow) {\n      return providerSortPriority.indexOf(getProviderFromRule(a)) - providerSortPriority.indexOf(getProviderFromRule(b));\n    }\n    return allowSortPriority.indexOf(a.allow) - allowSortPriority.indexOf(b.allow);\n  });\n}\nfunction getAuthRules(_a) {\n  var rules = _a.rules,\n    currentUser = _a.currentUser;\n  // Using Set to ensure uniqueness\n  var authModes = new Set();\n  rules.forEach(function (rule) {\n    switch (rule.allow) {\n      case ModelAttributeAuthAllow.CUSTOM:\n        // custom with no provider -> function\n        if (!rule.provider || rule.provider === ModelAttributeAuthProvider.FUNCTION) {\n          authModes.add(GRAPHQL_AUTH_MODE.AWS_LAMBDA);\n        }\n        break;\n      case ModelAttributeAuthAllow.GROUPS:\n      case ModelAttributeAuthAllow.OWNER:\n        {\n          // We shouldn't attempt User Pool or OIDC if there isn't an authenticated user\n          if (currentUser) {\n            if (rule.provider === ModelAttributeAuthProvider.USER_POOLS) {\n              authModes.add(GRAPHQL_AUTH_MODE.AMAZON_COGNITO_USER_POOLS);\n            } else if (rule.provider === ModelAttributeAuthProvider.OIDC) {\n              authModes.add(GRAPHQL_AUTH_MODE.OPENID_CONNECT);\n            }\n          }\n          break;\n        }\n      case ModelAttributeAuthAllow.PRIVATE:\n        {\n          // We shouldn't attempt private if there isn't an authenticated user\n          if (currentUser) {\n            // private with no provider means userPools\n            if (!rule.provider || rule.provider === ModelAttributeAuthProvider.USER_POOLS) {\n              authModes.add(GRAPHQL_AUTH_MODE.AMAZON_COGNITO_USER_POOLS);\n            } else if (rule.provider === ModelAttributeAuthProvider.IAM) {\n              authModes.add(GRAPHQL_AUTH_MODE.AWS_IAM);\n            }\n          }\n          break;\n        }\n      case ModelAttributeAuthAllow.PUBLIC:\n        {\n          if (rule.provider === ModelAttributeAuthProvider.IAM) {\n            authModes.add(GRAPHQL_AUTH_MODE.AWS_IAM);\n          } else if (!rule.provider || rule.provider === ModelAttributeAuthProvider.API_KEY) {\n            // public with no provider means apiKey\n            authModes.add(GRAPHQL_AUTH_MODE.API_KEY);\n          }\n          break;\n        }\n      default:\n        break;\n    }\n  });\n  return Array.from(authModes);\n}\n/**\n * Returns an array of auth modes to try based on the schema, model, and\n * authenticated user (or lack thereof). Rules are sourced from `getAuthRules`\n * and returned in the order they ought to be attempted.\n *\n * @see sortAuthRulesWithPriority\n * @see getAuthRules\n *\n * @param param0 The `{schema, modelName}` to inspect.\n * @returns A sorted array of auth modes to attempt.\n */\nexport var multiAuthStrategy = function (amplifyContext) {\n  return function (_a) {\n    var schema = _a.schema,\n      modelName = _a.modelName;\n    return __awaiter(void 0, void 0, void 0, function () {\n      var currentUser, e_1, attributes, authAttribute, sortedRules;\n      var _b;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            amplifyContext.Auth = amplifyContext.Auth || Auth;\n            _c.label = 1;\n          case 1:\n            _c.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, amplifyContext.Auth.currentAuthenticatedUser()];\n          case 2:\n            currentUser = _c.sent();\n            return [3 /*break*/, 4];\n          case 3:\n            e_1 = _c.sent();\n            return [3 /*break*/, 4];\n          case 4:\n            attributes = schema.namespaces.user.models[modelName].attributes;\n            if (attributes) {\n              authAttribute = attributes.find(function (attr) {\n                return attr.type === 'auth';\n              });\n              if ((_b = authAttribute === null || authAttribute === void 0 ? void 0 : authAttribute.properties) === null || _b === void 0 ? void 0 : _b.rules) {\n                sortedRules = sortAuthRulesWithPriority(authAttribute.properties.rules);\n                return [2 /*return*/, getAuthRules({\n                  currentUser: currentUser,\n                  rules: sortedRules\n                })];\n              }\n            }\n            return [2 /*return*/, []];\n        }\n      });\n    });\n  };\n};","map":{"version":3,"mappings":"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","names":["Auth","GRAPHQL_AUTH_MODE","ModelAttributeAuthProvider","ModelAttributeAuthAllow","getProviderFromRule","rule","allow","provider","USER_POOLS","API_KEY","sortAuthRulesWithPriority","rules","allowSortPriority","CUSTOM","OWNER","GROUPS","PRIVATE","PUBLIC","providerSortPriority","FUNCTION","OIDC","IAM","__spread","sort","a","b","indexOf","getAuthRules","_a","currentUser","authModes","Set","forEach","add","AWS_LAMBDA","AMAZON_COGNITO_USER_POOLS","OPENID_CONNECT","AWS_IAM","Array","from","multiAuthStrategy","amplifyContext","schema","modelName","currentAuthenticatedUser","_c","attributes","namespaces","user","models","authAttribute","find","type","properties","sortedRules"],"sources":["C:\\Users\\weida\\Desktop\\playground_CC\\node_modules\\@aws-amplify\\datastore\\src\\authModeStrategies\\multiAuthStrategy.ts"],"sourcesContent":["import Auth from '@aws-amplify/auth';\nimport { GRAPHQL_AUTH_MODE } from '@aws-amplify/api-graphql';\nimport {\n\tAuthModeStrategy,\n\tModelAttributeAuthProperty,\n\tModelAttributeAuthProvider,\n\tModelAttributeAuthAllow,\n\tAmplifyContext,\n} from '../types';\n\nfunction getProviderFromRule(\n\trule: ModelAttributeAuthProperty\n): ModelAttributeAuthProvider {\n\t// private with no provider means userPools\n\tif (rule.allow === 'private' && !rule.provider) {\n\t\treturn ModelAttributeAuthProvider.USER_POOLS;\n\t}\n\t// public with no provider means apiKey\n\tif (rule.allow === 'public' && !rule.provider) {\n\t\treturn ModelAttributeAuthProvider.API_KEY;\n\t}\n\treturn rule.provider;\n}\n\nfunction sortAuthRulesWithPriority(rules: ModelAttributeAuthProperty[]) {\n\tconst allowSortPriority = [\n\t\tModelAttributeAuthAllow.CUSTOM,\n\t\tModelAttributeAuthAllow.OWNER,\n\t\tModelAttributeAuthAllow.GROUPS,\n\t\tModelAttributeAuthAllow.PRIVATE,\n\t\tModelAttributeAuthAllow.PUBLIC,\n\t];\n\tconst providerSortPriority = [\n\t\tModelAttributeAuthProvider.FUNCTION,\n\t\tModelAttributeAuthProvider.USER_POOLS,\n\t\tModelAttributeAuthProvider.OIDC,\n\t\tModelAttributeAuthProvider.IAM,\n\t\tModelAttributeAuthProvider.API_KEY,\n\t];\n\n\treturn [...rules].sort(\n\t\t(a: ModelAttributeAuthProperty, b: ModelAttributeAuthProperty) => {\n\t\t\tif (a.allow === b.allow) {\n\t\t\t\treturn (\n\t\t\t\t\tproviderSortPriority.indexOf(getProviderFromRule(a)) -\n\t\t\t\t\tproviderSortPriority.indexOf(getProviderFromRule(b))\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn (\n\t\t\t\tallowSortPriority.indexOf(a.allow) - allowSortPriority.indexOf(b.allow)\n\t\t\t);\n\t\t}\n\t);\n}\n\nfunction getAuthRules({\n\trules,\n\tcurrentUser,\n}: {\n\trules: ModelAttributeAuthProperty[];\n\tcurrentUser: unknown;\n}) {\n\t// Using Set to ensure uniqueness\n\tconst authModes = new Set<GRAPHQL_AUTH_MODE>();\n\n\trules.forEach(rule => {\n\t\tswitch (rule.allow) {\n\t\t\tcase ModelAttributeAuthAllow.CUSTOM:\n\t\t\t\t// custom with no provider -> function\n\t\t\t\tif (\n\t\t\t\t\t!rule.provider ||\n\t\t\t\t\trule.provider === ModelAttributeAuthProvider.FUNCTION\n\t\t\t\t) {\n\t\t\t\t\tauthModes.add(GRAPHQL_AUTH_MODE.AWS_LAMBDA);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase ModelAttributeAuthAllow.GROUPS:\n\t\t\tcase ModelAttributeAuthAllow.OWNER: {\n\t\t\t\t// We shouldn't attempt User Pool or OIDC if there isn't an authenticated user\n\t\t\t\tif (currentUser) {\n\t\t\t\t\tif (rule.provider === ModelAttributeAuthProvider.USER_POOLS) {\n\t\t\t\t\t\tauthModes.add(GRAPHQL_AUTH_MODE.AMAZON_COGNITO_USER_POOLS);\n\t\t\t\t\t} else if (rule.provider === ModelAttributeAuthProvider.OIDC) {\n\t\t\t\t\t\tauthModes.add(GRAPHQL_AUTH_MODE.OPENID_CONNECT);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase ModelAttributeAuthAllow.PRIVATE: {\n\t\t\t\t// We shouldn't attempt private if there isn't an authenticated user\n\t\t\t\tif (currentUser) {\n\t\t\t\t\t// private with no provider means userPools\n\t\t\t\t\tif (\n\t\t\t\t\t\t!rule.provider ||\n\t\t\t\t\t\trule.provider === ModelAttributeAuthProvider.USER_POOLS\n\t\t\t\t\t) {\n\t\t\t\t\t\tauthModes.add(GRAPHQL_AUTH_MODE.AMAZON_COGNITO_USER_POOLS);\n\t\t\t\t\t} else if (rule.provider === ModelAttributeAuthProvider.IAM) {\n\t\t\t\t\t\tauthModes.add(GRAPHQL_AUTH_MODE.AWS_IAM);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase ModelAttributeAuthAllow.PUBLIC: {\n\t\t\t\tif (rule.provider === ModelAttributeAuthProvider.IAM) {\n\t\t\t\t\tauthModes.add(GRAPHQL_AUTH_MODE.AWS_IAM);\n\t\t\t\t} else if (\n\t\t\t\t\t!rule.provider ||\n\t\t\t\t\trule.provider === ModelAttributeAuthProvider.API_KEY\n\t\t\t\t) {\n\t\t\t\t\t// public with no provider means apiKey\n\t\t\t\t\tauthModes.add(GRAPHQL_AUTH_MODE.API_KEY);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t});\n\n\treturn Array.from(authModes);\n}\n\n/**\n * Returns an array of auth modes to try based on the schema, model, and\n * authenticated user (or lack thereof). Rules are sourced from `getAuthRules`\n * and returned in the order they ought to be attempted.\n *\n * @see sortAuthRulesWithPriority\n * @see getAuthRules\n *\n * @param param0 The `{schema, modelName}` to inspect.\n * @returns A sorted array of auth modes to attempt.\n */\nexport const multiAuthStrategy: (\n\tamplifyContext: AmplifyContext\n) => AuthModeStrategy =\n\t(amplifyContext: AmplifyContext) =>\n\tasync ({ schema, modelName }) => {\n\t\tamplifyContext.Auth = amplifyContext.Auth || Auth;\n\t\tlet currentUser;\n\t\ttry {\n\t\t\tcurrentUser = await amplifyContext.Auth.currentAuthenticatedUser();\n\t\t} catch (e) {\n\t\t\t// No current user\n\t\t}\n\n\t\tconst { attributes } = schema.namespaces.user.models[modelName];\n\n\t\tif (attributes) {\n\t\t\tconst authAttribute = attributes.find(attr => attr.type === 'auth');\n\n\t\t\tif (authAttribute?.properties?.rules) {\n\t\t\t\tconst sortedRules = sortAuthRulesWithPriority(\n\t\t\t\t\tauthAttribute.properties.rules\n\t\t\t\t);\n\n\t\t\t\treturn getAuthRules({ currentUser, rules: sortedRules });\n\t\t\t}\n\t\t}\n\t\treturn [];\n\t};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}