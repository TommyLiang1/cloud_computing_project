{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __asyncValues = this && this.__asyncValues || function (o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator],\n    i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () {\n    return this;\n  }, i);\n  function verb(n) {\n    i[n] = o[n] && function (v) {\n      return new Promise(function (resolve, reject) {\n        v = o[n](v), settle(resolve, reject, v.done, v.value);\n      });\n    };\n  }\n  function settle(resolve, reject, d, v) {\n    Promise.resolve(v).then(function (v) {\n      resolve({\n        value: v,\n        done: d\n      });\n    }, reject);\n  }\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __spread = this && this.__spread || function () {\n  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n  return ar;\n};\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport * as idb from 'idb';\nimport { ModelPredicateCreator, ModelSortPredicateCreator } from '../../predicates';\nimport { isPredicateObj, OpType, QueryOne } from '../../types';\nimport { exhaustiveCheck, getIndex, getIndexFromAssociation, isModelConstructor, isPrivateMode, traverseModel, validatePredicate, sortCompareFunction, keysEqual, getStorename, getIndexKeys, extractPrimaryKeyValues, isSafariCompatabilityMode } from '../../util';\nvar logger = new Logger('DataStore');\nvar DB_NAME = 'amplify-datastore';\nvar IndexedDBAdapter = /** @class */function () {\n  function IndexedDBAdapter() {\n    var _this = this;\n    this.dbName = DB_NAME;\n    this.safariCompatabilityMode = false;\n    /**\n     * Checks the given path against the browser's IndexedDB implementation for\n     * necessary compatibility transformations, applying those transforms if needed.\n     *\n     * @param `keyArr` strings to compatibilize for browser-indexeddb index operations\n     * @returns An array or string, depending on and given key,\n     * that is ensured to be compatible with the IndexedDB implementation's nuances.\n     */\n    this.canonicalKeyPath = function (keyArr) {\n      if (_this.safariCompatabilityMode) {\n        return keyArr.length > 1 ? keyArr : keyArr[0];\n      }\n      return keyArr;\n    };\n  }\n  IndexedDBAdapter.prototype.getStorenameForModel = function (modelConstructor) {\n    var namespace = this.namespaceResolver(modelConstructor);\n    var modelName = modelConstructor.name;\n    return getStorename(namespace, modelName);\n  };\n  // Retrieves primary key values from a model\n  IndexedDBAdapter.prototype.getIndexKeyValuesFromModel = function (model) {\n    var modelConstructor = Object.getPrototypeOf(model).constructor;\n    var namespaceName = this.namespaceResolver(modelConstructor);\n    var keys = getIndexKeys(this.schema.namespaces[namespaceName], modelConstructor.name);\n    return extractPrimaryKeyValues(model, keys);\n  };\n  IndexedDBAdapter.prototype.checkPrivate = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var isPrivate;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, isPrivateMode().then(function (isPrivate) {\n              return isPrivate;\n            })];\n          case 1:\n            isPrivate = _a.sent();\n            if (isPrivate) {\n              logger.error(\"IndexedDB not supported in this browser's private mode\");\n              return [2 /*return*/, Promise.reject(\"IndexedDB not supported in this browser's private mode\")];\n            } else {\n              return [2 /*return*/, Promise.resolve()];\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Whether the browser's implementation of IndexedDB is coercing single-field\n   * indexes to a scalar key.\n   *\n   * If this returns `true`, we need to treat indexes containing a single field\n   * as scalars.\n   *\n   * See PR description for reference:\n   * https://github.com/aws-amplify/amplify-js/pull/10527\n   */\n  IndexedDBAdapter.prototype.setSafariCompatabilityMode = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = this;\n            return [4 /*yield*/, isSafariCompatabilityMode()];\n          case 1:\n            _a.safariCompatabilityMode = _b.sent();\n            if (this.safariCompatabilityMode === true) {\n              logger.debug('IndexedDB Adapter is running in Safari Compatability Mode');\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype.getNamespaceAndModelFromStorename = function (storeName) {\n    var _a = __read(storeName.split('_')),\n      namespaceName = _a[0],\n      modelNameArr = _a.slice(1);\n    return {\n      namespaceName: namespaceName,\n      modelName: modelNameArr.join('_')\n    };\n  };\n  IndexedDBAdapter.prototype.setUp = function (theSchema, namespaceResolver, modelInstanceCreator, getModelConstructorByModelName, sessionId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var VERSION, _a, error_1;\n      var _this = this;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4 /*yield*/, this.checkPrivate()];\n          case 1:\n            _b.sent();\n            return [4 /*yield*/, this.setSafariCompatabilityMode()];\n          case 2:\n            _b.sent();\n            if (!!this.initPromise) return [3 /*break*/, 3];\n            this.initPromise = new Promise(function (res, rej) {\n              _this.resolve = res;\n              _this.reject = rej;\n            });\n            return [3 /*break*/, 5];\n          case 3:\n            return [4 /*yield*/, this.initPromise];\n          case 4:\n            _b.sent();\n            _b.label = 5;\n          case 5:\n            if (sessionId) {\n              this.dbName = DB_NAME + \"-\" + sessionId;\n            }\n            this.schema = theSchema;\n            this.namespaceResolver = namespaceResolver;\n            this.modelInstanceCreator = modelInstanceCreator;\n            this.getModelConstructorByModelName = getModelConstructorByModelName;\n            _b.label = 6;\n          case 6:\n            _b.trys.push([6, 9,, 10]);\n            if (!!this.db) return [3 /*break*/, 8];\n            VERSION = 3;\n            _a = this;\n            return [4 /*yield*/, idb.openDB(this.dbName, VERSION, {\n              upgrade: function (db, oldVersion, newVersion, txn) {\n                return __awaiter(_this, void 0, void 0, function () {\n                  var _a, _b, storeName, origStore, tmpName, _c, namespaceName, modelName, newStore, cursor, count, e_1_1, error_2;\n                  var e_1, _d;\n                  var _this = this;\n                  return __generator(this, function (_e) {\n                    switch (_e.label) {\n                      case 0:\n                        if (oldVersion === 0) {\n                          Object.keys(theSchema.namespaces).forEach(function (namespaceName) {\n                            var namespace = theSchema.namespaces[namespaceName];\n                            Object.keys(namespace.models).forEach(function (modelName) {\n                              var storeName = getStorename(namespaceName, modelName);\n                              _this.createObjectStoreForModel(db, namespaceName, storeName, modelName);\n                            });\n                          });\n                          return [2 /*return*/];\n                        }\n\n                        if (!((oldVersion === 1 || oldVersion === 2) && newVersion === 3)) return [3 /*break*/, 16];\n                        _e.label = 1;\n                      case 1:\n                        _e.trys.push([1, 14,, 15]);\n                        _e.label = 2;\n                      case 2:\n                        _e.trys.push([2, 11, 12, 13]);\n                        _a = __values(txn.objectStoreNames), _b = _a.next();\n                        _e.label = 3;\n                      case 3:\n                        if (!!_b.done) return [3 /*break*/, 10];\n                        storeName = _b.value;\n                        origStore = txn.objectStore(storeName);\n                        tmpName = \"tmp_\" + storeName;\n                        origStore.name = tmpName;\n                        _c = this.getNamespaceAndModelFromStorename(storeName), namespaceName = _c.namespaceName, modelName = _c.modelName;\n                        newStore = this.createObjectStoreForModel(db, namespaceName, storeName, modelName);\n                        return [4 /*yield*/, origStore.openCursor()];\n                      case 4:\n                        cursor = _e.sent();\n                        count = 0;\n                        _e.label = 5;\n                      case 5:\n                        if (!(cursor && cursor.value)) return [3 /*break*/, 8];\n                        // we don't pass key, since they are all new entries in the new store\n                        return [4 /*yield*/, newStore.put(cursor.value)];\n                      case 6:\n                        // we don't pass key, since they are all new entries in the new store\n                        _e.sent();\n                        return [4 /*yield*/, cursor.continue()];\n                      case 7:\n                        cursor = _e.sent();\n                        count++;\n                        return [3 /*break*/, 5];\n                      case 8:\n                        // delete original\n                        db.deleteObjectStore(tmpName);\n                        logger.debug(count + \" \" + storeName + \" records migrated\");\n                        _e.label = 9;\n                      case 9:\n                        _b = _a.next();\n                        return [3 /*break*/, 3];\n                      case 10:\n                        return [3 /*break*/, 13];\n                      case 11:\n                        e_1_1 = _e.sent();\n                        e_1 = {\n                          error: e_1_1\n                        };\n                        return [3 /*break*/, 13];\n                      case 12:\n                        try {\n                          if (_b && !_b.done && (_d = _a.return)) _d.call(_a);\n                        } finally {\n                          if (e_1) throw e_1.error;\n                        }\n                        return [7 /*endfinally*/];\n                      case 13:\n                        // add new models created after IndexedDB, but before migration\n                        // this case may happen when a user has not opened an app for\n                        // some time and a new model is added during that time\n                        Object.keys(theSchema.namespaces).forEach(function (namespaceName) {\n                          var namespace = theSchema.namespaces[namespaceName];\n                          var objectStoreNames = new Set(txn.objectStoreNames);\n                          Object.keys(namespace.models).map(function (modelName) {\n                            return [modelName, getStorename(namespaceName, modelName)];\n                          }).filter(function (_a) {\n                            var _b = __read(_a, 2),\n                              storeName = _b[1];\n                            return !objectStoreNames.has(storeName);\n                          }).forEach(function (_a) {\n                            var _b = __read(_a, 2),\n                              modelName = _b[0],\n                              storeName = _b[1];\n                            _this.createObjectStoreForModel(db, namespaceName, storeName, modelName);\n                          });\n                        });\n                        return [3 /*break*/, 15];\n                      case 14:\n                        error_2 = _e.sent();\n                        logger.error('Error migrating IndexedDB data', error_2);\n                        txn.abort();\n                        throw error_2;\n                      case 15:\n                        return [2 /*return*/];\n                      case 16:\n                        return [2 /*return*/];\n                    }\n                  });\n                });\n              }\n            })];\n\n          case 7:\n            _a.db = _b.sent();\n            this.resolve();\n            _b.label = 8;\n          case 8:\n            return [3 /*break*/, 10];\n          case 9:\n            error_1 = _b.sent();\n            this.reject(error_1);\n            return [3 /*break*/, 10];\n          case 10:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype._get = function (storeOrStoreName, keyArr) {\n    return __awaiter(this, void 0, void 0, function () {\n      var index, storeName, store, result;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (typeof storeOrStoreName === 'string') {\n              storeName = storeOrStoreName;\n              index = this.db.transaction(storeName, 'readonly').store.index('byPk');\n            } else {\n              store = storeOrStoreName;\n              index = store.index('byPk');\n            }\n            return [4 /*yield*/, index.get(this.canonicalKeyPath(keyArr))];\n          case 1:\n            result = _a.sent();\n            return [2 /*return*/, result];\n        }\n      });\n    });\n  };\n  IndexedDBAdapter.prototype.save = function (model, condition) {\n    var e_2, _a;\n    return __awaiter(this, void 0, void 0, function () {\n      var modelConstructor, storeName, namespaceName, connectedModels, set, connectionStoreNames, tx, store, keyValues, fromDB, predicates, predicateObjs, type, isValid, msg, result, connectionStoreNames_1, connectionStoreNames_1_1, resItem, storeName_1, item, instance, keys, store_1, itemKeyValues, fromDB_1, opType, modelKeyValues, key, e_2_1;\n      var _this = this;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4 /*yield*/, this.checkPrivate()];\n          case 1:\n            _b.sent();\n            modelConstructor = Object.getPrototypeOf(model).constructor;\n            storeName = this.getStorenameForModel(modelConstructor);\n            namespaceName = this.namespaceResolver(modelConstructor);\n            connectedModels = traverseModel(modelConstructor.name, model, this.schema.namespaces[namespaceName], this.modelInstanceCreator, this.getModelConstructorByModelName);\n            set = new Set();\n            connectionStoreNames = Object.values(connectedModels).map(function (_a) {\n              var modelName = _a.modelName,\n                item = _a.item,\n                instance = _a.instance;\n              var storeName = getStorename(namespaceName, modelName);\n              set.add(storeName);\n              var keys = getIndexKeys(_this.schema.namespaces[namespaceName], modelName);\n              return {\n                storeName: storeName,\n                item: item,\n                instance: instance,\n                keys: keys\n              };\n            });\n            tx = this.db.transaction(__spread([storeName], Array.from(set.values())), 'readwrite');\n            store = tx.objectStore(storeName);\n            keyValues = this.getIndexKeyValuesFromModel(model);\n            return [4 /*yield*/, this._get(store, keyValues)];\n          case 2:\n            fromDB = _b.sent();\n            if (condition && fromDB) {\n              predicates = ModelPredicateCreator.getPredicates(condition);\n              predicateObjs = predicates.predicates, type = predicates.type;\n              isValid = validatePredicate(fromDB, type, predicateObjs);\n              if (!isValid) {\n                msg = 'Conditional update failed';\n                logger.error(msg, {\n                  model: fromDB,\n                  condition: predicateObjs\n                });\n                throw new Error(msg);\n              }\n            }\n            result = [];\n            _b.label = 3;\n          case 3:\n            _b.trys.push([3, 11, 12, 17]);\n            connectionStoreNames_1 = __asyncValues(connectionStoreNames);\n            _b.label = 4;\n          case 4:\n            return [4 /*yield*/, connectionStoreNames_1.next()];\n          case 5:\n            if (!(connectionStoreNames_1_1 = _b.sent(), !connectionStoreNames_1_1.done)) return [3 /*break*/, 10];\n            resItem = connectionStoreNames_1_1.value;\n            storeName_1 = resItem.storeName, item = resItem.item, instance = resItem.instance, keys = resItem.keys;\n            store_1 = tx.objectStore(storeName_1);\n            itemKeyValues = keys.map(function (key) {\n              var value = item[key];\n              return value;\n            });\n            return [4 /*yield*/, this._get(store_1, itemKeyValues)];\n          case 6:\n            fromDB_1 = _b.sent();\n            opType = fromDB_1 === undefined ? OpType.INSERT : OpType.UPDATE;\n            modelKeyValues = this.getIndexKeyValuesFromModel(model);\n            if (!(keysEqual(itemKeyValues, modelKeyValues) || opType === OpType.INSERT)) return [3 /*break*/, 9];\n            return [4 /*yield*/, store_1.index('byPk').getKey(this.canonicalKeyPath(itemKeyValues))];\n          case 7:\n            key = _b.sent();\n            return [4 /*yield*/, store_1.put(item, key)];\n          case 8:\n            _b.sent();\n            result.push([instance, opType]);\n            _b.label = 9;\n          case 9:\n            return [3 /*break*/, 4];\n          case 10:\n            return [3 /*break*/, 17];\n          case 11:\n            e_2_1 = _b.sent();\n            e_2 = {\n              error: e_2_1\n            };\n            return [3 /*break*/, 17];\n          case 12:\n            _b.trys.push([12,, 15, 16]);\n            if (!(connectionStoreNames_1_1 && !connectionStoreNames_1_1.done && (_a = connectionStoreNames_1.return))) return [3 /*break*/, 14];\n            return [4 /*yield*/, _a.call(connectionStoreNames_1)];\n          case 13:\n            _b.sent();\n            _b.label = 14;\n          case 14:\n            return [3 /*break*/, 16];\n          case 15:\n            if (e_2) throw e_2.error;\n            return [7 /*endfinally*/];\n          case 16:\n            return [7 /*endfinally*/];\n          case 17:\n            return [4 /*yield*/, tx.done];\n          case 18:\n            _b.sent();\n            return [2 /*return*/, result];\n        }\n      });\n    });\n  };\n  IndexedDBAdapter.prototype.load = function (namespaceName, srcModelName, records) {\n    var records_1, records_1_1, records_2, records_2_1;\n    var e_3, _a, e_4, _b, e_5, _c;\n    return __awaiter(this, void 0, void 0, function () {\n      var namespace, relations, connectionStoreNames, modelConstructor, tx, relations_1, relations_1_1, relation, fieldName, modelName, targetName, targetNames, storeName, store, modelConstructor_1, _d, recordItem, getByFields, allPresent, keys, connectionRecord, getByfield, key, connectionRecord, e_4_1, recordItem, allPresent, keys, connectionRecord, key, connectionRecord, e_5_1, e_3_1;\n      var _this = this;\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            namespace = this.schema.namespaces[namespaceName];\n            relations = namespace.relationships[srcModelName].relationTypes;\n            connectionStoreNames = relations.map(function (_a) {\n              var modelName = _a.modelName;\n              return getStorename(namespaceName, modelName);\n            });\n            modelConstructor = this.getModelConstructorByModelName(namespaceName, srcModelName);\n            if (connectionStoreNames.length === 0) {\n              return [2 /*return*/, records.map(function (record) {\n                return _this.modelInstanceCreator(modelConstructor, record);\n              })];\n            }\n            tx = this.db.transaction(__spread(connectionStoreNames), 'readonly');\n            _e.label = 1;\n          case 1:\n            _e.trys.push([1, 38, 39, 44]);\n            relations_1 = __asyncValues(relations);\n            _e.label = 2;\n          case 2:\n            return [4 /*yield*/, relations_1.next()];\n          case 3:\n            if (!(relations_1_1 = _e.sent(), !relations_1_1.done)) return [3 /*break*/, 37];\n            relation = relations_1_1.value;\n            fieldName = relation.fieldName, modelName = relation.modelName, targetName = relation.targetName, targetNames = relation.targetNames;\n            storeName = getStorename(namespaceName, modelName);\n            store = tx.objectStore(storeName);\n            modelConstructor_1 = this.getModelConstructorByModelName(namespaceName, modelName);\n            _d = relation.relationType;\n            switch (_d) {\n              case 'HAS_ONE':\n                return [3 /*break*/, 4];\n              case 'BELONGS_TO':\n                return [3 /*break*/, 19];\n              case 'HAS_MANY':\n                return [3 /*break*/, 34];\n            }\n            return [3 /*break*/, 35];\n          case 4:\n            _e.trys.push([4, 12, 13, 18]);\n            records_1 = __asyncValues(records);\n            _e.label = 5;\n          case 5:\n            return [4 /*yield*/, records_1.next()];\n          case 6:\n            if (!(records_1_1 = _e.sent(), !records_1_1.done)) return [3 /*break*/, 11];\n            recordItem = records_1_1.value;\n            if (!(targetNames === null || targetNames === void 0 ? void 0 : targetNames.length)) return [3 /*break*/, 8];\n            getByFields = [];\n            allPresent = void 0;\n            // iterate through all targetnames to make sure they are all present in the recordItem\n            allPresent = targetNames.every(function (targetName) {\n              return recordItem[targetName] != null;\n            });\n            if (!allPresent) {\n              return [3 /*break*/, 11];\n            }\n            getByFields = targetNames;\n            keys = getByFields.map(function (getByField) {\n              return recordItem[getByField];\n            });\n            return [4 /*yield*/, this._get(store, keys)];\n          case 7:\n            connectionRecord = _e.sent();\n            recordItem[fieldName] = connectionRecord && this.modelInstanceCreator(modelConstructor_1, connectionRecord);\n            return [3 /*break*/, 10];\n          case 8:\n            getByfield = recordItem[targetName] ? targetName : fieldName;\n            // We break here, because the recordItem does not have 'team', the `getByField`\n            // extract the keys on the related model.\n            if (!recordItem[getByfield]) return [3 /*break*/, 11];\n            key = [recordItem[getByfield]];\n            return [4 /*yield*/, this._get(store, key)];\n          case 9:\n            connectionRecord = _e.sent();\n            recordItem[fieldName] = connectionRecord && this.modelInstanceCreator(modelConstructor_1, connectionRecord);\n            _e.label = 10;\n          case 10:\n            return [3 /*break*/, 5];\n          case 11:\n            return [3 /*break*/, 18];\n          case 12:\n            e_4_1 = _e.sent();\n            e_4 = {\n              error: e_4_1\n            };\n            return [3 /*break*/, 18];\n          case 13:\n            _e.trys.push([13,, 16, 17]);\n            if (!(records_1_1 && !records_1_1.done && (_b = records_1.return))) return [3 /*break*/, 15];\n            return [4 /*yield*/, _b.call(records_1)];\n          case 14:\n            _e.sent();\n            _e.label = 15;\n          case 15:\n            return [3 /*break*/, 17];\n          case 16:\n            if (e_4) throw e_4.error;\n            return [7 /*endfinally*/];\n          case 17:\n            return [7 /*endfinally*/];\n          case 18:\n            return [3 /*break*/, 36];\n          case 19:\n            _e.trys.push([19, 27, 28, 33]);\n            records_2 = __asyncValues(records);\n            _e.label = 20;\n          case 20:\n            return [4 /*yield*/, records_2.next()];\n          case 21:\n            if (!(records_2_1 = _e.sent(), !records_2_1.done)) return [3 /*break*/, 26];\n            recordItem = records_2_1.value;\n            if (!(targetNames === null || targetNames === void 0 ? void 0 : targetNames.length)) return [3 /*break*/, 23];\n            allPresent = void 0;\n            // iterate through all targetnames to make sure they are all present in the recordItem\n            allPresent = targetNames.every(function (targetName) {\n              return recordItem[targetName] != null;\n            });\n            // If not present, there is not yet a connected record\n            if (!allPresent) {\n              return [3 /*break*/, 26];\n            }\n            keys = targetNames.map(function (targetName) {\n              return recordItem[targetName];\n            });\n            return [4 /*yield*/, this._get(store, keys)];\n          case 22:\n            connectionRecord = _e.sent();\n            recordItem[fieldName] = connectionRecord && this.modelInstanceCreator(modelConstructor_1, connectionRecord);\n            targetNames === null || targetNames === void 0 ? void 0 : targetNames.map(function (targetName) {\n              delete recordItem[targetName];\n            });\n            return [3 /*break*/, 25];\n          case 23:\n            if (!recordItem[targetName]) return [3 /*break*/, 25];\n            key = [recordItem[targetName]];\n            return [4 /*yield*/, this._get(store, key)];\n          case 24:\n            connectionRecord = _e.sent();\n            recordItem[fieldName] = connectionRecord && this.modelInstanceCreator(modelConstructor_1, connectionRecord);\n            delete recordItem[targetName];\n            _e.label = 25;\n          case 25:\n            return [3 /*break*/, 20];\n          case 26:\n            return [3 /*break*/, 33];\n          case 27:\n            e_5_1 = _e.sent();\n            e_5 = {\n              error: e_5_1\n            };\n            return [3 /*break*/, 33];\n          case 28:\n            _e.trys.push([28,, 31, 32]);\n            if (!(records_2_1 && !records_2_1.done && (_c = records_2.return))) return [3 /*break*/, 30];\n            return [4 /*yield*/, _c.call(records_2)];\n          case 29:\n            _e.sent();\n            _e.label = 30;\n          case 30:\n            return [3 /*break*/, 32];\n          case 31:\n            if (e_5) throw e_5.error;\n            return [7 /*endfinally*/];\n          case 32:\n            return [7 /*endfinally*/];\n          case 33:\n            return [3 /*break*/, 36];\n          case 34:\n            // TODO: Lazy loading\n            return [3 /*break*/, 36];\n          case 35:\n            exhaustiveCheck(relation.relationType);\n            return [3 /*break*/, 36];\n          case 36:\n            return [3 /*break*/, 2];\n          case 37:\n            return [3 /*break*/, 44];\n          case 38:\n            e_3_1 = _e.sent();\n            e_3 = {\n              error: e_3_1\n            };\n            return [3 /*break*/, 44];\n          case 39:\n            _e.trys.push([39,, 42, 43]);\n            if (!(relations_1_1 && !relations_1_1.done && (_a = relations_1.return))) return [3 /*break*/, 41];\n            return [4 /*yield*/, _a.call(relations_1)];\n          case 40:\n            _e.sent();\n            _e.label = 41;\n          case 41:\n            return [3 /*break*/, 43];\n          case 42:\n            if (e_3) throw e_3.error;\n            return [7 /*endfinally*/];\n          case 43:\n            return [7 /*endfinally*/];\n          case 44:\n            return [2 /*return*/, records.map(function (record) {\n              return _this.modelInstanceCreator(modelConstructor, record);\n            })];\n        }\n      });\n    });\n  };\n  IndexedDBAdapter.prototype.query = function (modelConstructor, predicate, pagination) {\n    return __awaiter(this, void 0, void 0, function () {\n      var storeName, namespaceName, predicates, keyPath, queryByKey, hasSort, hasPagination, records;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.checkPrivate()];\n          case 1:\n            _a.sent();\n            storeName = this.getStorenameForModel(modelConstructor);\n            namespaceName = this.namespaceResolver(modelConstructor);\n            predicates = predicate && ModelPredicateCreator.getPredicates(predicate);\n            keyPath = getIndexKeys(this.schema.namespaces[namespaceName], modelConstructor.name);\n            queryByKey = predicates && this.keyValueFromPredicate(predicates, keyPath);\n            hasSort = pagination && pagination.sort;\n            hasPagination = pagination && pagination.limit;\n            return [4 /*yield*/, function () {\n              return __awaiter(_this, void 0, void 0, function () {\n                var record, filtered, all;\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      if (!queryByKey) return [3 /*break*/, 2];\n                      return [4 /*yield*/, this.getByKey(storeName, queryByKey)];\n                    case 1:\n                      record = _a.sent();\n                      return [2 /*return*/, record ? [record] : []];\n                    case 2:\n                      if (!predicates) return [3 /*break*/, 4];\n                      return [4 /*yield*/, this.filterOnPredicate(storeName, predicates)];\n                    case 3:\n                      filtered = _a.sent();\n                      return [2 /*return*/, this.inMemoryPagination(filtered, pagination)];\n                    case 4:\n                      if (!hasSort) return [3 /*break*/, 6];\n                      return [4 /*yield*/, this.getAll(storeName)];\n                    case 5:\n                      all = _a.sent();\n                      return [2 /*return*/, this.inMemoryPagination(all, pagination)];\n                    case 6:\n                      if (hasPagination) {\n                        return [2 /*return*/, this.enginePagination(storeName, pagination)];\n                      }\n                      return [2 /*return*/, this.getAll(storeName)];\n                  }\n                });\n              });\n            }()];\n          case 2:\n            records = _a.sent();\n            return [4 /*yield*/, this.load(namespaceName, modelConstructor.name, records)];\n          case 3:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  IndexedDBAdapter.prototype.getByKey = function (storeName, keyValue) {\n    return __awaiter(this, void 0, void 0, function () {\n      var record;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this._get(storeName, keyValue)];\n          case 1:\n            record = _a.sent();\n            return [2 /*return*/, record];\n        }\n      });\n    });\n  };\n  IndexedDBAdapter.prototype.getAll = function (storeName) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.db.getAll(storeName)];\n          case 1:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  IndexedDBAdapter.prototype.keyValueFromPredicate = function (predicates, keyPath) {\n    var e_6, _a;\n    var predicateObjs = predicates.predicates;\n    if (predicateObjs.length !== keyPath.length) {\n      return;\n    }\n    var keyValues = [];\n    var _loop_1 = function (key) {\n      var predicateObj = predicateObjs.find(function (p) {\n        return isPredicateObj(p) && p.field === key && p.operator === 'eq';\n      });\n      predicateObj && keyValues.push(predicateObj.operand);\n    };\n    try {\n      for (var keyPath_1 = __values(keyPath), keyPath_1_1 = keyPath_1.next(); !keyPath_1_1.done; keyPath_1_1 = keyPath_1.next()) {\n        var key = keyPath_1_1.value;\n        _loop_1(key);\n      }\n    } catch (e_6_1) {\n      e_6 = {\n        error: e_6_1\n      };\n    } finally {\n      try {\n        if (keyPath_1_1 && !keyPath_1_1.done && (_a = keyPath_1.return)) _a.call(keyPath_1);\n      } finally {\n        if (e_6) throw e_6.error;\n      }\n    }\n    return keyValues.length === keyPath.length ? keyValues : undefined;\n  };\n  IndexedDBAdapter.prototype.filterOnPredicate = function (storeName, predicates) {\n    return __awaiter(this, void 0, void 0, function () {\n      var predicateObjs, type, all, filtered;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            predicateObjs = predicates.predicates, type = predicates.type;\n            return [4 /*yield*/, this.getAll(storeName)];\n          case 1:\n            all = _a.sent();\n            filtered = predicateObjs ? all.filter(function (m) {\n              return validatePredicate(m, type, predicateObjs);\n            }) : all;\n            return [2 /*return*/, filtered];\n        }\n      });\n    });\n  };\n  IndexedDBAdapter.prototype.inMemoryPagination = function (records, pagination) {\n    if (pagination && records.length > 1) {\n      if (pagination.sort) {\n        var sortPredicates = ModelSortPredicateCreator.getPredicates(pagination.sort);\n        if (sortPredicates.length) {\n          var compareFn = sortCompareFunction(sortPredicates);\n          records.sort(compareFn);\n        }\n      }\n      var _a = pagination.page,\n        page = _a === void 0 ? 0 : _a,\n        _b = pagination.limit,\n        limit = _b === void 0 ? 0 : _b;\n      var start = Math.max(0, page * limit) || 0;\n      var end = limit > 0 ? start + limit : records.length;\n      return records.slice(start, end);\n    }\n    return records;\n  };\n  IndexedDBAdapter.prototype.enginePagination = function (storeName, pagination) {\n    return __awaiter(this, void 0, void 0, function () {\n      var result, _a, page, _b, limit, initialRecord, cursor, pageResults, hasLimit;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            if (!pagination) return [3 /*break*/, 7];\n            _a = pagination.page, page = _a === void 0 ? 0 : _a, _b = pagination.limit, limit = _b === void 0 ? 0 : _b;\n            initialRecord = Math.max(0, page * limit) || 0;\n            return [4 /*yield*/, this.db.transaction(storeName).objectStore(storeName).openCursor()];\n          case 1:\n            cursor = _c.sent();\n            if (!(cursor && initialRecord > 0)) return [3 /*break*/, 3];\n            return [4 /*yield*/, cursor.advance(initialRecord)];\n          case 2:\n            _c.sent();\n            _c.label = 3;\n          case 3:\n            pageResults = [];\n            hasLimit = typeof limit === 'number' && limit > 0;\n            _c.label = 4;\n          case 4:\n            if (!(cursor && cursor.value)) return [3 /*break*/, 6];\n            pageResults.push(cursor.value);\n            if (hasLimit && pageResults.length === limit) {\n              return [3 /*break*/, 6];\n            }\n            return [4 /*yield*/, cursor.continue()];\n          case 5:\n            cursor = _c.sent();\n            return [3 /*break*/, 4];\n          case 6:\n            result = pageResults;\n            return [3 /*break*/, 9];\n          case 7:\n            return [4 /*yield*/, this.db.getAll(storeName)];\n          case 8:\n            result = _c.sent();\n            _c.label = 9;\n          case 9:\n            return [2 /*return*/, result];\n        }\n      });\n    });\n  };\n  IndexedDBAdapter.prototype.queryOne = function (modelConstructor, firstOrLast) {\n    if (firstOrLast === void 0) {\n      firstOrLast = QueryOne.FIRST;\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      var storeName, cursor, result;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.checkPrivate()];\n          case 1:\n            _a.sent();\n            storeName = this.getStorenameForModel(modelConstructor);\n            return [4 /*yield*/, this.db.transaction([storeName], 'readonly').objectStore(storeName).openCursor(undefined, firstOrLast === QueryOne.FIRST ? 'next' : 'prev')];\n          case 2:\n            cursor = _a.sent();\n            result = cursor ? cursor.value : undefined;\n            return [2 /*return*/, result && this.modelInstanceCreator(modelConstructor, result)];\n        }\n      });\n    });\n  };\n  IndexedDBAdapter.prototype.delete = function (modelOrModelConstructor, condition) {\n    return __awaiter(this, void 0, void 0, function () {\n      var deleteQueue, modelConstructor, nameSpace, storeName, models, relations, deletedModels, deletedModels, model, modelConstructor, namespaceName, storeName, tx, store, keyValues, fromDB, msg, predicates, predicateObjs, type, isValid, msg, relations, relations, deletedModels;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.checkPrivate()];\n          case 1:\n            _a.sent();\n            deleteQueue = [];\n            if (!isModelConstructor(modelOrModelConstructor)) return [3 /*break*/, 9];\n            modelConstructor = modelOrModelConstructor;\n            nameSpace = this.namespaceResolver(modelConstructor);\n            storeName = this.getStorenameForModel(modelConstructor);\n            return [4 /*yield*/, this.query(modelConstructor, condition)];\n          case 2:\n            models = _a.sent();\n            relations = this.schema.namespaces[nameSpace].relationships[modelConstructor.name].relationTypes;\n            if (!(condition !== undefined)) return [3 /*break*/, 5];\n            return [4 /*yield*/, this.deleteTraverse(relations, models, modelConstructor.name, nameSpace, deleteQueue)];\n          case 3:\n            _a.sent();\n            return [4 /*yield*/, this.deleteItem(deleteQueue)];\n          case 4:\n            _a.sent();\n            deletedModels = deleteQueue.reduce(function (acc, _a) {\n              var items = _a.items;\n              return acc.concat(items);\n            }, []);\n            return [2 /*return*/, [models, deletedModels]];\n          case 5:\n            return [4 /*yield*/, this.deleteTraverse(relations, models, modelConstructor.name, nameSpace, deleteQueue)];\n          case 6:\n            _a.sent();\n            // Delete all\n            return [4 /*yield*/, this.db.transaction([storeName], 'readwrite').objectStore(storeName).clear()];\n          case 7:\n            // Delete all\n            _a.sent();\n            deletedModels = deleteQueue.reduce(function (acc, _a) {\n              var items = _a.items;\n              return acc.concat(items);\n            }, []);\n            return [2 /*return*/, [models, deletedModels]];\n          case 8:\n            return [3 /*break*/, 17];\n          case 9:\n            model = modelOrModelConstructor;\n            modelConstructor = Object.getPrototypeOf(model).constructor;\n            namespaceName = this.namespaceResolver(modelConstructor);\n            storeName = this.getStorenameForModel(modelConstructor);\n            if (!condition) return [3 /*break*/, 13];\n            tx = this.db.transaction([storeName], 'readwrite');\n            store = tx.objectStore(storeName);\n            keyValues = this.getIndexKeyValuesFromModel(model);\n            return [4 /*yield*/, this._get(store, keyValues)];\n          case 10:\n            fromDB = _a.sent();\n            if (fromDB === undefined) {\n              msg = 'Model instance not found in storage';\n              logger.warn(msg, {\n                model: model\n              });\n              return [2 /*return*/, [[model], []]];\n            }\n            predicates = ModelPredicateCreator.getPredicates(condition);\n            predicateObjs = predicates.predicates, type = predicates.type;\n            isValid = validatePredicate(fromDB, type, predicateObjs);\n            if (!isValid) {\n              msg = 'Conditional update failed';\n              logger.error(msg, {\n                model: fromDB,\n                condition: predicateObjs\n              });\n              throw new Error(msg);\n            }\n            return [4 /*yield*/, tx.done];\n          case 11:\n            _a.sent();\n            relations = this.schema.namespaces[namespaceName].relationships[modelConstructor.name].relationTypes;\n            return [4 /*yield*/, this.deleteTraverse(relations, [model], modelConstructor.name, namespaceName, deleteQueue)];\n          case 12:\n            _a.sent();\n            return [3 /*break*/, 15];\n          case 13:\n            relations = this.schema.namespaces[namespaceName].relationships[modelConstructor.name].relationTypes;\n            return [4 /*yield*/, this.deleteTraverse(relations, [model], modelConstructor.name, namespaceName, deleteQueue)];\n          case 14:\n            _a.sent();\n            _a.label = 15;\n          case 15:\n            return [4 /*yield*/, this.deleteItem(deleteQueue)];\n          case 16:\n            _a.sent();\n            deletedModels = deleteQueue.reduce(function (acc, _a) {\n              var items = _a.items;\n              return acc.concat(items);\n            }, []);\n            return [2 /*return*/, [[model], deletedModels]];\n          case 17:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype.deleteItem = function (deleteQueue) {\n    var deleteQueue_1, deleteQueue_1_1;\n    var e_7, _a, e_8, _b;\n    return __awaiter(this, void 0, void 0, function () {\n      var connectionStoreNames, tx, deleteItem, storeName, items, store, items_1, items_1_1, item, key, keyValues, itemKey, e_8_1, e_7_1;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            connectionStoreNames = deleteQueue.map(function (_a) {\n              var storeName = _a.storeName;\n              return storeName;\n            });\n            tx = this.db.transaction(__spread(connectionStoreNames), 'readwrite');\n            _c.label = 1;\n          case 1:\n            _c.trys.push([1, 22, 23, 28]);\n            deleteQueue_1 = __asyncValues(deleteQueue);\n            _c.label = 2;\n          case 2:\n            return [4 /*yield*/, deleteQueue_1.next()];\n          case 3:\n            if (!(deleteQueue_1_1 = _c.sent(), !deleteQueue_1_1.done)) return [3 /*break*/, 21];\n            deleteItem = deleteQueue_1_1.value;\n            storeName = deleteItem.storeName, items = deleteItem.items;\n            store = tx.objectStore(storeName);\n            _c.label = 4;\n          case 4:\n            _c.trys.push([4, 14, 15, 20]);\n            items_1 = __asyncValues(items);\n            _c.label = 5;\n          case 5:\n            return [4 /*yield*/, items_1.next()];\n          case 6:\n            if (!(items_1_1 = _c.sent(), !items_1_1.done)) return [3 /*break*/, 13];\n            item = items_1_1.value;\n            if (!item) return [3 /*break*/, 12];\n            key = void 0;\n            if (!(typeof item === 'object')) return [3 /*break*/, 8];\n            keyValues = this.getIndexKeyValuesFromModel(item);\n            return [4 /*yield*/, store.index('byPk').getKey(this.canonicalKeyPath(keyValues))];\n          case 7:\n            key = _c.sent();\n            return [3 /*break*/, 10];\n          case 8:\n            itemKey = item.toString();\n            return [4 /*yield*/, store.index('byPk').getKey(itemKey)];\n          case 9:\n            key = _c.sent();\n            _c.label = 10;\n          case 10:\n            if (!(key !== undefined)) return [3 /*break*/, 12];\n            return [4 /*yield*/, store.delete(key)];\n          case 11:\n            _c.sent();\n            _c.label = 12;\n          case 12:\n            return [3 /*break*/, 5];\n          case 13:\n            return [3 /*break*/, 20];\n          case 14:\n            e_8_1 = _c.sent();\n            e_8 = {\n              error: e_8_1\n            };\n            return [3 /*break*/, 20];\n          case 15:\n            _c.trys.push([15,, 18, 19]);\n            if (!(items_1_1 && !items_1_1.done && (_b = items_1.return))) return [3 /*break*/, 17];\n            return [4 /*yield*/, _b.call(items_1)];\n          case 16:\n            _c.sent();\n            _c.label = 17;\n          case 17:\n            return [3 /*break*/, 19];\n          case 18:\n            if (e_8) throw e_8.error;\n            return [7 /*endfinally*/];\n          case 19:\n            return [7 /*endfinally*/];\n          case 20:\n            return [3 /*break*/, 2];\n          case 21:\n            return [3 /*break*/, 28];\n          case 22:\n            e_7_1 = _c.sent();\n            e_7 = {\n              error: e_7_1\n            };\n            return [3 /*break*/, 28];\n          case 23:\n            _c.trys.push([23,, 26, 27]);\n            if (!(deleteQueue_1_1 && !deleteQueue_1_1.done && (_a = deleteQueue_1.return))) return [3 /*break*/, 25];\n            return [4 /*yield*/, _a.call(deleteQueue_1)];\n          case 24:\n            _c.sent();\n            _c.label = 25;\n          case 25:\n            return [3 /*break*/, 27];\n          case 26:\n            if (e_7) throw e_7.error;\n            return [7 /*endfinally*/];\n          case 27:\n            return [7 /*endfinally*/];\n          case 28:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype.deleteTraverse = function (relations, models, srcModel, nameSpace, deleteQueue) {\n    var relations_2, relations_2_1, models_1, models_1_1, models_2, models_2_1;\n    var e_9, _a, e_10, _b, e_11, _c;\n    return __awaiter(this, void 0, void 0, function () {\n      var rel, relationType, modelName, targetName, targetNames, associatedWith, storeName, _d, model, hasOneIndex, values, recordToDelete, index, values, value, recordToDelete, e_10_1, model, index, keyValues, childrenArray, e_11_1, e_9_1;\n      var _this = this;\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            _e.trys.push([0, 38, 39, 44]);\n            relations_2 = __asyncValues(relations);\n            _e.label = 1;\n          case 1:\n            return [4 /*yield*/, relations_2.next()];\n          case 2:\n            if (!(relations_2_1 = _e.sent(), !relations_2_1.done)) return [3 /*break*/, 37];\n            rel = relations_2_1.value;\n            relationType = rel.relationType, modelName = rel.modelName, targetName = rel.targetName, targetNames = rel.targetNames, associatedWith = rel.associatedWith;\n            storeName = getStorename(nameSpace, modelName);\n            _d = relationType;\n            switch (_d) {\n              case 'HAS_ONE':\n                return [3 /*break*/, 3];\n              case 'HAS_MANY':\n                return [3 /*break*/, 20];\n              case 'BELONGS_TO':\n                return [3 /*break*/, 34];\n            }\n            return [3 /*break*/, 35];\n          case 3:\n            _e.trys.push([3, 13, 14, 19]);\n            models_1 = __asyncValues(models);\n            _e.label = 4;\n          case 4:\n            return [4 /*yield*/, models_1.next()];\n          case 5:\n            if (!(models_1_1 = _e.sent(), !models_1_1.done)) return [3 /*break*/, 12];\n            model = models_1_1.value;\n            hasOneIndex = 'byPk';\n            if (!(targetNames === null || targetNames === void 0 ? void 0 : targetNames.length)) return [3 /*break*/, 8];\n            values = targetNames.map(function (targetName) {\n              return model[targetName];\n            });\n            if (values.length === 0) return [3 /*break*/, 12];\n            return [4 /*yield*/, this.db.transaction(storeName, 'readwrite').objectStore(storeName).index(hasOneIndex).get(this.canonicalKeyPath(values))];\n          case 6:\n            recordToDelete = _e.sent();\n            return [4 /*yield*/, this.deleteTraverse(this.schema.namespaces[nameSpace].relationships[modelName].relationTypes, recordToDelete ? [recordToDelete] : [], modelName, nameSpace, deleteQueue)];\n          case 7:\n            _e.sent();\n            return [3 /*break*/, 12];\n          case 8:\n            index = void 0;\n            values = void 0;\n            if (targetName && targetName in model) {\n              index = hasOneIndex;\n              value = model[targetName];\n              values = [value];\n            } else {\n              // backwards compatability for older versions of codegen that did not emit targetName for HAS_ONE relations\n              // TODO: can we deprecate this? it's been ~2 years since codegen started including targetName for HAS_ONE\n              // If we deprecate, we'll need to re-gen the MIPR in __tests__/schema.ts > newSchema\n              // otherwise some unit tests will fail\n              index = getIndex(this.schema.namespaces[nameSpace].relationships[modelName].relationTypes, srcModel);\n              values = this.getIndexKeyValuesFromModel(model);\n            }\n            if (!values || !index) return [3 /*break*/, 12];\n            return [4 /*yield*/, this.db.transaction(storeName, 'readwrite').objectStore(storeName).index(index).get(this.canonicalKeyPath(values))];\n          case 9:\n            recordToDelete = _e.sent();\n            return [4 /*yield*/, this.deleteTraverse(this.schema.namespaces[nameSpace].relationships[modelName].relationTypes, recordToDelete ? [recordToDelete] : [], modelName, nameSpace, deleteQueue)];\n          case 10:\n            _e.sent();\n            _e.label = 11;\n          case 11:\n            return [3 /*break*/, 4];\n          case 12:\n            return [3 /*break*/, 19];\n          case 13:\n            e_10_1 = _e.sent();\n            e_10 = {\n              error: e_10_1\n            };\n            return [3 /*break*/, 19];\n          case 14:\n            _e.trys.push([14,, 17, 18]);\n            if (!(models_1_1 && !models_1_1.done && (_b = models_1.return))) return [3 /*break*/, 16];\n            return [4 /*yield*/, _b.call(models_1)];\n          case 15:\n            _e.sent();\n            _e.label = 16;\n          case 16:\n            return [3 /*break*/, 18];\n          case 17:\n            if (e_10) throw e_10.error;\n            return [7 /*endfinally*/];\n          case 18:\n            return [7 /*endfinally*/];\n          case 19:\n            return [3 /*break*/, 36];\n          case 20:\n            _e.trys.push([20, 27, 28, 33]);\n            models_2 = __asyncValues(models);\n            _e.label = 21;\n          case 21:\n            return [4 /*yield*/, models_2.next()];\n          case 22:\n            if (!(models_2_1 = _e.sent(), !models_2_1.done)) return [3 /*break*/, 26];\n            model = models_2_1.value;\n            index =\n            // explicit bi-directional @hasMany and @manyToMany\n            getIndex(this.schema.namespaces[nameSpace].relationships[modelName].relationTypes, srcModel) ||\n            // uni and/or implicit @hasMany\n            getIndexFromAssociation(this.schema.namespaces[nameSpace].relationships[modelName].indexes, associatedWith);\n            keyValues = this.getIndexKeyValuesFromModel(model);\n            return [4 /*yield*/, this.db.transaction(storeName, 'readwrite').objectStore(storeName).index(index).getAll(this.canonicalKeyPath(keyValues))];\n          case 23:\n            childrenArray = _e.sent();\n            return [4 /*yield*/, this.deleteTraverse(this.schema.namespaces[nameSpace].relationships[modelName].relationTypes, childrenArray, modelName, nameSpace, deleteQueue)];\n          case 24:\n            _e.sent();\n            _e.label = 25;\n          case 25:\n            return [3 /*break*/, 21];\n          case 26:\n            return [3 /*break*/, 33];\n          case 27:\n            e_11_1 = _e.sent();\n            e_11 = {\n              error: e_11_1\n            };\n            return [3 /*break*/, 33];\n          case 28:\n            _e.trys.push([28,, 31, 32]);\n            if (!(models_2_1 && !models_2_1.done && (_c = models_2.return))) return [3 /*break*/, 30];\n            return [4 /*yield*/, _c.call(models_2)];\n          case 29:\n            _e.sent();\n            _e.label = 30;\n          case 30:\n            return [3 /*break*/, 32];\n          case 31:\n            if (e_11) throw e_11.error;\n            return [7 /*endfinally*/];\n          case 32:\n            return [7 /*endfinally*/];\n          case 33:\n            return [3 /*break*/, 36];\n          case 34:\n            // Intentionally blank\n            return [3 /*break*/, 36];\n          case 35:\n            exhaustiveCheck(relationType);\n            return [3 /*break*/, 36];\n          case 36:\n            return [3 /*break*/, 1];\n          case 37:\n            return [3 /*break*/, 44];\n          case 38:\n            e_9_1 = _e.sent();\n            e_9 = {\n              error: e_9_1\n            };\n            return [3 /*break*/, 44];\n          case 39:\n            _e.trys.push([39,, 42, 43]);\n            if (!(relations_2_1 && !relations_2_1.done && (_a = relations_2.return))) return [3 /*break*/, 41];\n            return [4 /*yield*/, _a.call(relations_2)];\n          case 40:\n            _e.sent();\n            _e.label = 41;\n          case 41:\n            return [3 /*break*/, 43];\n          case 42:\n            if (e_9) throw e_9.error;\n            return [7 /*endfinally*/];\n          case 43:\n            return [7 /*endfinally*/];\n          case 44:\n            deleteQueue.push({\n              storeName: getStorename(nameSpace, srcModel),\n              items: models.map(function (record) {\n                return _this.modelInstanceCreator(_this.getModelConstructorByModelName(nameSpace, srcModel), record);\n              })\n            });\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype.clear = function () {\n    var _a;\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4 /*yield*/, this.checkPrivate()];\n          case 1:\n            _b.sent();\n            (_a = this.db) === null || _a === void 0 ? void 0 : _a.close();\n            return [4 /*yield*/, idb.deleteDB(this.dbName)];\n          case 2:\n            _b.sent();\n            this.db = undefined;\n            this.initPromise = undefined;\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype.batchSave = function (modelConstructor, items) {\n    return __awaiter(this, void 0, void 0, function () {\n      var result, storeName, txn, store, _loop_2, this_1, items_2, items_2_1, item, e_12_1;\n      var e_12, _a;\n      var _this = this;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (items.length === 0) {\n              return [2 /*return*/, []];\n            }\n            return [4 /*yield*/, this.checkPrivate()];\n          case 1:\n            _b.sent();\n            result = [];\n            storeName = this.getStorenameForModel(modelConstructor);\n            txn = this.db.transaction(storeName, 'readwrite');\n            store = txn.store;\n            _loop_2 = function (item) {\n              var namespaceName, modelName, model, connectedModels, keyValues, _deleted, index, key, instance;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    namespaceName = this_1.namespaceResolver(modelConstructor);\n                    modelName = modelConstructor.name;\n                    model = this_1.modelInstanceCreator(modelConstructor, item);\n                    connectedModels = traverseModel(modelName, model, this_1.schema.namespaces[namespaceName], this_1.modelInstanceCreator, this_1.getModelConstructorByModelName);\n                    keyValues = this_1.getIndexKeyValuesFromModel(model);\n                    _deleted = item._deleted;\n                    index = store.index('byPk');\n                    return [4 /*yield*/, index.getKey(this_1.canonicalKeyPath(keyValues))];\n                  case 1:\n                    key = _a.sent();\n                    if (!!_deleted) return [3 /*break*/, 3];\n                    instance = connectedModels.find(function (_a) {\n                      var instance = _a.instance;\n                      var instanceKeyValues = _this.getIndexKeyValuesFromModel(instance);\n                      return keysEqual(instanceKeyValues, keyValues);\n                    }).instance;\n                    result.push([instance, key ? OpType.UPDATE : OpType.INSERT]);\n                    return [4 /*yield*/, store.put(instance, key)];\n                  case 2:\n                    _a.sent();\n                    return [3 /*break*/, 5];\n                  case 3:\n                    result.push([item, OpType.DELETE]);\n                    if (!key) return [3 /*break*/, 5];\n                    return [4 /*yield*/, store.delete(key)];\n                  case 4:\n                    _a.sent();\n                    _a.label = 5;\n                  case 5:\n                    return [2 /*return*/];\n                }\n              });\n            };\n\n            this_1 = this;\n            _b.label = 2;\n          case 2:\n            _b.trys.push([2, 7, 8, 9]);\n            items_2 = __values(items), items_2_1 = items_2.next();\n            _b.label = 3;\n          case 3:\n            if (!!items_2_1.done) return [3 /*break*/, 6];\n            item = items_2_1.value;\n            return [5 /*yield**/, _loop_2(item)];\n          case 4:\n            _b.sent();\n            _b.label = 5;\n          case 5:\n            items_2_1 = items_2.next();\n            return [3 /*break*/, 3];\n          case 6:\n            return [3 /*break*/, 9];\n          case 7:\n            e_12_1 = _b.sent();\n            e_12 = {\n              error: e_12_1\n            };\n            return [3 /*break*/, 9];\n          case 8:\n            try {\n              if (items_2_1 && !items_2_1.done && (_a = items_2.return)) _a.call(items_2);\n            } finally {\n              if (e_12) throw e_12.error;\n            }\n            return [7 /*endfinally*/];\n          case 9:\n            return [4 /*yield*/, txn.done];\n          case 10:\n            _b.sent();\n            return [2 /*return*/, result];\n        }\n      });\n    });\n  };\n  IndexedDBAdapter.prototype.createObjectStoreForModel = function (db, namespaceName, storeName, modelName) {\n    var store = db.createObjectStore(storeName, {\n      autoIncrement: true\n    });\n    var indexes = this.schema.namespaces[namespaceName].relationships[modelName].indexes;\n    indexes.forEach(function (_a) {\n      var _b = __read(_a, 3),\n        idxName = _b[0],\n        keyPath = _b[1],\n        options = _b[2];\n      store.createIndex(idxName, keyPath, options);\n    });\n    return store;\n  };\n  return IndexedDBAdapter;\n}();\nexport default new IndexedDBAdapter();","map":{"version":3,"mappings":"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","names":["ConsoleLogger","Logger","idb","ModelPredicateCreator","ModelSortPredicateCreator","isPredicateObj","OpType","QueryOne","exhaustiveCheck","getIndex","getIndexFromAssociation","isModelConstructor","isPrivateMode","traverseModel","validatePredicate","sortCompareFunction","keysEqual","getStorename","getIndexKeys","extractPrimaryKeyValues","isSafariCompatabilityMode","logger","DB_NAME","keyArr","_this","safariCompatabilityMode","length","IndexedDBAdapter","modelConstructor","namespace","namespaceResolver","modelName","model","Object","getPrototypeOf","constructor","namespaceName","keys","schema","namespaces","name","then","isPrivate","_a","error","Promise","reject","resolve","_b","debug","storeName","modelNameArr","join","theSchema","modelInstanceCreator","getModelConstructorByModelName","sessionId","checkPrivate","setSafariCompatabilityMode","initPromise","res","rej","dbName","db","VERSION","openDB","upgrade","oldVersion","newVersion","txn","forEach","models","createObjectStoreForModel","objectStoreNames","origStore","objectStore","tmpName","_c","getNamespaceAndModelFromStorename","newStore","openCursor","cursor","_e","count","value","put","continue","deleteObjectStore","Set","map","filter","has","error_2","abort","error_1","storeOrStoreName","index","transaction","store","get","canonicalKeyPath","result","condition","getStorenameForModel","connectedModels","set","connectionStoreNames","values","item","instance","add","tx","Array","from","keyValues","getIndexKeyValuesFromModel","_get","fromDB","predicates","getPredicates","predicateObjs","type","isValid","msg","Error","connectionStoreNames_1","resItem","storeName_1","store_1","itemKeyValues","key","fromDB_1","opType","undefined","INSERT","UPDATE","modelKeyValues","getKey","push","done","srcModelName","records","relations","relationships","relationTypes","record","relations_1","relation","fieldName","targetName","targetNames","modelConstructor_1","_d","relationType","records_1","recordItem","getByFields","allPresent","every","getByField","connectionRecord","getByfield","records_2","predicate","pagination","keyPath","queryByKey","keyValueFromPredicate","hasSort","sort","hasPagination","limit","getByKey","filterOnPredicate","filtered","inMemoryPagination","getAll","all","enginePagination","load","keyValue","predicateObj","find","p","field","operator","operand","m","sortPredicates","compareFn","page","start","Math","max","end","slice","initialRecord","advance","pageResults","hasLimit","firstOrLast","FIRST","modelOrModelConstructor","deleteQueue","nameSpace","query","deleteTraverse","deleteItem","deletedModels","reduce","acc","items","concat","clear","warn","deleteQueue_1","items_1","itemKey","toString","delete","srcModel","relations_2","rel","associatedWith","models_1","hasOneIndex","recordToDelete","models_2","indexes","childrenArray","close","deleteDB","this_1","_deleted","instanceKeyValues","DELETE","items_2","createObjectStore","autoIncrement","idxName","options","createIndex"],"sources":["C:\\Users\\weida\\Desktop\\playground_CC\\node_modules\\@aws-amplify\\datastore\\src\\storage\\adapter\\IndexedDBAdapter.ts"],"sourcesContent":["import { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport * as idb from 'idb';\nimport { ModelInstanceCreator } from '../../datastore/datastore';\nimport {\n\tModelPredicateCreator,\n\tModelSortPredicateCreator,\n} from '../../predicates';\nimport {\n\tInternalSchema,\n\tisPredicateObj,\n\tModelInstanceMetadata,\n\tModelPredicate,\n\tNamespaceResolver,\n\tOpType,\n\tPaginationInput,\n\tPersistentModel,\n\tPersistentModelConstructor,\n\tPredicateObject,\n\tPredicatesGroup,\n\tQueryOne,\n\tRelationType,\n} from '../../types';\nimport {\n\texhaustiveCheck,\n\tgetIndex,\n\tgetIndexFromAssociation,\n\tisModelConstructor,\n\tisPrivateMode,\n\ttraverseModel,\n\tvalidatePredicate,\n\tsortCompareFunction,\n\tkeysEqual,\n\tgetStorename,\n\tgetIndexKeys,\n\textractPrimaryKeyValues,\n\tisSafariCompatabilityMode,\n} from '../../util';\nimport { Adapter } from './index';\n\nconst logger = new Logger('DataStore');\n\nconst DB_NAME = 'amplify-datastore';\nclass IndexedDBAdapter implements Adapter {\n\tprivate schema: InternalSchema;\n\tprivate namespaceResolver: NamespaceResolver;\n\tprivate modelInstanceCreator: ModelInstanceCreator;\n\tprivate getModelConstructorByModelName: (\n\t\tnamsespaceName: string,\n\t\tmodelName: string\n\t) => PersistentModelConstructor<any>;\n\tprivate db: idb.IDBPDatabase;\n\tprivate initPromise: Promise<void>;\n\tprivate resolve: (value?: any) => void;\n\tprivate reject: (value?: any) => void;\n\tprivate dbName: string = DB_NAME;\n\tprivate safariCompatabilityMode: boolean = false;\n\n\tprivate getStorenameForModel(\n\t\tmodelConstructor: PersistentModelConstructor<any>\n\t) {\n\t\tconst namespace = this.namespaceResolver(modelConstructor);\n\t\tconst { name: modelName } = modelConstructor;\n\n\t\treturn getStorename(namespace, modelName);\n\t}\n\n\t// Retrieves primary key values from a model\n\tprivate getIndexKeyValuesFromModel<T extends PersistentModel>(\n\t\tmodel: T\n\t): string[] {\n\t\tconst modelConstructor = Object.getPrototypeOf(model)\n\t\t\t.constructor as PersistentModelConstructor<T>;\n\t\tconst namespaceName = this.namespaceResolver(modelConstructor);\n\n\t\tconst keys = getIndexKeys(\n\t\t\tthis.schema.namespaces[namespaceName],\n\t\t\tmodelConstructor.name\n\t\t);\n\n\t\treturn extractPrimaryKeyValues(model, keys);\n\t}\n\n\tprivate async checkPrivate() {\n\t\tconst isPrivate = await isPrivateMode().then(isPrivate => {\n\t\t\treturn isPrivate;\n\t\t});\n\t\tif (isPrivate) {\n\t\t\tlogger.error(\"IndexedDB not supported in this browser's private mode\");\n\t\t\treturn Promise.reject(\n\t\t\t\t\"IndexedDB not supported in this browser's private mode\"\n\t\t\t);\n\t\t} else {\n\t\t\treturn Promise.resolve();\n\t\t}\n\t}\n\n\t/**\n\t * Whether the browser's implementation of IndexedDB is coercing single-field\n\t * indexes to a scalar key.\n\t *\n\t * If this returns `true`, we need to treat indexes containing a single field\n\t * as scalars.\n\t *\n\t * See PR description for reference:\n\t * https://github.com/aws-amplify/amplify-js/pull/10527\n\t */\n\tprivate async setSafariCompatabilityMode() {\n\t\tthis.safariCompatabilityMode = await isSafariCompatabilityMode();\n\n\t\tif (this.safariCompatabilityMode === true) {\n\t\t\tlogger.debug('IndexedDB Adapter is running in Safari Compatability Mode');\n\t\t}\n\t}\n\n\tprivate getNamespaceAndModelFromStorename(storeName: string) {\n\t\tconst [namespaceName, ...modelNameArr] = storeName.split('_');\n\t\treturn {\n\t\t\tnamespaceName,\n\t\t\tmodelName: modelNameArr.join('_'),\n\t\t};\n\t}\n\n\tasync setUp(\n\t\ttheSchema: InternalSchema,\n\t\tnamespaceResolver: NamespaceResolver,\n\t\tmodelInstanceCreator: ModelInstanceCreator,\n\t\tgetModelConstructorByModelName: (\n\t\t\tnamsespaceName: string,\n\t\t\tmodelName: string\n\t\t) => PersistentModelConstructor<any>,\n\t\tsessionId?: string\n\t) {\n\t\tawait this.checkPrivate();\n\t\tawait this.setSafariCompatabilityMode();\n\n\t\tif (!this.initPromise) {\n\t\t\tthis.initPromise = new Promise((res, rej) => {\n\t\t\t\tthis.resolve = res;\n\t\t\t\tthis.reject = rej;\n\t\t\t});\n\t\t} else {\n\t\t\tawait this.initPromise;\n\t\t}\n\t\tif (sessionId) {\n\t\t\tthis.dbName = `${DB_NAME}-${sessionId}`;\n\t\t}\n\t\tthis.schema = theSchema;\n\t\tthis.namespaceResolver = namespaceResolver;\n\t\tthis.modelInstanceCreator = modelInstanceCreator;\n\t\tthis.getModelConstructorByModelName = getModelConstructorByModelName;\n\n\t\ttry {\n\t\t\tif (!this.db) {\n\t\t\t\tconst VERSION = 3;\n\t\t\t\tthis.db = await idb.openDB(this.dbName, VERSION, {\n\t\t\t\t\tupgrade: async (db, oldVersion, newVersion, txn) => {\n\t\t\t\t\t\tif (oldVersion === 0) {\n\t\t\t\t\t\t\tObject.keys(theSchema.namespaces).forEach(namespaceName => {\n\t\t\t\t\t\t\t\tconst namespace = theSchema.namespaces[namespaceName];\n\n\t\t\t\t\t\t\t\tObject.keys(namespace.models).forEach(modelName => {\n\t\t\t\t\t\t\t\t\tconst storeName = getStorename(namespaceName, modelName);\n\t\t\t\t\t\t\t\t\tthis.createObjectStoreForModel(\n\t\t\t\t\t\t\t\t\t\tdb,\n\t\t\t\t\t\t\t\t\t\tnamespaceName,\n\t\t\t\t\t\t\t\t\t\tstoreName,\n\t\t\t\t\t\t\t\t\t\tmodelName\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ((oldVersion === 1 || oldVersion === 2) && newVersion === 3) {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tfor (const storeName of txn.objectStoreNames) {\n\t\t\t\t\t\t\t\t\tconst origStore = txn.objectStore(storeName);\n\n\t\t\t\t\t\t\t\t\t// rename original store\n\t\t\t\t\t\t\t\t\tconst tmpName = `tmp_${storeName}`;\n\t\t\t\t\t\t\t\t\torigStore.name = tmpName;\n\n\t\t\t\t\t\t\t\t\tconst { namespaceName, modelName } =\n\t\t\t\t\t\t\t\t\t\tthis.getNamespaceAndModelFromStorename(storeName);\n\n\t\t\t\t\t\t\t\t\tconst newStore = this.createObjectStoreForModel(\n\t\t\t\t\t\t\t\t\t\tdb,\n\t\t\t\t\t\t\t\t\t\tnamespaceName,\n\t\t\t\t\t\t\t\t\t\tstoreName,\n\t\t\t\t\t\t\t\t\t\tmodelName\n\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\tlet cursor = await origStore.openCursor();\n\t\t\t\t\t\t\t\t\tlet count = 0;\n\n\t\t\t\t\t\t\t\t\t// Copy data from original to new\n\t\t\t\t\t\t\t\t\twhile (cursor && cursor.value) {\n\t\t\t\t\t\t\t\t\t\t// we don't pass key, since they are all new entries in the new store\n\t\t\t\t\t\t\t\t\t\tawait newStore.put(cursor.value);\n\n\t\t\t\t\t\t\t\t\t\tcursor = await cursor.continue();\n\t\t\t\t\t\t\t\t\t\tcount++;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// delete original\n\t\t\t\t\t\t\t\t\tdb.deleteObjectStore(tmpName);\n\n\t\t\t\t\t\t\t\t\tlogger.debug(`${count} ${storeName} records migrated`);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// add new models created after IndexedDB, but before migration\n\t\t\t\t\t\t\t\t// this case may happen when a user has not opened an app for\n\t\t\t\t\t\t\t\t// some time and a new model is added during that time\n\t\t\t\t\t\t\t\tObject.keys(theSchema.namespaces).forEach(namespaceName => {\n\t\t\t\t\t\t\t\t\tconst namespace = theSchema.namespaces[namespaceName];\n\t\t\t\t\t\t\t\t\tconst objectStoreNames = new Set(txn.objectStoreNames);\n\n\t\t\t\t\t\t\t\t\tObject.keys(namespace.models)\n\t\t\t\t\t\t\t\t\t\t.map(modelName => {\n\t\t\t\t\t\t\t\t\t\t\treturn [\n\t\t\t\t\t\t\t\t\t\t\t\tmodelName,\n\t\t\t\t\t\t\t\t\t\t\t\tgetStorename(namespaceName, modelName),\n\t\t\t\t\t\t\t\t\t\t\t];\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t.filter(([, storeName]) => !objectStoreNames.has(storeName))\n\t\t\t\t\t\t\t\t\t\t.forEach(([modelName, storeName]) => {\n\t\t\t\t\t\t\t\t\t\t\tthis.createObjectStoreForModel(\n\t\t\t\t\t\t\t\t\t\t\t\tdb,\n\t\t\t\t\t\t\t\t\t\t\t\tnamespaceName,\n\t\t\t\t\t\t\t\t\t\t\t\tstoreName,\n\t\t\t\t\t\t\t\t\t\t\t\tmodelName\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\t\tlogger.error('Error migrating IndexedDB data', error);\n\t\t\t\t\t\t\t\ttxn.abort();\n\t\t\t\t\t\t\t\tthrow error;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t});\n\n\t\t\t\tthis.resolve();\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis.reject(error);\n\t\t}\n\t}\n\n\tprivate async _get<T>(\n\t\tstoreOrStoreName: idb.IDBPObjectStore | string,\n\t\tkeyArr: string[]\n\t): Promise<T> {\n\t\tlet index: idb.IDBPIndex;\n\n\t\tif (typeof storeOrStoreName === 'string') {\n\t\t\tconst storeName = storeOrStoreName;\n\t\t\tindex = this.db.transaction(storeName, 'readonly').store.index('byPk');\n\t\t} else {\n\t\t\tconst store = storeOrStoreName;\n\t\t\tindex = store.index('byPk');\n\t\t}\n\n\t\tconst result = await index.get(this.canonicalKeyPath(keyArr));\n\n\t\treturn result;\n\t}\n\n\tasync save<T extends PersistentModel>(\n\t\tmodel: T,\n\t\tcondition?: ModelPredicate<T>\n\t): Promise<[T, OpType.INSERT | OpType.UPDATE][]> {\n\t\tawait this.checkPrivate();\n\t\tconst modelConstructor = Object.getPrototypeOf(model)\n\t\t\t.constructor as PersistentModelConstructor<T>;\n\t\tconst storeName = this.getStorenameForModel(modelConstructor);\n\t\tconst namespaceName = this.namespaceResolver(modelConstructor);\n\n\t\tconst connectedModels = traverseModel(\n\t\t\tmodelConstructor.name,\n\t\t\tmodel,\n\t\t\tthis.schema.namespaces[namespaceName],\n\t\t\tthis.modelInstanceCreator,\n\t\t\tthis.getModelConstructorByModelName\n\t\t);\n\n\t\tconst set = new Set<string>();\n\t\tconst connectionStoreNames = Object.values(connectedModels).map(\n\t\t\t({ modelName, item, instance }) => {\n\t\t\t\tconst storeName = getStorename(namespaceName, modelName);\n\t\t\t\tset.add(storeName);\n\t\t\t\tconst keys = getIndexKeys(\n\t\t\t\t\tthis.schema.namespaces[namespaceName],\n\t\t\t\t\tmodelName\n\t\t\t\t);\n\t\t\t\treturn { storeName, item, instance, keys };\n\t\t\t}\n\t\t);\n\n\t\tconst tx = this.db.transaction(\n\t\t\t[storeName, ...Array.from(set.values())],\n\t\t\t'readwrite'\n\t\t);\n\t\tconst store = tx.objectStore(storeName);\n\n\t\tconst keyValues = this.getIndexKeyValuesFromModel(model);\n\n\t\tconst fromDB = await this._get(store, keyValues);\n\n\t\tif (condition && fromDB) {\n\t\t\tconst predicates = ModelPredicateCreator.getPredicates(condition);\n\t\t\tconst { predicates: predicateObjs, type } = predicates;\n\n\t\t\tconst isValid = validatePredicate(fromDB, type, predicateObjs);\n\n\t\t\tif (!isValid) {\n\t\t\t\tconst msg = 'Conditional update failed';\n\t\t\t\tlogger.error(msg, { model: fromDB, condition: predicateObjs });\n\n\t\t\t\tthrow new Error(msg);\n\t\t\t}\n\t\t}\n\n\t\tconst result: [T, OpType.INSERT | OpType.UPDATE][] = [];\n\n\t\tfor await (const resItem of connectionStoreNames) {\n\t\t\tconst { storeName, item, instance, keys } = resItem;\n\t\t\tconst store = tx.objectStore(storeName);\n\n\t\t\tconst itemKeyValues = keys.map(key => {\n\t\t\t\tconst value = item[key];\n\t\t\t\treturn value;\n\t\t\t});\n\n\t\t\tconst fromDB = <T>await this._get(store, itemKeyValues);\n\t\t\tconst opType: OpType =\n\t\t\t\tfromDB === undefined ? OpType.INSERT : OpType.UPDATE;\n\n\t\t\tconst modelKeyValues = this.getIndexKeyValuesFromModel(model);\n\n\t\t\t// Even if the parent is an INSERT, the child might not be, so we need to get its key\n\t\t\tif (\n\t\t\t\tkeysEqual(itemKeyValues, modelKeyValues) ||\n\t\t\t\topType === OpType.INSERT\n\t\t\t) {\n\t\t\t\tconst key = await store\n\t\t\t\t\t.index('byPk')\n\t\t\t\t\t.getKey(this.canonicalKeyPath(itemKeyValues));\n\t\t\t\tawait store.put(item, key);\n\n\t\t\t\tresult.push([instance, opType]);\n\t\t\t}\n\t\t}\n\n\t\tawait tx.done;\n\n\t\treturn result;\n\t}\n\n\tprivate async load<T>(\n\t\tnamespaceName: string,\n\t\tsrcModelName: string,\n\t\trecords: T[]\n\t): Promise<T[]> {\n\t\tconst namespace = this.schema.namespaces[namespaceName];\n\t\tconst relations = namespace.relationships[srcModelName].relationTypes;\n\t\tconst connectionStoreNames = relations.map(({ modelName }) => {\n\t\t\treturn getStorename(namespaceName, modelName);\n\t\t});\n\t\tconst modelConstructor = this.getModelConstructorByModelName(\n\t\t\tnamespaceName,\n\t\t\tsrcModelName\n\t\t);\n\n\t\tif (connectionStoreNames.length === 0) {\n\t\t\treturn records.map(record =>\n\t\t\t\tthis.modelInstanceCreator(modelConstructor, record)\n\t\t\t);\n\t\t}\n\n\t\tconst tx = this.db.transaction([...connectionStoreNames], 'readonly');\n\n\t\tfor await (const relation of relations) {\n\t\t\t// target name, metadata, set by init\n\t\t\tconst { fieldName, modelName, targetName, targetNames } = relation;\n\t\t\tconst storeName = getStorename(namespaceName, modelName);\n\t\t\tconst store = tx.objectStore(storeName);\n\t\t\tconst modelConstructor = this.getModelConstructorByModelName(\n\t\t\t\tnamespaceName,\n\t\t\t\tmodelName\n\t\t\t);\n\n\t\t\tswitch (relation.relationType) {\n\t\t\t\tcase 'HAS_ONE':\n\t\t\t\t\tfor await (const recordItem of records) {\n\t\t\t\t\t\t// POST CPK codegen changes:\n\t\t\t\t\t\tif (targetNames?.length) {\n\t\t\t\t\t\t\tlet getByFields = [];\n\t\t\t\t\t\t\tlet allPresent;\n\t\t\t\t\t\t\t// iterate through all targetnames to make sure they are all present in the recordItem\n\t\t\t\t\t\t\tallPresent = targetNames.every(targetName => {\n\t\t\t\t\t\t\t\treturn recordItem[targetName] != null;\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tif (!allPresent) {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgetByFields = targetNames as any;\n\n\t\t\t\t\t\t\t// keys are the key values\n\t\t\t\t\t\t\tconst keys = getByFields.map(\n\t\t\t\t\t\t\t\tgetByField => recordItem[getByField]\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tconst connectionRecord = await this._get(store, keys);\n\n\t\t\t\t\t\t\trecordItem[fieldName] =\n\t\t\t\t\t\t\t\tconnectionRecord &&\n\t\t\t\t\t\t\t\tthis.modelInstanceCreator(modelConstructor, connectionRecord);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// If single target name, using old codegen\n\t\t\t\t\t\t\tconst getByfield = recordItem[targetName]\n\t\t\t\t\t\t\t\t? targetName\n\t\t\t\t\t\t\t\t: fieldName;\n\n\t\t\t\t\t\t\t// We break here, because the recordItem does not have 'team', the `getByField`\n\t\t\t\t\t\t\t// extract the keys on the related model.\n\t\t\t\t\t\t\tif (!recordItem[getByfield]) break;\n\n\t\t\t\t\t\t\tconst key = [recordItem[getByfield]];\n\n\t\t\t\t\t\t\tconst connectionRecord = await this._get(store, key);\n\n\t\t\t\t\t\t\trecordItem[fieldName] =\n\t\t\t\t\t\t\t\tconnectionRecord &&\n\t\t\t\t\t\t\t\tthis.modelInstanceCreator(modelConstructor, connectionRecord);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'BELONGS_TO':\n\t\t\t\t\tfor await (const recordItem of records) {\n\t\t\t\t\t\t// POST CPK codegen changes:\n\t\t\t\t\t\tif (targetNames?.length) {\n\t\t\t\t\t\t\tlet allPresent;\n\t\t\t\t\t\t\t// iterate through all targetnames to make sure they are all present in the recordItem\n\t\t\t\t\t\t\tallPresent = targetNames.every(targetName => {\n\t\t\t\t\t\t\t\treturn recordItem[targetName] != null;\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t// If not present, there is not yet a connected record\n\t\t\t\t\t\t\tif (!allPresent) {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst keys = targetNames.map(\n\t\t\t\t\t\t\t\ttargetName => recordItem[targetName]\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Retrieve the connected record\n\t\t\t\t\t\t\tconst connectionRecord = await this._get(store, keys);\n\n\t\t\t\t\t\t\trecordItem[fieldName] =\n\t\t\t\t\t\t\t\tconnectionRecord &&\n\t\t\t\t\t\t\t\tthis.modelInstanceCreator(modelConstructor, connectionRecord);\n\n\t\t\t\t\t\t\ttargetNames?.map(targetName => {\n\t\t\t\t\t\t\t\tdelete recordItem[targetName];\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else if (recordItem[targetName]) {\n\t\t\t\t\t\t\tconst key = [recordItem[targetName]];\n\n\t\t\t\t\t\t\tconst connectionRecord = await this._get(store, key);\n\n\t\t\t\t\t\t\trecordItem[fieldName] =\n\t\t\t\t\t\t\t\tconnectionRecord &&\n\t\t\t\t\t\t\t\tthis.modelInstanceCreator(modelConstructor, connectionRecord);\n\t\t\t\t\t\t\tdelete recordItem[targetName];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'HAS_MANY':\n\t\t\t\t\t// TODO: Lazy loading\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\texhaustiveCheck(relation.relationType);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn records.map(record =>\n\t\t\tthis.modelInstanceCreator(modelConstructor, record)\n\t\t);\n\t}\n\n\tasync query<T extends PersistentModel>(\n\t\tmodelConstructor: PersistentModelConstructor<T>,\n\t\tpredicate?: ModelPredicate<T>,\n\t\tpagination?: PaginationInput<T>\n\t): Promise<T[]> {\n\t\tawait this.checkPrivate();\n\t\tconst storeName = this.getStorenameForModel(modelConstructor);\n\t\tconst namespaceName = this.namespaceResolver(modelConstructor);\n\n\t\tconst predicates =\n\t\t\tpredicate && ModelPredicateCreator.getPredicates(predicate);\n\t\tconst keyPath = getIndexKeys(\n\t\t\tthis.schema.namespaces[namespaceName],\n\t\t\tmodelConstructor.name\n\t\t);\n\t\tconst queryByKey =\n\t\t\tpredicates && this.keyValueFromPredicate(predicates, keyPath);\n\n\t\tconst hasSort = pagination && pagination.sort;\n\t\tconst hasPagination = pagination && pagination.limit;\n\n\t\tconst records: T[] = await (async () => {\n\t\t\tif (queryByKey) {\n\t\t\t\tconst record = await this.getByKey(storeName, queryByKey);\n\t\t\t\treturn record ? [record] : [];\n\t\t\t}\n\n\t\t\tif (predicates) {\n\t\t\t\tconst filtered = await this.filterOnPredicate(storeName, predicates);\n\t\t\t\treturn this.inMemoryPagination(filtered, pagination);\n\t\t\t}\n\n\t\t\tif (hasSort) {\n\t\t\t\tconst all = await this.getAll(storeName);\n\t\t\t\treturn this.inMemoryPagination(all, pagination);\n\t\t\t}\n\n\t\t\tif (hasPagination) {\n\t\t\t\treturn this.enginePagination(storeName, pagination);\n\t\t\t}\n\n\t\t\treturn this.getAll(storeName);\n\t\t})();\n\n\t\treturn await this.load(namespaceName, modelConstructor.name, records);\n\t}\n\n\tprivate async getByKey<T extends PersistentModel>(\n\t\tstoreName: string,\n\t\tkeyValue: string[]\n\t): Promise<T> {\n\t\tconst record = <T>await this._get(storeName, keyValue);\n\t\treturn record;\n\t}\n\n\tprivate async getAll<T extends PersistentModel>(\n\t\tstoreName: string\n\t): Promise<T[]> {\n\t\treturn await this.db.getAll(storeName);\n\t}\n\n\tprivate keyValueFromPredicate<T extends PersistentModel>(\n\t\tpredicates: PredicatesGroup<T>,\n\t\tkeyPath: string[]\n\t): string[] | undefined {\n\t\tconst { predicates: predicateObjs } = predicates;\n\n\t\tif (predicateObjs.length !== keyPath.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst keyValues = [];\n\n\t\tfor (const key of keyPath) {\n\t\t\tconst predicateObj = predicateObjs.find(\n\t\t\t\tp => isPredicateObj(p) && p.field === key && p.operator === 'eq'\n\t\t\t) as PredicateObject<T>;\n\n\t\t\tpredicateObj && keyValues.push(predicateObj.operand);\n\t\t}\n\n\t\treturn keyValues.length === keyPath.length ? keyValues : undefined;\n\t}\n\n\tprivate async filterOnPredicate<T extends PersistentModel>(\n\t\tstoreName: string,\n\t\tpredicates: PredicatesGroup<T>\n\t) {\n\t\tconst { predicates: predicateObjs, type } = predicates;\n\n\t\tconst all = <T[]>await this.getAll(storeName);\n\n\t\tconst filtered = predicateObjs\n\t\t\t? all.filter(m => validatePredicate(m, type, predicateObjs))\n\t\t\t: all;\n\n\t\treturn filtered;\n\t}\n\n\tprivate inMemoryPagination<T extends PersistentModel>(\n\t\trecords: T[],\n\t\tpagination?: PaginationInput<T>\n\t): T[] {\n\t\tif (pagination && records.length > 1) {\n\t\t\tif (pagination.sort) {\n\t\t\t\tconst sortPredicates = ModelSortPredicateCreator.getPredicates(\n\t\t\t\t\tpagination.sort\n\t\t\t\t);\n\n\t\t\t\tif (sortPredicates.length) {\n\t\t\t\t\tconst compareFn = sortCompareFunction(sortPredicates);\n\t\t\t\t\trecords.sort(compareFn);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst { page = 0, limit = 0 } = pagination;\n\t\t\tconst start = Math.max(0, page * limit) || 0;\n\n\t\t\tconst end = limit > 0 ? start + limit : records.length;\n\n\t\t\treturn records.slice(start, end);\n\t\t}\n\t\treturn records;\n\t}\n\n\tprivate async enginePagination<T extends PersistentModel>(\n\t\tstoreName: string,\n\t\tpagination?: PaginationInput<T>\n\t): Promise<T[]> {\n\t\tlet result: T[];\n\n\t\tif (pagination) {\n\t\t\tconst { page = 0, limit = 0 } = pagination;\n\t\t\tconst initialRecord = Math.max(0, page * limit) || 0;\n\n\t\t\tlet cursor = await this.db\n\t\t\t\t.transaction(storeName)\n\t\t\t\t.objectStore(storeName)\n\t\t\t\t.openCursor();\n\n\t\t\tif (cursor && initialRecord > 0) {\n\t\t\t\tawait cursor.advance(initialRecord);\n\t\t\t}\n\n\t\t\tconst pageResults: T[] = [];\n\t\t\tconst hasLimit = typeof limit === 'number' && limit > 0;\n\n\t\t\twhile (cursor && cursor.value) {\n\t\t\t\tpageResults.push(cursor.value);\n\n\t\t\t\tif (hasLimit && pageResults.length === limit) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tcursor = await cursor.continue();\n\t\t\t}\n\n\t\t\tresult = pageResults;\n\t\t} else {\n\t\t\tresult = <T[]>await this.db.getAll(storeName);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tasync queryOne<T extends PersistentModel>(\n\t\tmodelConstructor: PersistentModelConstructor<T>,\n\t\tfirstOrLast: QueryOne = QueryOne.FIRST\n\t): Promise<T | undefined> {\n\t\tawait this.checkPrivate();\n\t\tconst storeName = this.getStorenameForModel(modelConstructor);\n\n\t\tconst cursor = await this.db\n\t\t\t.transaction([storeName], 'readonly')\n\t\t\t.objectStore(storeName)\n\t\t\t.openCursor(undefined, firstOrLast === QueryOne.FIRST ? 'next' : 'prev');\n\n\t\tconst result = cursor ? <T>cursor.value : undefined;\n\n\t\treturn result && this.modelInstanceCreator(modelConstructor, result);\n\t}\n\n\tasync delete<T extends PersistentModel>(\n\t\tmodelOrModelConstructor: T | PersistentModelConstructor<T>,\n\t\tcondition?: ModelPredicate<T>\n\t): Promise<[T[], T[]]> {\n\t\tawait this.checkPrivate();\n\t\tconst deleteQueue: { storeName: string; items: T[] }[] = [];\n\n\t\tif (isModelConstructor(modelOrModelConstructor)) {\n\t\t\tconst modelConstructor = modelOrModelConstructor;\n\t\t\tconst nameSpace = this.namespaceResolver(modelConstructor);\n\n\t\t\tconst storeName = this.getStorenameForModel(modelConstructor);\n\n\t\t\tconst models = await this.query(modelConstructor, condition);\n\t\t\tconst relations =\n\t\t\t\tthis.schema.namespaces[nameSpace].relationships[modelConstructor.name]\n\t\t\t\t\t.relationTypes;\n\n\t\t\tif (condition !== undefined) {\n\t\t\t\tawait this.deleteTraverse(\n\t\t\t\t\trelations,\n\t\t\t\t\tmodels,\n\t\t\t\t\tmodelConstructor.name,\n\t\t\t\t\tnameSpace,\n\t\t\t\t\tdeleteQueue\n\t\t\t\t);\n\n\t\t\t\tawait this.deleteItem(deleteQueue);\n\n\t\t\t\tconst deletedModels = deleteQueue.reduce(\n\t\t\t\t\t(acc, { items }) => acc.concat(items),\n\t\t\t\t\t<T[]>[]\n\t\t\t\t);\n\n\t\t\t\treturn [models, deletedModels];\n\t\t\t} else {\n\t\t\t\tawait this.deleteTraverse(\n\t\t\t\t\trelations,\n\t\t\t\t\tmodels,\n\t\t\t\t\tmodelConstructor.name,\n\t\t\t\t\tnameSpace,\n\t\t\t\t\tdeleteQueue\n\t\t\t\t);\n\n\t\t\t\t// Delete all\n\t\t\t\tawait this.db\n\t\t\t\t\t.transaction([storeName], 'readwrite')\n\t\t\t\t\t.objectStore(storeName)\n\t\t\t\t\t.clear();\n\n\t\t\t\tconst deletedModels = deleteQueue.reduce(\n\t\t\t\t\t(acc, { items }) => acc.concat(items),\n\t\t\t\t\t<T[]>[]\n\t\t\t\t);\n\n\t\t\t\treturn [models, deletedModels];\n\t\t\t}\n\t\t} else {\n\t\t\tconst model = modelOrModelConstructor;\n\n\t\t\tconst modelConstructor = Object.getPrototypeOf(model)\n\t\t\t\t.constructor as PersistentModelConstructor<T>;\n\t\t\tconst namespaceName = this.namespaceResolver(modelConstructor);\n\n\t\t\tconst storeName = this.getStorenameForModel(modelConstructor);\n\n\t\t\tif (condition) {\n\t\t\t\tconst tx = this.db.transaction([storeName], 'readwrite');\n\t\t\t\tconst store = tx.objectStore(storeName);\n\t\t\t\tconst keyValues = this.getIndexKeyValuesFromModel(model);\n\n\t\t\t\tconst fromDB = await this._get(store, keyValues);\n\n\t\t\t\tif (fromDB === undefined) {\n\t\t\t\t\tconst msg = 'Model instance not found in storage';\n\t\t\t\t\tlogger.warn(msg, { model });\n\n\t\t\t\t\treturn [[model], []];\n\t\t\t\t}\n\n\t\t\t\tconst predicates = ModelPredicateCreator.getPredicates(condition);\n\t\t\t\tconst { predicates: predicateObjs, type } = predicates;\n\n\t\t\t\tconst isValid = validatePredicate(fromDB, type, predicateObjs);\n\n\t\t\t\tif (!isValid) {\n\t\t\t\t\tconst msg = 'Conditional update failed';\n\t\t\t\t\tlogger.error(msg, { model: fromDB, condition: predicateObjs });\n\n\t\t\t\t\tthrow new Error(msg);\n\t\t\t\t}\n\t\t\t\tawait tx.done;\n\n\t\t\t\tconst relations =\n\t\t\t\t\tthis.schema.namespaces[namespaceName].relationships[\n\t\t\t\t\t\tmodelConstructor.name\n\t\t\t\t\t].relationTypes;\n\n\t\t\t\tawait this.deleteTraverse(\n\t\t\t\t\trelations,\n\t\t\t\t\t[model],\n\t\t\t\t\tmodelConstructor.name,\n\t\t\t\t\tnamespaceName,\n\t\t\t\t\tdeleteQueue\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tconst relations =\n\t\t\t\t\tthis.schema.namespaces[namespaceName].relationships[\n\t\t\t\t\t\tmodelConstructor.name\n\t\t\t\t\t].relationTypes;\n\n\t\t\t\tawait this.deleteTraverse(\n\t\t\t\t\trelations,\n\t\t\t\t\t[model],\n\t\t\t\t\tmodelConstructor.name,\n\t\t\t\t\tnamespaceName,\n\t\t\t\t\tdeleteQueue\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tawait this.deleteItem(deleteQueue);\n\n\t\t\tconst deletedModels = deleteQueue.reduce(\n\t\t\t\t(acc, { items }) => acc.concat(items),\n\t\t\t\t<T[]>[]\n\t\t\t);\n\n\t\t\treturn [[model], deletedModels];\n\t\t}\n\t}\n\n\tprivate async deleteItem<T extends PersistentModel>(\n\t\tdeleteQueue?: {\n\t\t\tstoreName: string;\n\t\t\titems: T[] | IDBValidKey[];\n\t\t}[]\n\t) {\n\t\tconst connectionStoreNames = deleteQueue.map(({ storeName }) => {\n\t\t\treturn storeName;\n\t\t});\n\n\t\tconst tx = this.db.transaction([...connectionStoreNames], 'readwrite');\n\t\tfor await (const deleteItem of deleteQueue) {\n\t\t\tconst { storeName, items } = deleteItem;\n\t\t\tconst store = tx.objectStore(storeName);\n\n\t\t\tfor await (const item of items) {\n\t\t\t\tif (item) {\n\t\t\t\t\tlet key: IDBValidKey;\n\n\t\t\t\t\tif (typeof item === 'object') {\n\t\t\t\t\t\tconst keyValues = this.getIndexKeyValuesFromModel(item as T);\n\t\t\t\t\t\tkey = await store\n\t\t\t\t\t\t\t.index('byPk')\n\t\t\t\t\t\t\t.getKey(this.canonicalKeyPath(keyValues));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst itemKey = item.toString();\n\t\t\t\t\t\tkey = await store.index('byPk').getKey(itemKey);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (key !== undefined) {\n\t\t\t\t\t\tawait store.delete(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async deleteTraverse<T extends PersistentModel>(\n\t\trelations: RelationType[],\n\t\tmodels: T[],\n\t\tsrcModel: string,\n\t\tnameSpace: string,\n\t\tdeleteQueue: { storeName: string; items: T[] }[]\n\t): Promise<void> {\n\t\tfor await (const rel of relations) {\n\t\t\tconst {\n\t\t\t\trelationType,\n\t\t\t\tmodelName,\n\t\t\t\ttargetName,\n\t\t\t\ttargetNames,\n\t\t\t\tassociatedWith,\n\t\t\t} = rel;\n\n\t\t\tconst storeName = getStorename(nameSpace, modelName);\n\n\t\t\tswitch (relationType) {\n\t\t\t\tcase 'HAS_ONE':\n\t\t\t\t\tfor await (const model of models) {\n\t\t\t\t\t\tconst hasOneIndex = 'byPk';\n\n\t\t\t\t\t\tif (targetNames?.length) {\n\t\t\t\t\t\t\t// CPK codegen\n\t\t\t\t\t\t\tconst values = targetNames.map(targetName => model[targetName]);\n\n\t\t\t\t\t\t\tif (values.length === 0) break;\n\n\t\t\t\t\t\t\tconst recordToDelete = <T>(\n\t\t\t\t\t\t\t\tawait this.db\n\t\t\t\t\t\t\t\t\t.transaction(storeName, 'readwrite')\n\t\t\t\t\t\t\t\t\t.objectStore(storeName)\n\t\t\t\t\t\t\t\t\t.index(hasOneIndex)\n\t\t\t\t\t\t\t\t\t.get(this.canonicalKeyPath(values))\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tawait this.deleteTraverse(\n\t\t\t\t\t\t\t\tthis.schema.namespaces[nameSpace].relationships[modelName]\n\t\t\t\t\t\t\t\t\t.relationTypes,\n\t\t\t\t\t\t\t\trecordToDelete ? [recordToDelete] : [],\n\t\t\t\t\t\t\t\tmodelName,\n\t\t\t\t\t\t\t\tnameSpace,\n\t\t\t\t\t\t\t\tdeleteQueue\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// PRE-CPK codegen\n\t\t\t\t\t\t\tlet index;\n\t\t\t\t\t\t\tlet values: string[];\n\n\t\t\t\t\t\t\tif (targetName && targetName in model) {\n\t\t\t\t\t\t\t\tindex = hasOneIndex;\n\t\t\t\t\t\t\t\tconst value = model[targetName];\n\t\t\t\t\t\t\t\tvalues = [value];\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// backwards compatability for older versions of codegen that did not emit targetName for HAS_ONE relations\n\t\t\t\t\t\t\t\t// TODO: can we deprecate this? it's been ~2 years since codegen started including targetName for HAS_ONE\n\t\t\t\t\t\t\t\t// If we deprecate, we'll need to re-gen the MIPR in __tests__/schema.ts > newSchema\n\t\t\t\t\t\t\t\t// otherwise some unit tests will fail\n\t\t\t\t\t\t\t\tindex = getIndex(\n\t\t\t\t\t\t\t\t\tthis.schema.namespaces[nameSpace].relationships[modelName]\n\t\t\t\t\t\t\t\t\t\t.relationTypes,\n\t\t\t\t\t\t\t\t\tsrcModel\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tvalues = this.getIndexKeyValuesFromModel(model);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (!values || !index) break;\n\n\t\t\t\t\t\t\tconst recordToDelete = <T>(\n\t\t\t\t\t\t\t\tawait this.db\n\t\t\t\t\t\t\t\t\t.transaction(storeName, 'readwrite')\n\t\t\t\t\t\t\t\t\t.objectStore(storeName)\n\t\t\t\t\t\t\t\t\t.index(index)\n\t\t\t\t\t\t\t\t\t.get(this.canonicalKeyPath(values))\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tawait this.deleteTraverse(\n\t\t\t\t\t\t\t\tthis.schema.namespaces[nameSpace].relationships[modelName]\n\t\t\t\t\t\t\t\t\t.relationTypes,\n\t\t\t\t\t\t\t\trecordToDelete ? [recordToDelete] : [],\n\t\t\t\t\t\t\t\tmodelName,\n\t\t\t\t\t\t\t\tnameSpace,\n\t\t\t\t\t\t\t\tdeleteQueue\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'HAS_MANY':\n\t\t\t\t\tfor await (const model of models) {\n\t\t\t\t\t\tconst index =\n\t\t\t\t\t\t\t// explicit bi-directional @hasMany and @manyToMany\n\t\t\t\t\t\t\tgetIndex(\n\t\t\t\t\t\t\t\tthis.schema.namespaces[nameSpace].relationships[modelName]\n\t\t\t\t\t\t\t\t\t.relationTypes,\n\t\t\t\t\t\t\t\tsrcModel\n\t\t\t\t\t\t\t) ||\n\t\t\t\t\t\t\t// uni and/or implicit @hasMany\n\t\t\t\t\t\t\tgetIndexFromAssociation(\n\t\t\t\t\t\t\t\tthis.schema.namespaces[nameSpace].relationships[modelName]\n\t\t\t\t\t\t\t\t\t.indexes,\n\t\t\t\t\t\t\t\tassociatedWith\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\tconst keyValues = this.getIndexKeyValuesFromModel(model);\n\n\t\t\t\t\t\tconst childrenArray = await this.db\n\t\t\t\t\t\t\t.transaction(storeName, 'readwrite')\n\t\t\t\t\t\t\t.objectStore(storeName)\n\t\t\t\t\t\t\t.index(index as string)\n\t\t\t\t\t\t\t.getAll(this.canonicalKeyPath(keyValues));\n\n\t\t\t\t\t\tawait this.deleteTraverse(\n\t\t\t\t\t\t\tthis.schema.namespaces[nameSpace].relationships[modelName]\n\t\t\t\t\t\t\t\t.relationTypes,\n\t\t\t\t\t\t\tchildrenArray,\n\t\t\t\t\t\t\tmodelName,\n\t\t\t\t\t\t\tnameSpace,\n\t\t\t\t\t\t\tdeleteQueue\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'BELONGS_TO':\n\t\t\t\t\t// Intentionally blank\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\texhaustiveCheck(relationType);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tdeleteQueue.push({\n\t\t\tstoreName: getStorename(nameSpace, srcModel),\n\t\t\titems: models.map(record =>\n\t\t\t\tthis.modelInstanceCreator(\n\t\t\t\t\tthis.getModelConstructorByModelName(nameSpace, srcModel),\n\t\t\t\t\trecord\n\t\t\t\t)\n\t\t\t),\n\t\t});\n\t}\n\n\tasync clear(): Promise<void> {\n\t\tawait this.checkPrivate();\n\n\t\tthis.db?.close();\n\n\t\tawait idb.deleteDB(this.dbName);\n\n\t\tthis.db = undefined;\n\t\tthis.initPromise = undefined;\n\t}\n\n\tasync batchSave<T extends PersistentModel>(\n\t\tmodelConstructor: PersistentModelConstructor<any>,\n\t\titems: ModelInstanceMetadata[]\n\t): Promise<[T, OpType][]> {\n\t\tif (items.length === 0) {\n\t\t\treturn [];\n\t\t}\n\n\t\tawait this.checkPrivate();\n\n\t\tconst result: [T, OpType][] = [];\n\n\t\tconst storeName = this.getStorenameForModel(modelConstructor);\n\n\t\tconst txn = this.db.transaction(storeName, 'readwrite');\n\t\tconst store = txn.store;\n\n\t\tfor (const item of items) {\n\t\t\tconst namespaceName = this.namespaceResolver(modelConstructor);\n\t\t\tconst modelName = modelConstructor.name;\n\t\t\tconst model = this.modelInstanceCreator(modelConstructor, item);\n\n\t\t\tconst connectedModels = traverseModel(\n\t\t\t\tmodelName,\n\t\t\t\tmodel,\n\t\t\t\tthis.schema.namespaces[namespaceName],\n\t\t\t\tthis.modelInstanceCreator,\n\t\t\t\tthis.getModelConstructorByModelName\n\t\t\t);\n\n\t\t\tconst keyValues = this.getIndexKeyValuesFromModel(model);\n\t\t\tconst { _deleted } = item;\n\n\t\t\tconst index = store.index('byPk');\n\n\t\t\tconst key = await index.getKey(this.canonicalKeyPath(keyValues));\n\n\t\t\tif (!_deleted) {\n\t\t\t\tconst { instance } = connectedModels.find(({ instance }) => {\n\t\t\t\t\tconst instanceKeyValues = this.getIndexKeyValuesFromModel(instance);\n\t\t\t\t\treturn keysEqual(instanceKeyValues, keyValues);\n\t\t\t\t});\n\n\t\t\t\tresult.push([\n\t\t\t\t\t<T>(<unknown>instance),\n\t\t\t\t\tkey ? OpType.UPDATE : OpType.INSERT,\n\t\t\t\t]);\n\t\t\t\tawait store.put(instance, key);\n\t\t\t} else {\n\t\t\t\tresult.push([<T>(<unknown>item), OpType.DELETE]);\n\n\t\t\t\tif (key) {\n\t\t\t\t\tawait store.delete(key);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tawait txn.done;\n\n\t\treturn result;\n\t}\n\n\tprivate createObjectStoreForModel(\n\t\tdb: idb.IDBPDatabase,\n\t\tnamespaceName: string,\n\t\tstoreName: string,\n\t\tmodelName: string\n\t) {\n\t\tconst store = db.createObjectStore(storeName, {\n\t\t\tautoIncrement: true,\n\t\t});\n\n\t\tconst { indexes } =\n\t\t\tthis.schema.namespaces[namespaceName].relationships[modelName];\n\n\t\tindexes.forEach(([idxName, keyPath, options]) => {\n\t\t\tstore.createIndex(idxName, keyPath, options);\n\t\t});\n\n\t\treturn store;\n\t}\n\n\t/**\n\t * Checks the given path against the browser's IndexedDB implementation for\n\t * necessary compatibility transformations, applying those transforms if needed.\n\t *\n\t * @param `keyArr` strings to compatibilize for browser-indexeddb index operations\n\t * @returns An array or string, depending on and given key,\n\t * that is ensured to be compatible with the IndexedDB implementation's nuances.\n\t */\n\tprivate canonicalKeyPath = (keyArr: string[]) => {\n\t\tif (this.safariCompatabilityMode) {\n\t\t\treturn keyArr.length > 1 ? keyArr : keyArr[0];\n\t\t}\n\t\treturn keyArr;\n\t};\n}\n\nexport default new IndexedDBAdapter();\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}