{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\n/*\n * Copyright 2017-2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nimport Observable from 'zen-observable-ts';\nimport { GraphQLError } from 'graphql';\nimport * as url from 'url';\nimport { v4 as uuid } from 'uuid';\nimport { Buffer } from 'buffer';\nimport { Logger, Credentials, Signer, Hub, Constants, USER_AGENT_HEADER, jitteredExponentialRetry, NonRetryableError } from '@aws-amplify/core';\nimport Cache from '@aws-amplify/cache';\nimport Auth from '@aws-amplify/auth';\nimport { AbstractPubSubProvider } from '../PubSubProvider';\nimport { CONTROL_MSG } from '../../types/PubSub';\nimport { AMPLIFY_SYMBOL, AWS_APPSYNC_REALTIME_HEADERS, CONNECTION_INIT_TIMEOUT, DEFAULT_KEEP_ALIVE_TIMEOUT, DEFAULT_KEEP_ALIVE_ALERT_TIMEOUT, MAX_DELAY_MS, MESSAGE_TYPES, NON_RETRYABLE_CODES, SOCKET_STATUS, START_ACK_TIMEOUT, SUBSCRIPTION_STATUS, CONNECTION_STATE_CHANGE } from '../constants';\nimport { ConnectionStateMonitor, CONNECTION_CHANGE } from '../../utils/ConnectionStateMonitor';\nvar logger = new Logger('AWSAppSyncRealTimeProvider');\nvar dispatchApiEvent = function (event, data, message) {\n  Hub.dispatch('api', {\n    event: event,\n    data: data,\n    message: message\n  }, 'PubSub', AMPLIFY_SYMBOL);\n};\nvar standardDomainPattern = /^https:\\/\\/\\w{26}\\.appsync\\-api\\.\\w{2}(?:(?:\\-\\w{2,})+)\\-\\d\\.amazonaws.com\\/graphql$/i;\nvar customDomainPath = '/realtime';\nvar AWSAppSyncRealTimeProvider = /** @class */function (_super) {\n  __extends(AWSAppSyncRealTimeProvider, _super);\n  function AWSAppSyncRealTimeProvider(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    var _this = _super.call(this, options) || this;\n    _this.socketStatus = SOCKET_STATUS.CLOSED;\n    _this.keepAliveTimeout = DEFAULT_KEEP_ALIVE_TIMEOUT;\n    _this.subscriptionObserverMap = new Map();\n    _this.promiseArray = [];\n    _this.connectionStateMonitor = new ConnectionStateMonitor();\n    // Monitor the connection state and pass changes along to Hub\n    _this.connectionStateMonitor.connectionStateObservable.subscribe(function (ConnectionState) {\n      dispatchApiEvent(CONNECTION_STATE_CHANGE, {\n        provider: _this,\n        connectionState: ConnectionState\n      }, \"Connection state is \" + ConnectionState);\n    });\n    return _this;\n  }\n  AWSAppSyncRealTimeProvider.prototype.getNewWebSocket = function (url, protocol) {\n    return new WebSocket(url, protocol);\n  };\n  AWSAppSyncRealTimeProvider.prototype.getProviderName = function () {\n    return 'AWSAppSyncRealTimeProvider';\n  };\n  AWSAppSyncRealTimeProvider.prototype.newClient = function () {\n    throw new Error('Not used here');\n  };\n  AWSAppSyncRealTimeProvider.prototype.publish = function (_topics, _msg, _options) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        throw new Error('Operation not supported');\n      });\n    });\n  };\n  // Check if url matches standard domain pattern\n  AWSAppSyncRealTimeProvider.prototype.isCustomDomain = function (url) {\n    return url.match(standardDomainPattern) === null;\n  };\n  AWSAppSyncRealTimeProvider.prototype.subscribe = function (_topics, options) {\n    var _this = this;\n    var appSyncGraphqlEndpoint = options === null || options === void 0 ? void 0 : options.appSyncGraphqlEndpoint;\n    return new Observable(function (observer) {\n      if (!options || !appSyncGraphqlEndpoint) {\n        observer.error({\n          errors: [__assign({}, new GraphQLError(\"Subscribe only available for AWS AppSync endpoint\"))]\n        });\n        observer.complete();\n      } else {\n        var subscriptionId_1 = uuid();\n        _this._startSubscriptionWithAWSAppSyncRealTime({\n          options: options,\n          observer: observer,\n          subscriptionId: subscriptionId_1\n        }).catch(function (err) {\n          observer.error({\n            errors: [__assign({}, new GraphQLError(CONTROL_MSG.REALTIME_SUBSCRIPTION_INIT_ERROR + \": \" + err))]\n          });\n          _this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n          observer.complete();\n        });\n        return function () {\n          return __awaiter(_this, void 0, void 0, function () {\n            var subscriptionState, err_1;\n            return __generator(this, function (_a) {\n              switch (_a.label) {\n                case 0:\n                  _a.trys.push([0, 2, 3, 4]);\n                  // Waiting that subscription has been connected before trying to unsubscribe\n                  return [4 /*yield*/, this._waitForSubscriptionToBeConnected(subscriptionId_1)];\n                case 1:\n                  // Waiting that subscription has been connected before trying to unsubscribe\n                  _a.sent();\n                  subscriptionState = (this.subscriptionObserverMap.get(subscriptionId_1) || {}).subscriptionState;\n                  if (!subscriptionState) {\n                    // subscription already unsubscribed\n                    return [2 /*return*/];\n                  }\n\n                  if (subscriptionState === SUBSCRIPTION_STATUS.CONNECTED) {\n                    this._sendUnsubscriptionMessage(subscriptionId_1);\n                  } else {\n                    throw new Error('Subscription never connected');\n                  }\n                  return [3 /*break*/, 4];\n                case 2:\n                  err_1 = _a.sent();\n                  logger.debug(\"Error while unsubscribing \" + err_1);\n                  return [3 /*break*/, 4];\n                case 3:\n                  this._removeSubscriptionObserver(subscriptionId_1);\n                  return [7 /*endfinally*/];\n                case 4:\n                  return [2 /*return*/];\n              }\n            });\n          });\n        };\n      }\n    });\n  };\n\n  Object.defineProperty(AWSAppSyncRealTimeProvider.prototype, \"isSSLEnabled\", {\n    get: function () {\n      return !this.options.aws_appsync_dangerously_connect_to_http_endpoint_for_testing;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  AWSAppSyncRealTimeProvider.prototype._startSubscriptionWithAWSAppSyncRealTime = function (_a) {\n    var options = _a.options,\n      observer = _a.observer,\n      subscriptionId = _a.subscriptionId;\n    var _b, _c;\n    return __awaiter(this, void 0, void 0, function () {\n      var appSyncGraphqlEndpoint, authenticationType, query, variables, apiKey, region, _d, graphql_headers, _e, additionalHeaders, subscriptionState, data, dataString, headerObj, _f, _g, subscriptionMessage, stringToAWSRealTime, err_2, message, subscriptionFailedCallback_1, _h, subscriptionFailedCallback, subscriptionReadyCallback;\n      var _j;\n      var _this = this;\n      return __generator(this, function (_k) {\n        switch (_k.label) {\n          case 0:\n            appSyncGraphqlEndpoint = options.appSyncGraphqlEndpoint, authenticationType = options.authenticationType, query = options.query, variables = options.variables, apiKey = options.apiKey, region = options.region, _d = options.graphql_headers, graphql_headers = _d === void 0 ? function () {\n              return {};\n            } : _d, _e = options.additionalHeaders, additionalHeaders = _e === void 0 ? {} : _e;\n            subscriptionState = SUBSCRIPTION_STATUS.PENDING;\n            data = {\n              query: query,\n              variables: variables\n            };\n            // Having a subscription id map will make it simple to forward messages received\n            this.subscriptionObserverMap.set(subscriptionId, {\n              observer: observer,\n              query: query !== null && query !== void 0 ? query : '',\n              variables: variables !== null && variables !== void 0 ? variables : {},\n              subscriptionState: subscriptionState,\n              startAckTimeoutId: undefined\n            });\n            dataString = JSON.stringify(data);\n            _f = [{}];\n            return [4 /*yield*/, this._awsRealTimeHeaderBasedAuth({\n              apiKey: apiKey,\n              appSyncGraphqlEndpoint: appSyncGraphqlEndpoint,\n              authenticationType: authenticationType,\n              payload: dataString,\n              canonicalUri: '',\n              region: region,\n              additionalHeaders: additionalHeaders\n            })];\n          case 1:\n            _g = [__assign.apply(void 0, _f.concat([_k.sent()]))];\n            return [4 /*yield*/, graphql_headers()];\n          case 2:\n            headerObj = __assign.apply(void 0, [__assign.apply(void 0, [__assign.apply(void 0, _g.concat([_k.sent()])), additionalHeaders]), (_j = {}, _j[USER_AGENT_HEADER] = Constants.userAgent, _j)]);\n            subscriptionMessage = {\n              id: subscriptionId,\n              payload: {\n                data: dataString,\n                extensions: {\n                  authorization: __assign({}, headerObj)\n                }\n              },\n              type: MESSAGE_TYPES.GQL_START\n            };\n            stringToAWSRealTime = JSON.stringify(subscriptionMessage);\n            _k.label = 3;\n          case 3:\n            _k.trys.push([3, 5,, 6]);\n            this.connectionStateMonitor.record(CONNECTION_CHANGE.OPENING_CONNECTION);\n            return [4 /*yield*/, this._initializeWebSocketConnection({\n              apiKey: apiKey,\n              appSyncGraphqlEndpoint: appSyncGraphqlEndpoint,\n              authenticationType: authenticationType,\n              region: region,\n              additionalHeaders: additionalHeaders\n            })];\n          case 4:\n            _k.sent();\n            return [3 /*break*/, 6];\n          case 5:\n            err_2 = _k.sent();\n            logger.debug({\n              err: err_2\n            });\n            message = (_b = err_2['message']) !== null && _b !== void 0 ? _b : '';\n            this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n            observer.error({\n              errors: [__assign({}, new GraphQLError(CONTROL_MSG.CONNECTION_FAILED + \": \" + message))]\n            });\n            observer.complete();\n            subscriptionFailedCallback_1 = (this.subscriptionObserverMap.get(subscriptionId) || {}).subscriptionFailedCallback;\n            // Notify concurrent unsubscription\n            if (typeof subscriptionFailedCallback_1 === 'function') {\n              subscriptionFailedCallback_1();\n            }\n            return [2 /*return*/];\n          case 6:\n            _h = (_c = this.subscriptionObserverMap.get(subscriptionId)) !== null && _c !== void 0 ? _c : {}, subscriptionFailedCallback = _h.subscriptionFailedCallback, subscriptionReadyCallback = _h.subscriptionReadyCallback;\n            // This must be done before sending the message in order to be listening immediately\n            this.subscriptionObserverMap.set(subscriptionId, {\n              observer: observer,\n              subscriptionState: subscriptionState,\n              query: query !== null && query !== void 0 ? query : '',\n              variables: variables !== null && variables !== void 0 ? variables : {},\n              subscriptionReadyCallback: subscriptionReadyCallback,\n              subscriptionFailedCallback: subscriptionFailedCallback,\n              startAckTimeoutId: setTimeout(function () {\n                _this._timeoutStartSubscriptionAck.call(_this, subscriptionId);\n              }, START_ACK_TIMEOUT)\n            });\n            if (this.awsRealTimeSocket) {\n              this.awsRealTimeSocket.send(stringToAWSRealTime);\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  // Waiting that subscription has been connected before trying to unsubscribe\n  AWSAppSyncRealTimeProvider.prototype._waitForSubscriptionToBeConnected = function (subscriptionId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var subscriptionObserver, subscriptionState;\n      var _this = this;\n      return __generator(this, function (_a) {\n        subscriptionObserver = this.subscriptionObserverMap.get(subscriptionId);\n        if (subscriptionObserver) {\n          subscriptionState = subscriptionObserver.subscriptionState;\n          // This in case unsubscribe is invoked before sending start subscription message\n          if (subscriptionState === SUBSCRIPTION_STATUS.PENDING) {\n            return [2 /*return*/, new Promise(function (res, rej) {\n              var observer = subscriptionObserver.observer,\n                subscriptionState = subscriptionObserver.subscriptionState,\n                variables = subscriptionObserver.variables,\n                query = subscriptionObserver.query;\n              _this.subscriptionObserverMap.set(subscriptionId, {\n                observer: observer,\n                subscriptionState: subscriptionState,\n                variables: variables,\n                query: query,\n                subscriptionReadyCallback: res,\n                subscriptionFailedCallback: rej\n              });\n            })];\n          }\n        }\n        return [2 /*return*/];\n      });\n    });\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._sendUnsubscriptionMessage = function (subscriptionId) {\n    try {\n      if (this.awsRealTimeSocket && this.awsRealTimeSocket.readyState === WebSocket.OPEN && this.socketStatus === SOCKET_STATUS.READY) {\n        // Preparing unsubscribe message to stop receiving messages for that subscription\n        var unsubscribeMessage = {\n          id: subscriptionId,\n          type: MESSAGE_TYPES.GQL_STOP\n        };\n        var stringToAWSRealTime = JSON.stringify(unsubscribeMessage);\n        this.awsRealTimeSocket.send(stringToAWSRealTime);\n      }\n    } catch (err) {\n      // If GQL_STOP is not sent because of disconnection issue, then there is nothing the client can do\n      logger.debug({\n        err: err\n      });\n    }\n  };\n  AWSAppSyncRealTimeProvider.prototype._removeSubscriptionObserver = function (subscriptionId) {\n    this.subscriptionObserverMap.delete(subscriptionId);\n    // Verifying 1000ms after removing subscription in case there are new subscription unmount/mount\n    setTimeout(this._closeSocketIfRequired.bind(this), 1000);\n  };\n  AWSAppSyncRealTimeProvider.prototype._closeSocketIfRequired = function () {\n    if (this.subscriptionObserverMap.size > 0) {\n      // Active subscriptions on the WebSocket\n      return;\n    }\n    if (!this.awsRealTimeSocket) {\n      this.socketStatus = SOCKET_STATUS.CLOSED;\n      return;\n    }\n    this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSING_CONNECTION);\n    if (this.awsRealTimeSocket.bufferedAmount > 0) {\n      // Still data on the WebSocket\n      setTimeout(this._closeSocketIfRequired.bind(this), 1000);\n    } else {\n      logger.debug('closing WebSocket...');\n      if (this.keepAliveTimeoutId) {\n        clearTimeout(this.keepAliveTimeoutId);\n      }\n      if (this.keepAliveAlertTimeoutId) {\n        clearTimeout(this.keepAliveAlertTimeoutId);\n      }\n      var tempSocket = this.awsRealTimeSocket;\n      // Cleaning callbacks to avoid race condition, socket still exists\n      tempSocket.onclose = null;\n      tempSocket.onerror = null;\n      tempSocket.close(1000);\n      this.awsRealTimeSocket = undefined;\n      this.socketStatus = SOCKET_STATUS.CLOSED;\n      this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n    }\n  };\n  AWSAppSyncRealTimeProvider.prototype._handleIncomingSubscriptionMessage = function (message) {\n    var _this = this;\n    logger.debug(\"subscription message from AWS AppSync RealTime: \" + message.data);\n    var _a = JSON.parse(message.data),\n      _b = _a.id,\n      id = _b === void 0 ? '' : _b,\n      payload = _a.payload,\n      type = _a.type;\n    var _c = this.subscriptionObserverMap.get(id) || {},\n      _d = _c.observer,\n      observer = _d === void 0 ? null : _d,\n      _e = _c.query,\n      query = _e === void 0 ? '' : _e,\n      _f = _c.variables,\n      variables = _f === void 0 ? {} : _f,\n      startAckTimeoutId = _c.startAckTimeoutId,\n      subscriptionReadyCallback = _c.subscriptionReadyCallback,\n      subscriptionFailedCallback = _c.subscriptionFailedCallback;\n    logger.debug({\n      id: id,\n      observer: observer,\n      query: query,\n      variables: variables\n    });\n    if (type === MESSAGE_TYPES.GQL_DATA && payload && payload.data) {\n      if (observer) {\n        observer.next(payload);\n      } else {\n        logger.debug(\"observer not found for id: \" + id);\n      }\n      return;\n    }\n    if (type === MESSAGE_TYPES.GQL_START_ACK) {\n      logger.debug(\"subscription ready for \" + JSON.stringify({\n        query: query,\n        variables: variables\n      }));\n      if (typeof subscriptionReadyCallback === 'function') {\n        subscriptionReadyCallback();\n      }\n      if (startAckTimeoutId) clearTimeout(startAckTimeoutId);\n      dispatchApiEvent(CONTROL_MSG.SUBSCRIPTION_ACK, {\n        query: query,\n        variables: variables\n      }, 'Connection established for subscription');\n      var subscriptionState = SUBSCRIPTION_STATUS.CONNECTED;\n      if (observer) {\n        this.subscriptionObserverMap.set(id, {\n          observer: observer,\n          query: query,\n          variables: variables,\n          startAckTimeoutId: undefined,\n          subscriptionState: subscriptionState,\n          subscriptionReadyCallback: subscriptionReadyCallback,\n          subscriptionFailedCallback: subscriptionFailedCallback\n        });\n      }\n      this.connectionStateMonitor.record(CONNECTION_CHANGE.CONNECTION_ESTABLISHED);\n      return;\n    }\n    if (type === MESSAGE_TYPES.GQL_CONNECTION_KEEP_ALIVE) {\n      if (this.keepAliveTimeoutId) clearTimeout(this.keepAliveTimeoutId);\n      if (this.keepAliveAlertTimeoutId) clearTimeout(this.keepAliveAlertTimeoutId);\n      this.keepAliveTimeoutId = setTimeout(function () {\n        return _this._errorDisconnect(CONTROL_MSG.TIMEOUT_DISCONNECT);\n      }, this.keepAliveTimeout);\n      this.keepAliveAlertTimeoutId = setTimeout(function () {\n        _this.connectionStateMonitor.record(CONNECTION_CHANGE.KEEP_ALIVE_MISSED);\n      }, DEFAULT_KEEP_ALIVE_ALERT_TIMEOUT);\n      this.connectionStateMonitor.record(CONNECTION_CHANGE.KEEP_ALIVE);\n      return;\n    }\n    if (type === MESSAGE_TYPES.GQL_ERROR) {\n      var subscriptionState = SUBSCRIPTION_STATUS.FAILED;\n      if (observer) {\n        this.subscriptionObserverMap.set(id, {\n          observer: observer,\n          query: query,\n          variables: variables,\n          startAckTimeoutId: startAckTimeoutId,\n          subscriptionReadyCallback: subscriptionReadyCallback,\n          subscriptionFailedCallback: subscriptionFailedCallback,\n          subscriptionState: subscriptionState\n        });\n        observer.error({\n          errors: [__assign({}, new GraphQLError(CONTROL_MSG.CONNECTION_FAILED + \": \" + JSON.stringify(payload)))]\n        });\n        if (startAckTimeoutId) clearTimeout(startAckTimeoutId);\n        observer.complete();\n        if (typeof subscriptionFailedCallback === 'function') {\n          subscriptionFailedCallback();\n        }\n      }\n    }\n  };\n  AWSAppSyncRealTimeProvider.prototype._errorDisconnect = function (msg) {\n    logger.debug(\"Disconnect error: \" + msg);\n    this.subscriptionObserverMap.forEach(function (_a) {\n      var observer = _a.observer;\n      if (observer && !observer.closed) {\n        observer.error({\n          errors: [__assign({}, new GraphQLError(msg))]\n        });\n      }\n    });\n    this.subscriptionObserverMap.clear();\n    if (this.awsRealTimeSocket) {\n      this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n      this.awsRealTimeSocket.close();\n    }\n    this.socketStatus = SOCKET_STATUS.CLOSED;\n  };\n  AWSAppSyncRealTimeProvider.prototype._timeoutStartSubscriptionAck = function (subscriptionId) {\n    var subscriptionObserver = this.subscriptionObserverMap.get(subscriptionId);\n    if (subscriptionObserver) {\n      var observer = subscriptionObserver.observer,\n        query = subscriptionObserver.query,\n        variables = subscriptionObserver.variables;\n      if (!observer) {\n        return;\n      }\n      this.subscriptionObserverMap.set(subscriptionId, {\n        observer: observer,\n        query: query,\n        variables: variables,\n        subscriptionState: SUBSCRIPTION_STATUS.FAILED\n      });\n      if (observer && !observer.closed) {\n        observer.error({\n          errors: [__assign({}, new GraphQLError(\"Subscription timeout \" + JSON.stringify({\n            query: query,\n            variables: variables\n          })))]\n        });\n        // Cleanup will be automatically executed\n        observer.complete();\n      }\n      logger.debug('timeoutStartSubscription', JSON.stringify({\n        query: query,\n        variables: variables\n      }));\n    }\n  };\n  AWSAppSyncRealTimeProvider.prototype._initializeWebSocketConnection = function (_a) {\n    var _this = this;\n    var appSyncGraphqlEndpoint = _a.appSyncGraphqlEndpoint,\n      authenticationType = _a.authenticationType,\n      apiKey = _a.apiKey,\n      region = _a.region,\n      additionalHeaders = _a.additionalHeaders;\n    if (this.socketStatus === SOCKET_STATUS.READY) {\n      return;\n    }\n    return new Promise(function (res, rej) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var payloadString, headerString, _a, _b, headerQs, payloadQs, discoverableEndpoint, protocol, awsRealTimeUrl, err_3;\n        return __generator(this, function (_c) {\n          switch (_c.label) {\n            case 0:\n              this.promiseArray.push({\n                res: res,\n                rej: rej\n              });\n              if (!(this.socketStatus === SOCKET_STATUS.CLOSED)) return [3 /*break*/, 5];\n              _c.label = 1;\n            case 1:\n              _c.trys.push([1, 4,, 5]);\n              this.socketStatus = SOCKET_STATUS.CONNECTING;\n              payloadString = '{}';\n              _b = (_a = JSON).stringify;\n              return [4 /*yield*/, this._awsRealTimeHeaderBasedAuth({\n                authenticationType: authenticationType,\n                payload: payloadString,\n                canonicalUri: '/connect',\n                apiKey: apiKey,\n                appSyncGraphqlEndpoint: appSyncGraphqlEndpoint,\n                region: region,\n                additionalHeaders: additionalHeaders\n              })];\n            case 2:\n              headerString = _b.apply(_a, [_c.sent()]);\n              headerQs = Buffer.from(headerString).toString('base64');\n              payloadQs = Buffer.from(payloadString).toString('base64');\n              discoverableEndpoint = appSyncGraphqlEndpoint !== null && appSyncGraphqlEndpoint !== void 0 ? appSyncGraphqlEndpoint : '';\n              if (this.isCustomDomain(discoverableEndpoint)) {\n                discoverableEndpoint = discoverableEndpoint.concat(customDomainPath);\n              } else {\n                discoverableEndpoint = discoverableEndpoint.replace('appsync-api', 'appsync-realtime-api').replace('gogi-beta', 'grt-beta');\n              }\n              protocol = this.isSSLEnabled ? 'wss://' : 'ws://';\n              discoverableEndpoint = discoverableEndpoint.replace('https://', protocol).replace('http://', protocol);\n              awsRealTimeUrl = discoverableEndpoint + \"?header=\" + headerQs + \"&payload=\" + payloadQs;\n              return [4 /*yield*/, this._initializeRetryableHandshake(awsRealTimeUrl)];\n            case 3:\n              _c.sent();\n              this.promiseArray.forEach(function (_a) {\n                var res = _a.res;\n                logger.debug('Notifying connection successful');\n                res();\n              });\n              this.socketStatus = SOCKET_STATUS.READY;\n              this.promiseArray = [];\n              return [3 /*break*/, 5];\n            case 4:\n              err_3 = _c.sent();\n              this.promiseArray.forEach(function (_a) {\n                var rej = _a.rej;\n                return rej(err_3);\n              });\n              this.promiseArray = [];\n              if (this.awsRealTimeSocket && this.awsRealTimeSocket.readyState === WebSocket.OPEN) {\n                this.awsRealTimeSocket.close(3001);\n              }\n              this.awsRealTimeSocket = undefined;\n              this.socketStatus = SOCKET_STATUS.CLOSED;\n              return [3 /*break*/, 5];\n            case 5:\n              return [2 /*return*/];\n          }\n        });\n      });\n    });\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._initializeRetryableHandshake = function (awsRealTimeUrl) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            logger.debug(\"Initializaling retryable Handshake\");\n            return [4 /*yield*/, jitteredExponentialRetry(this._initializeHandshake.bind(this), [awsRealTimeUrl], MAX_DELAY_MS)];\n          case 1:\n            _a.sent();\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._initializeHandshake = function (awsRealTimeUrl) {\n    return __awaiter(this, void 0, void 0, function () {\n      var err_4, _a, errorType, errorCode;\n      var _this = this;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            logger.debug(\"Initializing handshake \" + awsRealTimeUrl);\n            _b.label = 1;\n          case 1:\n            _b.trys.push([1, 4,, 5]);\n            return [4 /*yield*/, function () {\n              return new Promise(function (res, rej) {\n                var newSocket = _this.getNewWebSocket(awsRealTimeUrl, 'graphql-ws');\n                newSocket.onerror = function () {\n                  logger.debug(\"WebSocket connection error\");\n                };\n                newSocket.onclose = function () {\n                  _this.connectionStateMonitor.record(CONNECTION_CHANGE.CONNECTION_FAILED);\n                  rej(new Error('Connection handshake error'));\n                };\n                newSocket.onopen = function () {\n                  _this.awsRealTimeSocket = newSocket;\n                  return res();\n                };\n              });\n            }()];\n          case 2:\n            _b.sent();\n            // Step 2: wait for ack from AWS AppSyncReaTime after sending init\n            return [4 /*yield*/, function () {\n              return new Promise(function (res, rej) {\n                if (_this.awsRealTimeSocket) {\n                  var ackOk_1 = false;\n                  _this.awsRealTimeSocket.onerror = function (error) {\n                    logger.debug(\"WebSocket error \" + JSON.stringify(error));\n                  };\n                  _this.awsRealTimeSocket.onclose = function (event) {\n                    logger.debug(\"WebSocket closed \" + event.reason);\n                    rej(new Error(JSON.stringify(event)));\n                  };\n                  _this.awsRealTimeSocket.onmessage = function (message) {\n                    logger.debug(\"subscription message from AWS AppSyncRealTime: \" + message.data + \" \");\n                    var data = JSON.parse(message.data);\n                    var type = data.type,\n                      _a = data.payload,\n                      _b = (_a === void 0 ? {} : _a).connectionTimeoutMs,\n                      connectionTimeoutMs = _b === void 0 ? DEFAULT_KEEP_ALIVE_TIMEOUT : _b;\n                    if (type === MESSAGE_TYPES.GQL_CONNECTION_ACK) {\n                      ackOk_1 = true;\n                      if (_this.awsRealTimeSocket) {\n                        _this.keepAliveTimeout = connectionTimeoutMs;\n                        _this.awsRealTimeSocket.onmessage = _this._handleIncomingSubscriptionMessage.bind(_this);\n                        _this.awsRealTimeSocket.onerror = function (err) {\n                          logger.debug(err);\n                          _this._errorDisconnect(CONTROL_MSG.CONNECTION_CLOSED);\n                        };\n                        _this.awsRealTimeSocket.onclose = function (event) {\n                          logger.debug(\"WebSocket closed \" + event.reason);\n                          _this._errorDisconnect(CONTROL_MSG.CONNECTION_CLOSED);\n                        };\n                      }\n                      res('Cool, connected to AWS AppSyncRealTime');\n                      return;\n                    }\n                    if (type === MESSAGE_TYPES.GQL_CONNECTION_ERROR) {\n                      var _c = data.payload,\n                        _d = (_c === void 0 ? {} : _c).errors,\n                        _e = __read(_d === void 0 ? [] : _d, 1),\n                        _f = _e[0],\n                        _g = _f === void 0 ? {} : _f,\n                        _h = _g.errorType,\n                        errorType = _h === void 0 ? '' : _h,\n                        _j = _g.errorCode,\n                        errorCode = _j === void 0 ? 0 : _j;\n                      rej({\n                        errorType: errorType,\n                        errorCode: errorCode\n                      });\n                    }\n                  };\n                  var gqlInit = {\n                    type: MESSAGE_TYPES.GQL_CONNECTION_INIT\n                  };\n                  _this.awsRealTimeSocket.send(JSON.stringify(gqlInit));\n                  var checkAckOk_1 = function (ackOk) {\n                    if (!ackOk) {\n                      _this.connectionStateMonitor.record(CONNECTION_CHANGE.CONNECTION_FAILED);\n                      rej(new Error(\"Connection timeout: ack from AWSAppSyncRealTime was not received after \" + CONNECTION_INIT_TIMEOUT + \" ms\"));\n                    }\n                  };\n                  setTimeout(function () {\n                    return checkAckOk_1(ackOk_1);\n                  }, CONNECTION_INIT_TIMEOUT);\n                }\n              });\n            }()];\n          case 3:\n            // Step 2: wait for ack from AWS AppSyncReaTime after sending init\n            _b.sent();\n            return [3 /*break*/, 5];\n          case 4:\n            err_4 = _b.sent();\n            _a = err_4, errorType = _a.errorType, errorCode = _a.errorCode;\n            if (NON_RETRYABLE_CODES.includes(errorCode)) {\n              throw new NonRetryableError(errorType);\n            } else if (errorType) {\n              throw new Error(errorType);\n            } else {\n              throw err_4;\n            }\n            return [3 /*break*/, 5];\n          case 5:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._awsRealTimeHeaderBasedAuth = function (_a) {\n    var authenticationType = _a.authenticationType,\n      payload = _a.payload,\n      canonicalUri = _a.canonicalUri,\n      appSyncGraphqlEndpoint = _a.appSyncGraphqlEndpoint,\n      apiKey = _a.apiKey,\n      region = _a.region,\n      additionalHeaders = _a.additionalHeaders;\n    return __awaiter(this, void 0, void 0, function () {\n      var headerHandler, handler, host, result;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            headerHandler = {\n              API_KEY: this._awsRealTimeApiKeyHeader.bind(this),\n              AWS_IAM: this._awsRealTimeIAMHeader.bind(this),\n              OPENID_CONNECT: this._awsRealTimeOPENIDHeader.bind(this),\n              AMAZON_COGNITO_USER_POOLS: this._awsRealTimeCUPHeader.bind(this),\n              AWS_LAMBDA: this._customAuthHeader\n            };\n            if (!(!authenticationType || !headerHandler[authenticationType])) return [3 /*break*/, 1];\n            logger.debug(\"Authentication type \" + authenticationType + \" not supported\");\n            return [2 /*return*/, ''];\n          case 1:\n            handler = headerHandler[authenticationType];\n            host = url.parse(appSyncGraphqlEndpoint !== null && appSyncGraphqlEndpoint !== void 0 ? appSyncGraphqlEndpoint : '').host;\n            logger.debug(\"Authenticating with \" + authenticationType);\n            return [4 /*yield*/, handler({\n              payload: payload,\n              canonicalUri: canonicalUri,\n              appSyncGraphqlEndpoint: appSyncGraphqlEndpoint,\n              apiKey: apiKey,\n              region: region,\n              host: host,\n              additionalHeaders: additionalHeaders\n            })];\n          case 2:\n            result = _b.sent();\n            return [2 /*return*/, result];\n        }\n      });\n    });\n  };\n  AWSAppSyncRealTimeProvider.prototype._awsRealTimeCUPHeader = function (_a) {\n    var host = _a.host;\n    return __awaiter(this, void 0, void 0, function () {\n      var session;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4 /*yield*/, Auth.currentSession()];\n          case 1:\n            session = _b.sent();\n            return [2 /*return*/, {\n              Authorization: session.getAccessToken().getJwtToken(),\n              host: host\n            }];\n        }\n      });\n    });\n  };\n  AWSAppSyncRealTimeProvider.prototype._awsRealTimeOPENIDHeader = function (_a) {\n    var host = _a.host;\n    return __awaiter(this, void 0, void 0, function () {\n      var token, federatedInfo, currentUser;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4 /*yield*/, Cache.getItem('federatedInfo')];\n          case 1:\n            federatedInfo = _b.sent();\n            if (!federatedInfo) return [3 /*break*/, 2];\n            token = federatedInfo.token;\n            return [3 /*break*/, 4];\n          case 2:\n            return [4 /*yield*/, Auth.currentAuthenticatedUser()];\n          case 3:\n            currentUser = _b.sent();\n            if (currentUser) {\n              token = currentUser.token;\n            }\n            _b.label = 4;\n          case 4:\n            if (!token) {\n              throw new Error('No federated jwt');\n            }\n            return [2 /*return*/, {\n              Authorization: token,\n              host: host\n            }];\n        }\n      });\n    });\n  };\n  AWSAppSyncRealTimeProvider.prototype._awsRealTimeApiKeyHeader = function (_a) {\n    var apiKey = _a.apiKey,\n      host = _a.host;\n    return __awaiter(this, void 0, void 0, function () {\n      var dt, dtStr;\n      return __generator(this, function (_b) {\n        dt = new Date();\n        dtStr = dt.toISOString().replace(/[:\\-]|\\.\\d{3}/g, '');\n        return [2 /*return*/, {\n          host: host,\n          'x-amz-date': dtStr,\n          'x-api-key': apiKey\n        }];\n      });\n    });\n  };\n  AWSAppSyncRealTimeProvider.prototype._awsRealTimeIAMHeader = function (_a) {\n    var payload = _a.payload,\n      canonicalUri = _a.canonicalUri,\n      appSyncGraphqlEndpoint = _a.appSyncGraphqlEndpoint,\n      region = _a.region;\n    return __awaiter(this, void 0, void 0, function () {\n      var endpointInfo, credentialsOK, creds, request, signed_params;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            endpointInfo = {\n              region: region,\n              service: 'appsync'\n            };\n            return [4 /*yield*/, this._ensureCredentials()];\n          case 1:\n            credentialsOK = _b.sent();\n            if (!credentialsOK) {\n              throw new Error('No credentials');\n            }\n            return [4 /*yield*/, Credentials.get().then(function (credentials) {\n              var _a = credentials,\n                secretAccessKey = _a.secretAccessKey,\n                accessKeyId = _a.accessKeyId,\n                sessionToken = _a.sessionToken;\n              return {\n                secret_key: secretAccessKey,\n                access_key: accessKeyId,\n                session_token: sessionToken\n              };\n            })];\n          case 2:\n            creds = _b.sent();\n            request = {\n              url: \"\" + appSyncGraphqlEndpoint + canonicalUri,\n              data: payload,\n              method: 'POST',\n              headers: __assign({}, AWS_APPSYNC_REALTIME_HEADERS)\n            };\n            signed_params = Signer.sign(request, creds, endpointInfo);\n            return [2 /*return*/, signed_params.headers];\n        }\n      });\n    });\n  };\n  AWSAppSyncRealTimeProvider.prototype._customAuthHeader = function (_a) {\n    var host = _a.host,\n      additionalHeaders = _a.additionalHeaders;\n    if (!additionalHeaders || !additionalHeaders['Authorization']) {\n      throw new Error('No auth token specified');\n    }\n    return {\n      Authorization: additionalHeaders.Authorization,\n      host: host\n    };\n  };\n  /**\n   * @private\n   */\n  AWSAppSyncRealTimeProvider.prototype._ensureCredentials = function () {\n    return Credentials.get().then(function (credentials) {\n      if (!credentials) return false;\n      var cred = Credentials.shear(credentials);\n      logger.debug('set credentials for AWSAppSyncRealTimeProvider', cred);\n      return true;\n    }).catch(function (err) {\n      logger.warn('ensure credentials error', err);\n      return false;\n    });\n  };\n  return AWSAppSyncRealTimeProvider;\n}(AbstractPubSubProvider);\nexport { AWSAppSyncRealTimeProvider };","map":{"version":3,"mappings":"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","names":["Observable","GraphQLError","url","v4","uuid","Buffer","Logger","Credentials","Signer","Hub","Constants","USER_AGENT_HEADER","jitteredExponentialRetry","NonRetryableError","Cache","Auth","AbstractPubSubProvider","CONTROL_MSG","AMPLIFY_SYMBOL","AWS_APPSYNC_REALTIME_HEADERS","CONNECTION_INIT_TIMEOUT","DEFAULT_KEEP_ALIVE_TIMEOUT","DEFAULT_KEEP_ALIVE_ALERT_TIMEOUT","MAX_DELAY_MS","MESSAGE_TYPES","NON_RETRYABLE_CODES","SOCKET_STATUS","START_ACK_TIMEOUT","SUBSCRIPTION_STATUS","CONNECTION_STATE_CHANGE","ConnectionStateMonitor","CONNECTION_CHANGE","logger","dispatchApiEvent","event","data","message","dispatch","standardDomainPattern","customDomainPath","__extends","options","_super","_this","CLOSED","Map","connectionStateMonitor","connectionStateObservable","subscribe","provider","connectionState","ConnectionState","AWSAppSyncRealTimeProvider","protocol","WebSocket","Error","_topics","_msg","_options","match","appSyncGraphqlEndpoint","observer","error","errors","complete","subscriptionId_1","_startSubscriptionWithAWSAppSyncRealTime","subscriptionId","catch","REALTIME_SUBSCRIPTION_INIT_ERROR","err","record","_waitForSubscriptionToBeConnected","_a","subscriptionState","subscriptionObserverMap","get","CONNECTED","_sendUnsubscriptionMessage","debug","err_1","_removeSubscriptionObserver","Object","aws_appsync_dangerously_connect_to_http_endpoint_for_testing","authenticationType","query","variables","apiKey","region","_d","graphql_headers","_e","additionalHeaders","PENDING","set","startAckTimeoutId","undefined","dataString","JSON","stringify","_awsRealTimeHeaderBasedAuth","payload","canonicalUri","_k","headerObj","userAgent","subscriptionMessage","id","extensions","authorization","type","GQL_START","stringToAWSRealTime","OPENING_CONNECTION","_initializeWebSocketConnection","err_2","CONNECTION_FAILED","subscriptionFailedCallback_1","_h","subscriptionFailedCallback","subscriptionReadyCallback","setTimeout","_timeoutStartSubscriptionAck","call","awsRealTimeSocket","send","subscriptionObserver","Promise","res","rej","readyState","OPEN","socketStatus","READY","unsubscribeMessage","GQL_STOP","delete","_closeSocketIfRequired","bind","size","CLOSING_CONNECTION","bufferedAmount","keepAliveTimeoutId","clearTimeout","keepAliveAlertTimeoutId","tempSocket","onclose","onerror","close","_b","_f","GQL_DATA","next","GQL_START_ACK","SUBSCRIPTION_ACK","CONNECTION_ESTABLISHED","GQL_CONNECTION_KEEP_ALIVE","_errorDisconnect","TIMEOUT_DISCONNECT","keepAliveTimeout","KEEP_ALIVE_MISSED","KEEP_ALIVE","GQL_ERROR","FAILED","msg","forEach","closed","clear","promiseArray","push","CONNECTING","payloadString","headerString","_c","headerQs","from","toString","payloadQs","discoverableEndpoint","isCustomDomain","concat","replace","isSSLEnabled","awsRealTimeUrl","_initializeRetryableHandshake","err_3","_initializeHandshake","newSocket","getNewWebSocket","onopen","ackOk_1","reason","onmessage","parse","connectionTimeoutMs","GQL_CONNECTION_ACK","_handleIncomingSubscriptionMessage","CONNECTION_CLOSED","GQL_CONNECTION_ERROR","_g","errorType","_j","errorCode","gqlInit","GQL_CONNECTION_INIT","checkAckOk_1","ackOk","err_4","includes","headerHandler","API_KEY","_awsRealTimeApiKeyHeader","AWS_IAM","_awsRealTimeIAMHeader","OPENID_CONNECT","_awsRealTimeOPENIDHeader","AMAZON_COGNITO_USER_POOLS","_awsRealTimeCUPHeader","AWS_LAMBDA","_customAuthHeader","handler","host","result","currentSession","session","Authorization","getAccessToken","getJwtToken","getItem","federatedInfo","token","currentAuthenticatedUser","currentUser","dt","Date","dtStr","toISOString","endpointInfo","service","_ensureCredentials","credentialsOK","then","credentials","secretAccessKey","accessKeyId","sessionToken","secret_key","access_key","session_token","creds","request","method","headers","signed_params","sign","cred","shear","warn"],"sources":["C:\\Users\\weida\\Desktop\\playground_CC\\node_modules\\@aws-amplify\\pubsub\\src\\Providers\\AWSAppSyncRealTimeProvider\\index.ts"],"sourcesContent":["/*\n * Copyright 2017-2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nimport Observable, { ZenObservable } from 'zen-observable-ts';\nimport { GraphQLError } from 'graphql';\nimport * as url from 'url';\nimport { v4 as uuid } from 'uuid';\nimport { Buffer } from 'buffer';\nimport { ProviderOptions } from '../../types/Provider';\nimport {\n\tLogger,\n\tCredentials,\n\tSigner,\n\tHub,\n\tConstants,\n\tUSER_AGENT_HEADER,\n\tjitteredExponentialRetry,\n\tNonRetryableError,\n\tICredentials,\n} from '@aws-amplify/core';\nimport Cache from '@aws-amplify/cache';\nimport Auth, { GRAPHQL_AUTH_MODE } from '@aws-amplify/auth';\nimport { AbstractPubSubProvider } from '../PubSubProvider';\nimport { CONTROL_MSG } from '../../types/PubSub';\n\nimport {\n\tAMPLIFY_SYMBOL,\n\tAWS_APPSYNC_REALTIME_HEADERS,\n\tCONNECTION_INIT_TIMEOUT,\n\tDEFAULT_KEEP_ALIVE_TIMEOUT,\n\tDEFAULT_KEEP_ALIVE_ALERT_TIMEOUT,\n\tMAX_DELAY_MS,\n\tMESSAGE_TYPES,\n\tNON_RETRYABLE_CODES,\n\tSOCKET_STATUS,\n\tSTART_ACK_TIMEOUT,\n\tSUBSCRIPTION_STATUS,\n\tCONNECTION_STATE_CHANGE,\n} from '../constants';\nimport {\n\tConnectionStateMonitor,\n\tCONNECTION_CHANGE,\n} from '../../utils/ConnectionStateMonitor';\n\nconst logger = new Logger('AWSAppSyncRealTimeProvider');\n\nconst dispatchApiEvent = (event: string, data: any, message: string) => {\n\tHub.dispatch('api', { event, data, message }, 'PubSub', AMPLIFY_SYMBOL);\n};\n\nexport type ObserverQuery = {\n\tobserver: ZenObservable.SubscriptionObserver<any>;\n\tquery: string;\n\tvariables: object;\n\tsubscriptionState: SUBSCRIPTION_STATUS;\n\tsubscriptionReadyCallback?: Function;\n\tsubscriptionFailedCallback?: Function;\n\tstartAckTimeoutId?: ReturnType<typeof setTimeout>;\n};\n\nconst standardDomainPattern =\n\t/^https:\\/\\/\\w{26}\\.appsync\\-api\\.\\w{2}(?:(?:\\-\\w{2,})+)\\-\\d\\.amazonaws.com\\/graphql$/i;\n\nconst customDomainPath = '/realtime';\n\ntype GraphqlAuthModes = keyof typeof GRAPHQL_AUTH_MODE;\n\nexport interface AWSAppSyncRealTimeProviderOptions extends ProviderOptions {\n\tappSyncGraphqlEndpoint?: string;\n\tauthenticationType?: GraphqlAuthModes;\n\tquery?: string;\n\tvariables?: object;\n\tapiKey?: string;\n\tregion?: string;\n\tgraphql_headers?: () => {} | (() => Promise<{}>);\n\tadditionalHeaders?: { [key: string]: string };\n}\n\ntype AWSAppSyncRealTimeAuthInput =\n\tPartial<AWSAppSyncRealTimeProviderOptions> & {\n\t\tcanonicalUri: string;\n\t\tpayload: string;\n\t};\n\nexport class AWSAppSyncRealTimeProvider extends AbstractPubSubProvider {\n\tprivate awsRealTimeSocket?: WebSocket;\n\tprivate socketStatus: SOCKET_STATUS = SOCKET_STATUS.CLOSED;\n\tprivate keepAliveTimeoutId?: ReturnType<typeof setTimeout>;\n\tprivate keepAliveTimeout = DEFAULT_KEEP_ALIVE_TIMEOUT;\n\tprivate keepAliveAlertTimeoutId?: ReturnType<typeof setTimeout>;\n\tprivate subscriptionObserverMap: Map<string, ObserverQuery> = new Map();\n\tprivate promiseArray: Array<{ res: Function; rej: Function }> = [];\n\tprivate readonly connectionStateMonitor = new ConnectionStateMonitor();\n\n\tconstructor(options: ProviderOptions = {}) {\n\t\tsuper(options);\n\t\t// Monitor the connection state and pass changes along to Hub\n\t\tthis.connectionStateMonitor.connectionStateObservable.subscribe(\n\t\t\tConnectionState => {\n\t\t\t\tdispatchApiEvent(\n\t\t\t\t\tCONNECTION_STATE_CHANGE,\n\t\t\t\t\t{\n\t\t\t\t\t\tprovider: this,\n\t\t\t\t\t\tconnectionState: ConnectionState,\n\t\t\t\t\t},\n\t\t\t\t\t`Connection state is ${ConnectionState}`\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\t}\n\n\tgetNewWebSocket(url, protocol) {\n\t\treturn new WebSocket(url, protocol);\n\t}\n\n\tgetProviderName() {\n\t\treturn 'AWSAppSyncRealTimeProvider';\n\t}\n\n\tnewClient(): Promise<any> {\n\t\tthrow new Error('Not used here');\n\t}\n\n\tpublic async publish(_topics: string[] | string, _msg: any, _options?: any) {\n\t\tthrow new Error('Operation not supported');\n\t}\n\n\t// Check if url matches standard domain pattern\n\tprivate isCustomDomain(url: string): boolean {\n\t\treturn url.match(standardDomainPattern) === null;\n\t}\n\n\tsubscribe(\n\t\t_topics: string[] | string,\n\t\toptions?: AWSAppSyncRealTimeProviderOptions\n\t): Observable<any> {\n\t\tconst appSyncGraphqlEndpoint = options?.appSyncGraphqlEndpoint;\n\n\t\treturn new Observable(observer => {\n\t\t\tif (!options || !appSyncGraphqlEndpoint) {\n\t\t\t\tobserver.error({\n\t\t\t\t\terrors: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t...new GraphQLError(\n\t\t\t\t\t\t\t\t`Subscribe only available for AWS AppSync endpoint`\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t});\n\t\t\t\tobserver.complete();\n\t\t\t} else {\n\t\t\t\tconst subscriptionId = uuid();\n\t\t\t\tthis._startSubscriptionWithAWSAppSyncRealTime({\n\t\t\t\t\toptions,\n\t\t\t\t\tobserver,\n\t\t\t\t\tsubscriptionId,\n\t\t\t\t}).catch<any>(err => {\n\t\t\t\t\tobserver.error({\n\t\t\t\t\t\terrors: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t...new GraphQLError(\n\t\t\t\t\t\t\t\t\t`${CONTROL_MSG.REALTIME_SUBSCRIPTION_INIT_ERROR}: ${err}`\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t});\n\t\t\t\t\tthis.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n\t\t\t\t\tobserver.complete();\n\t\t\t\t});\n\n\t\t\t\treturn async () => {\n\t\t\t\t\t// Cleanup after unsubscribing or observer.complete was called after _startSubscriptionWithAWSAppSyncRealTime\n\t\t\t\t\ttry {\n\t\t\t\t\t\t// Waiting that subscription has been connected before trying to unsubscribe\n\t\t\t\t\t\tawait this._waitForSubscriptionToBeConnected(subscriptionId);\n\n\t\t\t\t\t\tconst { subscriptionState } =\n\t\t\t\t\t\t\tthis.subscriptionObserverMap.get(subscriptionId) || {};\n\n\t\t\t\t\t\tif (!subscriptionState) {\n\t\t\t\t\t\t\t// subscription already unsubscribed\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (subscriptionState === SUBSCRIPTION_STATUS.CONNECTED) {\n\t\t\t\t\t\t\tthis._sendUnsubscriptionMessage(subscriptionId);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthrow new Error('Subscription never connected');\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\tlogger.debug(`Error while unsubscribing ${err}`);\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tthis._removeSubscriptionObserver(subscriptionId);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\t\t});\n\t}\n\n\tprotected get isSSLEnabled() {\n\t\treturn !this.options\n\t\t\t.aws_appsync_dangerously_connect_to_http_endpoint_for_testing;\n\t}\n\n\tprivate async _startSubscriptionWithAWSAppSyncRealTime({\n\t\toptions,\n\t\tobserver,\n\t\tsubscriptionId,\n\t}: {\n\t\toptions: AWSAppSyncRealTimeProviderOptions;\n\t\tobserver: ZenObservable.SubscriptionObserver<any>;\n\t\tsubscriptionId: string;\n\t}) {\n\t\tconst {\n\t\t\tappSyncGraphqlEndpoint,\n\t\t\tauthenticationType,\n\t\t\tquery,\n\t\t\tvariables,\n\t\t\tapiKey,\n\t\t\tregion,\n\t\t\tgraphql_headers = () => ({}),\n\t\t\tadditionalHeaders = {},\n\t\t} = options;\n\n\t\tconst subscriptionState: SUBSCRIPTION_STATUS = SUBSCRIPTION_STATUS.PENDING;\n\t\tconst data = {\n\t\t\tquery,\n\t\t\tvariables,\n\t\t};\n\t\t// Having a subscription id map will make it simple to forward messages received\n\t\tthis.subscriptionObserverMap.set(subscriptionId, {\n\t\t\tobserver,\n\t\t\tquery: query ?? '',\n\t\t\tvariables: variables ?? {},\n\t\t\tsubscriptionState,\n\t\t\tstartAckTimeoutId: undefined,\n\t\t});\n\n\t\t// Preparing payload for subscription message\n\n\t\tconst dataString = JSON.stringify(data);\n\t\tconst headerObj = {\n\t\t\t...(await this._awsRealTimeHeaderBasedAuth({\n\t\t\t\tapiKey,\n\t\t\t\tappSyncGraphqlEndpoint,\n\t\t\t\tauthenticationType,\n\t\t\t\tpayload: dataString,\n\t\t\t\tcanonicalUri: '',\n\t\t\t\tregion,\n\t\t\t\tadditionalHeaders,\n\t\t\t})),\n\t\t\t...(await graphql_headers()),\n\t\t\t...additionalHeaders,\n\t\t\t[USER_AGENT_HEADER]: Constants.userAgent,\n\t\t};\n\n\t\tconst subscriptionMessage = {\n\t\t\tid: subscriptionId,\n\t\t\tpayload: {\n\t\t\t\tdata: dataString,\n\t\t\t\textensions: {\n\t\t\t\t\tauthorization: {\n\t\t\t\t\t\t...headerObj,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\ttype: MESSAGE_TYPES.GQL_START,\n\t\t};\n\n\t\tconst stringToAWSRealTime = JSON.stringify(subscriptionMessage);\n\n\t\ttry {\n\t\t\tthis.connectionStateMonitor.record(CONNECTION_CHANGE.OPENING_CONNECTION);\n\t\t\tawait this._initializeWebSocketConnection({\n\t\t\t\tapiKey,\n\t\t\t\tappSyncGraphqlEndpoint,\n\t\t\t\tauthenticationType,\n\t\t\t\tregion,\n\t\t\t\tadditionalHeaders,\n\t\t\t});\n\t\t} catch (err) {\n\t\t\tlogger.debug({ err });\n\t\t\tconst message = err['message'] ?? '';\n\t\t\tthis.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n\t\t\tobserver.error({\n\t\t\t\terrors: [\n\t\t\t\t\t{\n\t\t\t\t\t\t...new GraphQLError(`${CONTROL_MSG.CONNECTION_FAILED}: ${message}`),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t});\n\t\t\tobserver.complete();\n\t\t\tconst { subscriptionFailedCallback } =\n\t\t\t\tthis.subscriptionObserverMap.get(subscriptionId) || {};\n\n\t\t\t// Notify concurrent unsubscription\n\t\t\tif (typeof subscriptionFailedCallback === 'function') {\n\t\t\t\tsubscriptionFailedCallback();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\t// Potential race condition can occur when unsubscribe is called during _initializeWebSocketConnection.\n\t\t// E.g.unsubscribe gets invoked prior to finishing WebSocket handshake or START_ACK.\n\t\t// Both subscriptionFailedCallback and subscriptionReadyCallback are used to synchronized this.\n\n\t\tconst { subscriptionFailedCallback, subscriptionReadyCallback } =\n\t\t\tthis.subscriptionObserverMap.get(subscriptionId) ?? {};\n\n\t\t// This must be done before sending the message in order to be listening immediately\n\t\tthis.subscriptionObserverMap.set(subscriptionId, {\n\t\t\tobserver,\n\t\t\tsubscriptionState,\n\t\t\tquery: query ?? '',\n\t\t\tvariables: variables ?? {},\n\t\t\tsubscriptionReadyCallback,\n\t\t\tsubscriptionFailedCallback,\n\t\t\tstartAckTimeoutId: setTimeout(() => {\n\t\t\t\tthis._timeoutStartSubscriptionAck.call(this, subscriptionId);\n\t\t\t}, START_ACK_TIMEOUT),\n\t\t});\n\t\tif (this.awsRealTimeSocket) {\n\t\t\tthis.awsRealTimeSocket.send(stringToAWSRealTime);\n\t\t}\n\t}\n\n\t// Waiting that subscription has been connected before trying to unsubscribe\n\tprivate async _waitForSubscriptionToBeConnected(subscriptionId: string) {\n\t\tconst subscriptionObserver =\n\t\t\tthis.subscriptionObserverMap.get(subscriptionId);\n\t\tif (subscriptionObserver) {\n\t\t\tconst { subscriptionState } = subscriptionObserver;\n\t\t\t// This in case unsubscribe is invoked before sending start subscription message\n\t\t\tif (subscriptionState === SUBSCRIPTION_STATUS.PENDING) {\n\t\t\t\treturn new Promise((res, rej) => {\n\t\t\t\t\tconst { observer, subscriptionState, variables, query } =\n\t\t\t\t\t\tsubscriptionObserver;\n\t\t\t\t\tthis.subscriptionObserverMap.set(subscriptionId, {\n\t\t\t\t\t\tobserver,\n\t\t\t\t\t\tsubscriptionState,\n\t\t\t\t\t\tvariables,\n\t\t\t\t\t\tquery,\n\t\t\t\t\t\tsubscriptionReadyCallback: res,\n\t\t\t\t\t\tsubscriptionFailedCallback: rej,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _sendUnsubscriptionMessage(subscriptionId: string) {\n\t\ttry {\n\t\t\tif (\n\t\t\t\tthis.awsRealTimeSocket &&\n\t\t\t\tthis.awsRealTimeSocket.readyState === WebSocket.OPEN &&\n\t\t\t\tthis.socketStatus === SOCKET_STATUS.READY\n\t\t\t) {\n\t\t\t\t// Preparing unsubscribe message to stop receiving messages for that subscription\n\t\t\t\tconst unsubscribeMessage = {\n\t\t\t\t\tid: subscriptionId,\n\t\t\t\t\ttype: MESSAGE_TYPES.GQL_STOP,\n\t\t\t\t};\n\t\t\t\tconst stringToAWSRealTime = JSON.stringify(unsubscribeMessage);\n\t\t\t\tthis.awsRealTimeSocket.send(stringToAWSRealTime);\n\t\t\t}\n\t\t} catch (err) {\n\t\t\t// If GQL_STOP is not sent because of disconnection issue, then there is nothing the client can do\n\t\t\tlogger.debug({ err });\n\t\t}\n\t}\n\n\tprivate _removeSubscriptionObserver(subscriptionId: string) {\n\t\tthis.subscriptionObserverMap.delete(subscriptionId);\n\n\t\t// Verifying 1000ms after removing subscription in case there are new subscription unmount/mount\n\t\tsetTimeout(this._closeSocketIfRequired.bind(this), 1000);\n\t}\n\n\tprivate _closeSocketIfRequired() {\n\t\tif (this.subscriptionObserverMap.size > 0) {\n\t\t\t// Active subscriptions on the WebSocket\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this.awsRealTimeSocket) {\n\t\t\tthis.socketStatus = SOCKET_STATUS.CLOSED;\n\t\t\treturn;\n\t\t}\n\n\t\tthis.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSING_CONNECTION);\n\n\t\tif (this.awsRealTimeSocket.bufferedAmount > 0) {\n\t\t\t// Still data on the WebSocket\n\t\t\tsetTimeout(this._closeSocketIfRequired.bind(this), 1000);\n\t\t} else {\n\t\t\tlogger.debug('closing WebSocket...');\n\t\t\tif (this.keepAliveTimeoutId) {\n\t\t\t\tclearTimeout(this.keepAliveTimeoutId);\n\t\t\t}\n\t\t\tif (this.keepAliveAlertTimeoutId) {\n\t\t\t\tclearTimeout(this.keepAliveAlertTimeoutId);\n\t\t\t}\n\t\t\tconst tempSocket = this.awsRealTimeSocket;\n\t\t\t// Cleaning callbacks to avoid race condition, socket still exists\n\t\t\ttempSocket.onclose = null;\n\t\t\ttempSocket.onerror = null;\n\t\t\ttempSocket.close(1000);\n\t\t\tthis.awsRealTimeSocket = undefined;\n\t\t\tthis.socketStatus = SOCKET_STATUS.CLOSED;\n\t\t\tthis.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n\t\t}\n\t}\n\n\tprivate _handleIncomingSubscriptionMessage(message: MessageEvent) {\n\t\tlogger.debug(\n\t\t\t`subscription message from AWS AppSync RealTime: ${message.data}`\n\t\t);\n\t\tconst { id = '', payload, type } = JSON.parse(message.data);\n\t\tconst {\n\t\t\tobserver = null,\n\t\t\tquery = '',\n\t\t\tvariables = {},\n\t\t\tstartAckTimeoutId,\n\t\t\tsubscriptionReadyCallback,\n\t\t\tsubscriptionFailedCallback,\n\t\t} = this.subscriptionObserverMap.get(id) || {};\n\n\t\tlogger.debug({ id, observer, query, variables });\n\n\t\tif (type === MESSAGE_TYPES.GQL_DATA && payload && payload.data) {\n\t\t\tif (observer) {\n\t\t\t\tobserver.next(payload);\n\t\t\t} else {\n\t\t\t\tlogger.debug(`observer not found for id: ${id}`);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tif (type === MESSAGE_TYPES.GQL_START_ACK) {\n\t\t\tlogger.debug(\n\t\t\t\t`subscription ready for ${JSON.stringify({ query, variables })}`\n\t\t\t);\n\t\t\tif (typeof subscriptionReadyCallback === 'function') {\n\t\t\t\tsubscriptionReadyCallback();\n\t\t\t}\n\t\t\tif (startAckTimeoutId) clearTimeout(startAckTimeoutId);\n\t\t\tdispatchApiEvent(\n\t\t\t\tCONTROL_MSG.SUBSCRIPTION_ACK,\n\t\t\t\t{ query, variables },\n\t\t\t\t'Connection established for subscription'\n\t\t\t);\n\t\t\tconst subscriptionState = SUBSCRIPTION_STATUS.CONNECTED;\n\t\t\tif (observer) {\n\t\t\t\tthis.subscriptionObserverMap.set(id, {\n\t\t\t\t\tobserver,\n\t\t\t\t\tquery,\n\t\t\t\t\tvariables,\n\t\t\t\t\tstartAckTimeoutId: undefined,\n\t\t\t\t\tsubscriptionState,\n\t\t\t\t\tsubscriptionReadyCallback,\n\t\t\t\t\tsubscriptionFailedCallback,\n\t\t\t\t});\n\t\t\t}\n\t\t\tthis.connectionStateMonitor.record(\n\t\t\t\tCONNECTION_CHANGE.CONNECTION_ESTABLISHED\n\t\t\t);\n\n\t\t\treturn;\n\t\t}\n\n\t\tif (type === MESSAGE_TYPES.GQL_CONNECTION_KEEP_ALIVE) {\n\t\t\tif (this.keepAliveTimeoutId) clearTimeout(this.keepAliveTimeoutId);\n\t\t\tif (this.keepAliveAlertTimeoutId)\n\t\t\t\tclearTimeout(this.keepAliveAlertTimeoutId);\n\t\t\tthis.keepAliveTimeoutId = setTimeout(\n\t\t\t\t() => this._errorDisconnect(CONTROL_MSG.TIMEOUT_DISCONNECT),\n\t\t\t\tthis.keepAliveTimeout\n\t\t\t);\n\t\t\tthis.keepAliveAlertTimeoutId = setTimeout(() => {\n\t\t\t\tthis.connectionStateMonitor.record(CONNECTION_CHANGE.KEEP_ALIVE_MISSED);\n\t\t\t}, DEFAULT_KEEP_ALIVE_ALERT_TIMEOUT);\n\t\t\tthis.connectionStateMonitor.record(CONNECTION_CHANGE.KEEP_ALIVE);\n\t\t\treturn;\n\t\t}\n\n\t\tif (type === MESSAGE_TYPES.GQL_ERROR) {\n\t\t\tconst subscriptionState = SUBSCRIPTION_STATUS.FAILED;\n\t\t\tif (observer) {\n\t\t\t\tthis.subscriptionObserverMap.set(id, {\n\t\t\t\t\tobserver,\n\t\t\t\t\tquery,\n\t\t\t\t\tvariables,\n\t\t\t\t\tstartAckTimeoutId,\n\t\t\t\t\tsubscriptionReadyCallback,\n\t\t\t\t\tsubscriptionFailedCallback,\n\t\t\t\t\tsubscriptionState,\n\t\t\t\t});\n\n\t\t\t\tobserver.error({\n\t\t\t\t\terrors: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t...new GraphQLError(\n\t\t\t\t\t\t\t\t`${CONTROL_MSG.CONNECTION_FAILED}: ${JSON.stringify(payload)}`\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t});\n\t\t\t\tif (startAckTimeoutId) clearTimeout(startAckTimeoutId);\n\n\t\t\t\tobserver.complete();\n\t\t\t\tif (typeof subscriptionFailedCallback === 'function') {\n\t\t\t\t\tsubscriptionFailedCallback();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _errorDisconnect(msg: string) {\n\t\tlogger.debug(`Disconnect error: ${msg}`);\n\t\tthis.subscriptionObserverMap.forEach(({ observer }) => {\n\t\t\tif (observer && !observer.closed) {\n\t\t\t\tobserver.error({\n\t\t\t\t\terrors: [{ ...new GraphQLError(msg) }],\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t\tthis.subscriptionObserverMap.clear();\n\t\tif (this.awsRealTimeSocket) {\n\t\t\tthis.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n\t\t\tthis.awsRealTimeSocket.close();\n\t\t}\n\n\t\tthis.socketStatus = SOCKET_STATUS.CLOSED;\n\t}\n\n\tprivate _timeoutStartSubscriptionAck(subscriptionId: string) {\n\t\tconst subscriptionObserver =\n\t\t\tthis.subscriptionObserverMap.get(subscriptionId);\n\t\tif (subscriptionObserver) {\n\t\t\tconst { observer, query, variables } = subscriptionObserver;\n\t\t\tif (!observer) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.subscriptionObserverMap.set(subscriptionId, {\n\t\t\t\tobserver,\n\t\t\t\tquery,\n\t\t\t\tvariables,\n\t\t\t\tsubscriptionState: SUBSCRIPTION_STATUS.FAILED,\n\t\t\t});\n\n\t\t\tif (observer && !observer.closed) {\n\t\t\t\tobserver.error({\n\t\t\t\t\terrors: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t...new GraphQLError(\n\t\t\t\t\t\t\t\t`Subscription timeout ${JSON.stringify({\n\t\t\t\t\t\t\t\t\tquery,\n\t\t\t\t\t\t\t\t\tvariables,\n\t\t\t\t\t\t\t\t})}`\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t});\n\t\t\t\t// Cleanup will be automatically executed\n\t\t\t\tobserver.complete();\n\t\t\t}\n\t\t\tlogger.debug(\n\t\t\t\t'timeoutStartSubscription',\n\t\t\t\tJSON.stringify({ query, variables })\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate _initializeWebSocketConnection({\n\t\tappSyncGraphqlEndpoint,\n\t\tauthenticationType,\n\t\tapiKey,\n\t\tregion,\n\t\tadditionalHeaders,\n\t}: AWSAppSyncRealTimeProviderOptions) {\n\t\tif (this.socketStatus === SOCKET_STATUS.READY) {\n\t\t\treturn;\n\t\t}\n\t\treturn new Promise(async (res, rej) => {\n\t\t\tthis.promiseArray.push({ res, rej });\n\n\t\t\tif (this.socketStatus === SOCKET_STATUS.CLOSED) {\n\t\t\t\ttry {\n\t\t\t\t\tthis.socketStatus = SOCKET_STATUS.CONNECTING;\n\n\t\t\t\t\tconst payloadString = '{}';\n\t\t\t\t\tconst headerString = JSON.stringify(\n\t\t\t\t\t\tawait this._awsRealTimeHeaderBasedAuth({\n\t\t\t\t\t\t\tauthenticationType,\n\t\t\t\t\t\t\tpayload: payloadString,\n\t\t\t\t\t\t\tcanonicalUri: '/connect',\n\t\t\t\t\t\t\tapiKey,\n\t\t\t\t\t\t\tappSyncGraphqlEndpoint,\n\t\t\t\t\t\t\tregion,\n\t\t\t\t\t\t\tadditionalHeaders,\n\t\t\t\t\t\t})\n\t\t\t\t\t);\n\t\t\t\t\tconst headerQs = Buffer.from(headerString).toString('base64');\n\n\t\t\t\t\tconst payloadQs = Buffer.from(payloadString).toString('base64');\n\n\t\t\t\t\tlet discoverableEndpoint = appSyncGraphqlEndpoint ?? '';\n\n\t\t\t\t\tif (this.isCustomDomain(discoverableEndpoint)) {\n\t\t\t\t\t\tdiscoverableEndpoint =\n\t\t\t\t\t\t\tdiscoverableEndpoint.concat(customDomainPath);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdiscoverableEndpoint = discoverableEndpoint\n\t\t\t\t\t\t\t.replace('appsync-api', 'appsync-realtime-api')\n\t\t\t\t\t\t\t.replace('gogi-beta', 'grt-beta');\n\t\t\t\t\t}\n\n\t\t\t\t\t// Creating websocket url with required query strings\n\t\t\t\t\tconst protocol = this.isSSLEnabled ? 'wss://' : 'ws://';\n\t\t\t\t\tdiscoverableEndpoint = discoverableEndpoint\n\t\t\t\t\t\t.replace('https://', protocol)\n\t\t\t\t\t\t.replace('http://', protocol);\n\n\t\t\t\t\tconst awsRealTimeUrl = `${discoverableEndpoint}?header=${headerQs}&payload=${payloadQs}`;\n\n\t\t\t\t\tawait this._initializeRetryableHandshake(awsRealTimeUrl);\n\n\t\t\t\t\tthis.promiseArray.forEach(({ res }) => {\n\t\t\t\t\t\tlogger.debug('Notifying connection successful');\n\t\t\t\t\t\tres();\n\t\t\t\t\t});\n\t\t\t\t\tthis.socketStatus = SOCKET_STATUS.READY;\n\t\t\t\t\tthis.promiseArray = [];\n\t\t\t\t} catch (err) {\n\t\t\t\t\tthis.promiseArray.forEach(({ rej }) => rej(err));\n\t\t\t\t\tthis.promiseArray = [];\n\t\t\t\t\tif (\n\t\t\t\t\t\tthis.awsRealTimeSocket &&\n\t\t\t\t\t\tthis.awsRealTimeSocket.readyState === WebSocket.OPEN\n\t\t\t\t\t) {\n\t\t\t\t\t\tthis.awsRealTimeSocket.close(3001);\n\t\t\t\t\t}\n\t\t\t\t\tthis.awsRealTimeSocket = undefined;\n\t\t\t\t\tthis.socketStatus = SOCKET_STATUS.CLOSED;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate async _initializeRetryableHandshake(awsRealTimeUrl: string) {\n\t\tlogger.debug(`Initializaling retryable Handshake`);\n\t\tawait jitteredExponentialRetry(\n\t\t\tthis._initializeHandshake.bind(this),\n\t\t\t[awsRealTimeUrl],\n\t\t\tMAX_DELAY_MS\n\t\t);\n\t}\n\n\tprivate async _initializeHandshake(awsRealTimeUrl: string) {\n\t\tlogger.debug(`Initializing handshake ${awsRealTimeUrl}`);\n\t\t// Because connecting the socket is async, is waiting until connection is open\n\t\t// Step 1: connect websocket\n\t\ttry {\n\t\t\tawait (() => {\n\t\t\t\treturn new Promise<void>((res, rej) => {\n\t\t\t\t\tconst newSocket = this.getNewWebSocket(awsRealTimeUrl, 'graphql-ws');\n\t\t\t\t\tnewSocket.onerror = () => {\n\t\t\t\t\t\tlogger.debug(`WebSocket connection error`);\n\t\t\t\t\t};\n\t\t\t\t\tnewSocket.onclose = () => {\n\t\t\t\t\t\tthis.connectionStateMonitor.record(\n\t\t\t\t\t\t\tCONNECTION_CHANGE.CONNECTION_FAILED\n\t\t\t\t\t\t);\n\t\t\t\t\t\trej(new Error('Connection handshake error'));\n\t\t\t\t\t};\n\t\t\t\t\tnewSocket.onopen = () => {\n\t\t\t\t\t\tthis.awsRealTimeSocket = newSocket;\n\t\t\t\t\t\treturn res();\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t})();\n\n\t\t\t// Step 2: wait for ack from AWS AppSyncReaTime after sending init\n\t\t\tawait (() => {\n\t\t\t\treturn new Promise((res, rej) => {\n\t\t\t\t\tif (this.awsRealTimeSocket) {\n\t\t\t\t\t\tlet ackOk = false;\n\t\t\t\t\t\tthis.awsRealTimeSocket.onerror = error => {\n\t\t\t\t\t\t\tlogger.debug(`WebSocket error ${JSON.stringify(error)}`);\n\t\t\t\t\t\t};\n\t\t\t\t\t\tthis.awsRealTimeSocket.onclose = event => {\n\t\t\t\t\t\t\tlogger.debug(`WebSocket closed ${event.reason}`);\n\t\t\t\t\t\t\trej(new Error(JSON.stringify(event)));\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tthis.awsRealTimeSocket.onmessage = (message: MessageEvent) => {\n\t\t\t\t\t\t\tlogger.debug(\n\t\t\t\t\t\t\t\t`subscription message from AWS AppSyncRealTime: ${message.data} `\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tconst data = JSON.parse(message.data);\n\t\t\t\t\t\t\tconst {\n\t\t\t\t\t\t\t\ttype,\n\t\t\t\t\t\t\t\tpayload: {\n\t\t\t\t\t\t\t\t\tconnectionTimeoutMs = DEFAULT_KEEP_ALIVE_TIMEOUT,\n\t\t\t\t\t\t\t\t} = {},\n\t\t\t\t\t\t\t} = data;\n\t\t\t\t\t\t\tif (type === MESSAGE_TYPES.GQL_CONNECTION_ACK) {\n\t\t\t\t\t\t\t\tackOk = true;\n\t\t\t\t\t\t\t\tif (this.awsRealTimeSocket) {\n\t\t\t\t\t\t\t\t\tthis.keepAliveTimeout = connectionTimeoutMs;\n\t\t\t\t\t\t\t\t\tthis.awsRealTimeSocket.onmessage =\n\t\t\t\t\t\t\t\t\t\tthis._handleIncomingSubscriptionMessage.bind(this);\n\t\t\t\t\t\t\t\t\tthis.awsRealTimeSocket.onerror = err => {\n\t\t\t\t\t\t\t\t\t\tlogger.debug(err);\n\t\t\t\t\t\t\t\t\t\tthis._errorDisconnect(CONTROL_MSG.CONNECTION_CLOSED);\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\tthis.awsRealTimeSocket.onclose = event => {\n\t\t\t\t\t\t\t\t\t\tlogger.debug(`WebSocket closed ${event.reason}`);\n\t\t\t\t\t\t\t\t\t\tthis._errorDisconnect(CONTROL_MSG.CONNECTION_CLOSED);\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tres('Cool, connected to AWS AppSyncRealTime');\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (type === MESSAGE_TYPES.GQL_CONNECTION_ERROR) {\n\t\t\t\t\t\t\t\tconst {\n\t\t\t\t\t\t\t\t\tpayload: {\n\t\t\t\t\t\t\t\t\t\terrors: [{ errorType = '', errorCode = 0 } = {}] = [],\n\t\t\t\t\t\t\t\t\t} = {},\n\t\t\t\t\t\t\t\t} = data;\n\n\t\t\t\t\t\t\t\trej({ errorType, errorCode });\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tconst gqlInit = {\n\t\t\t\t\t\t\ttype: MESSAGE_TYPES.GQL_CONNECTION_INIT,\n\t\t\t\t\t\t};\n\t\t\t\t\t\tthis.awsRealTimeSocket.send(JSON.stringify(gqlInit));\n\n\t\t\t\t\t\tconst checkAckOk = (ackOk: boolean) => {\n\t\t\t\t\t\t\tif (!ackOk) {\n\t\t\t\t\t\t\t\tthis.connectionStateMonitor.record(\n\t\t\t\t\t\t\t\t\tCONNECTION_CHANGE.CONNECTION_FAILED\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\trej(\n\t\t\t\t\t\t\t\t\tnew Error(\n\t\t\t\t\t\t\t\t\t\t`Connection timeout: ack from AWSAppSyncRealTime was not received after ${CONNECTION_INIT_TIMEOUT} ms`\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tsetTimeout(() => checkAckOk(ackOk), CONNECTION_INIT_TIMEOUT);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t})();\n\t\t} catch (err) {\n\t\t\tconst { errorType, errorCode } = err as {\n\t\t\t\terrorType: string;\n\t\t\t\terrorCode: number;\n\t\t\t};\n\n\t\t\tif (NON_RETRYABLE_CODES.includes(errorCode)) {\n\t\t\t\tthrow new NonRetryableError(errorType);\n\t\t\t} else if (errorType) {\n\t\t\t\tthrow new Error(errorType);\n\t\t\t} else {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async _awsRealTimeHeaderBasedAuth({\n\t\tauthenticationType,\n\t\tpayload,\n\t\tcanonicalUri,\n\t\tappSyncGraphqlEndpoint,\n\t\tapiKey,\n\t\tregion,\n\t\tadditionalHeaders,\n\t}: AWSAppSyncRealTimeProviderOptions): Promise<any> {\n\t\tconst headerHandler: {\n\t\t\t[key in GraphqlAuthModes]: (AWSAppSyncRealTimeAuthInput) => {};\n\t\t} = {\n\t\t\tAPI_KEY: this._awsRealTimeApiKeyHeader.bind(this),\n\t\t\tAWS_IAM: this._awsRealTimeIAMHeader.bind(this),\n\t\t\tOPENID_CONNECT: this._awsRealTimeOPENIDHeader.bind(this),\n\t\t\tAMAZON_COGNITO_USER_POOLS: this._awsRealTimeCUPHeader.bind(this),\n\t\t\tAWS_LAMBDA: this._customAuthHeader,\n\t\t};\n\n\t\tif (!authenticationType || !headerHandler[authenticationType]) {\n\t\t\tlogger.debug(`Authentication type ${authenticationType} not supported`);\n\t\t\treturn '';\n\t\t} else {\n\t\t\tconst handler = headerHandler[authenticationType];\n\n\t\t\tconst { host } = url.parse(appSyncGraphqlEndpoint ?? '');\n\n\t\t\tlogger.debug(`Authenticating with ${authenticationType}`);\n\n\t\t\tconst result = await handler({\n\t\t\t\tpayload,\n\t\t\t\tcanonicalUri,\n\t\t\t\tappSyncGraphqlEndpoint,\n\t\t\t\tapiKey,\n\t\t\t\tregion,\n\t\t\t\thost,\n\t\t\t\tadditionalHeaders,\n\t\t\t});\n\n\t\t\treturn result;\n\t\t}\n\t}\n\n\tprivate async _awsRealTimeCUPHeader({ host }: AWSAppSyncRealTimeAuthInput) {\n\t\tconst session = await Auth.currentSession();\n\t\treturn {\n\t\t\tAuthorization: session.getAccessToken().getJwtToken(),\n\t\t\thost,\n\t\t};\n\t}\n\n\tprivate async _awsRealTimeOPENIDHeader({\n\t\thost,\n\t}: AWSAppSyncRealTimeAuthInput) {\n\t\tlet token;\n\t\t// backwards compatibility\n\t\tconst federatedInfo = await Cache.getItem('federatedInfo');\n\t\tif (federatedInfo) {\n\t\t\ttoken = federatedInfo.token;\n\t\t} else {\n\t\t\tconst currentUser = await Auth.currentAuthenticatedUser();\n\t\t\tif (currentUser) {\n\t\t\t\ttoken = currentUser.token;\n\t\t\t}\n\t\t}\n\t\tif (!token) {\n\t\t\tthrow new Error('No federated jwt');\n\t\t}\n\t\treturn {\n\t\t\tAuthorization: token,\n\t\t\thost,\n\t\t};\n\t}\n\n\tprivate async _awsRealTimeApiKeyHeader({\n\t\tapiKey,\n\t\thost,\n\t}: AWSAppSyncRealTimeAuthInput) {\n\t\tconst dt = new Date();\n\t\tconst dtStr = dt.toISOString().replace(/[:\\-]|\\.\\d{3}/g, '');\n\n\t\treturn {\n\t\t\thost,\n\t\t\t'x-amz-date': dtStr,\n\t\t\t'x-api-key': apiKey,\n\t\t};\n\t}\n\n\tprivate async _awsRealTimeIAMHeader({\n\t\tpayload,\n\t\tcanonicalUri,\n\t\tappSyncGraphqlEndpoint,\n\t\tregion,\n\t}: AWSAppSyncRealTimeAuthInput) {\n\t\tconst endpointInfo = {\n\t\t\tregion,\n\t\t\tservice: 'appsync',\n\t\t};\n\n\t\tconst credentialsOK = await this._ensureCredentials();\n\t\tif (!credentialsOK) {\n\t\t\tthrow new Error('No credentials');\n\t\t}\n\t\tconst creds = await Credentials.get().then((credentials: any) => {\n\t\t\tconst { secretAccessKey, accessKeyId, sessionToken } =\n\t\t\t\tcredentials as ICredentials;\n\n\t\t\treturn {\n\t\t\t\tsecret_key: secretAccessKey,\n\t\t\t\taccess_key: accessKeyId,\n\t\t\t\tsession_token: sessionToken,\n\t\t\t};\n\t\t});\n\n\t\tconst request = {\n\t\t\turl: `${appSyncGraphqlEndpoint}${canonicalUri}`,\n\t\t\tdata: payload,\n\t\t\tmethod: 'POST',\n\t\t\theaders: { ...AWS_APPSYNC_REALTIME_HEADERS },\n\t\t};\n\n\t\tconst signed_params = Signer.sign(request, creds, endpointInfo);\n\t\treturn signed_params.headers;\n\t}\n\n\tprivate _customAuthHeader({\n\t\thost,\n\t\tadditionalHeaders,\n\t}: AWSAppSyncRealTimeAuthInput) {\n\t\tif (!additionalHeaders || !additionalHeaders['Authorization']) {\n\t\t\tthrow new Error('No auth token specified');\n\t\t}\n\n\t\treturn {\n\t\t\tAuthorization: additionalHeaders.Authorization,\n\t\t\thost,\n\t\t};\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_ensureCredentials() {\n\t\treturn Credentials.get()\n\t\t\t.then((credentials: any) => {\n\t\t\t\tif (!credentials) return false;\n\t\t\t\tconst cred = Credentials.shear(credentials);\n\t\t\t\tlogger.debug('set credentials for AWSAppSyncRealTimeProvider', cred);\n\n\t\t\t\treturn true;\n\t\t\t})\n\t\t\t.catch((err: any) => {\n\t\t\t\tlogger.warn('ensure credentials error', err);\n\t\t\t\treturn false;\n\t\t\t});\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}