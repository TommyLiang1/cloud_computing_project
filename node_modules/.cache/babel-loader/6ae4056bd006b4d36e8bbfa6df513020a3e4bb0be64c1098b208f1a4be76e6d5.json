{"ast":null,"code":"import { useCallbackRef as e } from \"@radix-ui/react-use-callback-ref\";\nimport { Primitive as t } from \"@radix-ui/react-primitive\";\nimport { useComposedRefs as n } from \"@radix-ui/react-compose-refs\";\nimport * as o from \"react\";\nimport u from \"@babel/runtime/helpers/esm/extends\";\nconst c = {\n  bubbles: !1,\n  cancelable: !0\n};\nexport const FocusScope = /*#__PURE__*/o.forwardRef((i, f) => {\n  const {\n      loop: l = !1,\n      trapped: m = !1,\n      onMountAutoFocus: p,\n      onUnmountAutoFocus: v,\n      ...E\n    } = i,\n    [F, S] = o.useState(null),\n    b = e(p),\n    T = e(v),\n    y = o.useRef(null),\n    L = n(f, e => S(e)),\n    h = o.useRef({\n      paused: !1,\n      pause() {\n        this.paused = !0;\n      },\n      resume() {\n        this.paused = !1;\n      }\n    }).current;\n  o.useEffect(() => {\n    if (m) {\n      function e(e) {\n        if (h.paused || !F) return;\n        const t = e.target;\n        F.contains(t) ? y.current = t : a(y.current, {\n          select: !0\n        });\n      }\n      function t(e) {\n        !h.paused && F && (F.contains(e.relatedTarget) || a(y.current, {\n          select: !0\n        }));\n      }\n      return document.addEventListener(\"focusin\", e), document.addEventListener(\"focusout\", t), () => {\n        document.removeEventListener(\"focusin\", e), document.removeEventListener(\"focusout\", t);\n      };\n    }\n  }, [m, F, h.paused]), o.useEffect(() => {\n    if (F) {\n      d.add(h);\n      const t = document.activeElement;\n      if (!F.contains(t)) {\n        const n = new Event(\"focusScope.autoFocusOnMount\", c);\n        F.addEventListener(\"focusScope.autoFocusOnMount\", b), F.dispatchEvent(n), n.defaultPrevented || (!function (e) {\n          let {\n            select: t = !1\n          } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n          const n = document.activeElement;\n          for (const o of e) if (a(o, {\n            select: t\n          }), document.activeElement !== n) return;\n        }((e = r(F), e.filter(e => \"A\" !== e.tagName)), {\n          select: !0\n        }), document.activeElement === t && a(F));\n      }\n      return () => {\n        F.removeEventListener(\"focusScope.autoFocusOnMount\", b), setTimeout(() => {\n          const e = new Event(\"focusScope.autoFocusOnUnmount\", c);\n          F.addEventListener(\"focusScope.autoFocusOnUnmount\", T), F.dispatchEvent(e), e.defaultPrevented || a(null != t ? t : document.body, {\n            select: !0\n          }), F.removeEventListener(\"focusScope.autoFocusOnUnmount\", T), d.remove(h);\n        }, 0);\n      };\n    }\n    var e;\n  }, [F, b, T, h]);\n  const N = o.useCallback(e => {\n    if (!l && !m) return;\n    if (h.paused) return;\n    const t = \"Tab\" === e.key && !e.altKey && !e.ctrlKey && !e.metaKey,\n      n = document.activeElement;\n    if (t && n) {\n      const t = e.currentTarget,\n        [o, u] = function (e) {\n          const t = r(e),\n            n = s(t, e),\n            o = s(t.reverse(), e);\n          return [n, o];\n        }(t);\n      o && u ? e.shiftKey || n !== u ? e.shiftKey && n === o && (e.preventDefault(), l && a(u, {\n        select: !0\n      })) : (e.preventDefault(), l && a(o, {\n        select: !0\n      })) : n === t && e.preventDefault();\n    }\n  }, [l, m, h.paused]); /*#__PURE__*/\n  return o.createElement(t.div, u({\n    tabIndex: -1\n  }, E, {\n    ref: L,\n    onKeyDown: N\n  }));\n}); /*#__PURE__*/\nfunction r(e) {\n  const t = [],\n    n = document.createTreeWalker(e, NodeFilter.SHOW_ELEMENT, {\n      acceptNode: e => {\n        const t = \"INPUT\" === e.tagName && \"hidden\" === e.type;\n        return e.disabled || e.hidden || t ? NodeFilter.FILTER_SKIP : e.tabIndex >= 0 ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;\n      }\n    });\n  for (; n.nextNode();) t.push(n.currentNode);\n  return t;\n}\nfunction s(e, t) {\n  for (const n of e) if (!i(n, {\n    upTo: t\n  })) return n;\n}\nfunction i(e, _ref) {\n  let {\n    upTo: t\n  } = _ref;\n  if (\"hidden\" === getComputedStyle(e).visibility) return !0;\n  for (; e;) {\n    if (void 0 !== t && e === t) return !1;\n    if (\"none\" === getComputedStyle(e).display) return !0;\n    e = e.parentElement;\n  }\n  return !1;\n}\nfunction a(e) {\n  let {\n    select: t = !1\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (e && e.focus) {\n    const n = document.activeElement;\n    e.focus({\n      preventScroll: !0\n    }), e !== n && function (e) {\n      return e instanceof HTMLInputElement && \"select\" in e;\n    }(e) && t && e.select();\n  }\n}\nconst d = function () {\n  let e = [];\n  return {\n    add(t) {\n      const n = e[0];\n      t !== n && (null == n || n.pause()), e = f(e, t), e.unshift(t);\n    },\n    remove(t) {\n      var n;\n      e = f(e, t), null === (n = e[0]) || void 0 === n || n.resume();\n    }\n  };\n}();\nfunction f(e, t) {\n  const n = [...e],\n    o = n.indexOf(t);\n  return -1 !== o && n.splice(o, 1), n;\n}\nexport const Root = FocusScope;","map":{"version":3,"mappings":"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","names":["EVENT_OPTIONS","bubbles","cancelable","FocusScope","React","forwardRef","props","forwardedRef","loop","trapped","onMountAutoFocus","onMountAutoFocusProp","onUnmountAutoFocus","onUnmountAutoFocusProp","scopeProps","container","setContainer","useState","useCallbackRef","lastFocusedElementRef","useRef","composedRefs","useComposedRefs","node","focusScope","paused","pause","this","resume","current","useEffect","handleFocusIn","event","target","contains","focus","select","handleFocusOut","relatedTarget","document","addEventListener","removeEventListener","focusScopesStack","add","previouslyFocusedElement","activeElement","mountEvent","Event","dispatchEvent","defaultPrevented","candidates","candidate","focusFirst","items","getTabbableCandidates","filter","item","tagName","setTimeout","unmountEvent","body","remove","handleKeyDown","useCallback","isTabKey","key","altKey","ctrlKey","metaKey","focusedElement","currentTarget","first","last","findVisible","reverse","getTabbableEdges","shiftKey","preventDefault","_react","Primitive","div","_babelRuntimeHelpersEsmExtends","tabIndex","ref","onKeyDown","nodes","walker","createTreeWalker","NodeFilter","SHOW_ELEMENT","acceptNode","isHiddenInput","type","disabled","hidden","FILTER_SKIP","FILTER_ACCEPT","nextNode","push","currentNode","elements","element","isHidden","upTo","getComputedStyle","visibility","undefined","display","parentElement","preventScroll","HTMLInputElement","isSelectableInput","stack","activeFocusScope","arrayRemove","unshift","createFocusScopesStack","array","updatedArray","index","indexOf","splice","Root"],"sources":["C:\\Users\\weida\\Desktop\\playground_CC\\node_modules\\@aws-amplify\\ui-react\\node_modules\\@radix-ui\\react-dropdown-menu\\node_modules\\@radix-ui\\react-menu\\node_modules\\@radix-ui\\react-focus-scope\\dist\\packages\\react\\focus-scope\\src\\FocusScope.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport { useCallbackRef } from '@radix-ui/react-use-callback-ref';\n\nimport type * as Radix from '@radix-ui/react-primitive';\n\nconst AUTOFOCUS_ON_MOUNT = 'focusScope.autoFocusOnMount';\nconst AUTOFOCUS_ON_UNMOUNT = 'focusScope.autoFocusOnUnmount';\nconst EVENT_OPTIONS = { bubbles: false, cancelable: true };\n\ntype FocusableTarget = HTMLElement | { focus(): void };\n\n/* -------------------------------------------------------------------------------------------------\n * FocusScope\n * -----------------------------------------------------------------------------------------------*/\n\nconst FOCUS_SCOPE_NAME = 'FocusScope';\n\ntype FocusScopeElement = React.ElementRef<typeof Primitive.div>;\ntype PrimitiveDivProps = Radix.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface FocusScopeProps extends PrimitiveDivProps {\n  /**\n   * When `true`, tabbing from last item will focus first tabbable\n   * and shift+tab from first item will focus last tababble.\n   * @defaultValue false\n   */\n  loop?: boolean;\n\n  /**\n   * When `true`, focus cannot escape the focus scope via keyboard,\n   * pointer, or a programmatic focus.\n   * @defaultValue false\n   */\n  trapped?: boolean;\n\n  /**\n   * Event handler called when auto-focusing on mount.\n   * Can be prevented.\n   */\n  onMountAutoFocus?: (event: Event) => void;\n\n  /**\n   * Event handler called when auto-focusing on unmount.\n   * Can be prevented.\n   */\n  onUnmountAutoFocus?: (event: Event) => void;\n}\n\nconst FocusScope = React.forwardRef<FocusScopeElement, FocusScopeProps>((props, forwardedRef) => {\n  const {\n    loop = false,\n    trapped = false,\n    onMountAutoFocus: onMountAutoFocusProp,\n    onUnmountAutoFocus: onUnmountAutoFocusProp,\n    ...scopeProps\n  } = props;\n  const [container, setContainer] = React.useState<HTMLElement | null>(null);\n  const onMountAutoFocus = useCallbackRef(onMountAutoFocusProp);\n  const onUnmountAutoFocus = useCallbackRef(onUnmountAutoFocusProp);\n  const lastFocusedElementRef = React.useRef<HTMLElement | null>(null);\n  const composedRefs = useComposedRefs(forwardedRef, (node) => setContainer(node));\n\n  const focusScope = React.useRef({\n    paused: false,\n    pause() {\n      this.paused = true;\n    },\n    resume() {\n      this.paused = false;\n    },\n  }).current;\n\n  // Takes care of trapping focus if focus is moved outside programmatically for example\n  React.useEffect(() => {\n    if (trapped) {\n      function handleFocusIn(event: FocusEvent) {\n        if (focusScope.paused || !container) return;\n        const target = event.target as HTMLElement | null;\n        if (container.contains(target)) {\n          lastFocusedElementRef.current = target;\n        } else {\n          focus(lastFocusedElementRef.current, { select: true });\n        }\n      }\n\n      function handleFocusOut(event: FocusEvent) {\n        if (focusScope.paused || !container) return;\n        if (!container.contains(event.relatedTarget as HTMLElement | null)) {\n          focus(lastFocusedElementRef.current, { select: true });\n        }\n      }\n\n      document.addEventListener('focusin', handleFocusIn);\n      document.addEventListener('focusout', handleFocusOut);\n      return () => {\n        document.removeEventListener('focusin', handleFocusIn);\n        document.removeEventListener('focusout', handleFocusOut);\n      };\n    }\n  }, [trapped, container, focusScope.paused]);\n\n  React.useEffect(() => {\n    if (container) {\n      focusScopesStack.add(focusScope);\n      const previouslyFocusedElement = document.activeElement as HTMLElement | null;\n      const hasFocusedCandidate = container.contains(previouslyFocusedElement);\n\n      if (!hasFocusedCandidate) {\n        const mountEvent = new Event(AUTOFOCUS_ON_MOUNT, EVENT_OPTIONS);\n        container.addEventListener(AUTOFOCUS_ON_MOUNT, onMountAutoFocus);\n        container.dispatchEvent(mountEvent);\n        if (!mountEvent.defaultPrevented) {\n          focusFirst(removeLinks(getTabbableCandidates(container)), { select: true });\n          if (document.activeElement === previouslyFocusedElement) {\n            focus(container);\n          }\n        }\n      }\n\n      return () => {\n        container.removeEventListener(AUTOFOCUS_ON_MOUNT, onMountAutoFocus);\n\n        // We hit a react bug (fixed in v17) with focusing in unmount.\n        // We need to delay the focus a little to get around it for now.\n        // See: https://github.com/facebook/react/issues/17894\n        setTimeout(() => {\n          const unmountEvent = new Event(AUTOFOCUS_ON_UNMOUNT, EVENT_OPTIONS);\n          container.addEventListener(AUTOFOCUS_ON_UNMOUNT, onUnmountAutoFocus);\n          container.dispatchEvent(unmountEvent);\n          if (!unmountEvent.defaultPrevented) {\n            focus(previouslyFocusedElement ?? document.body, { select: true });\n          }\n          // we need to remove the listener after we `dispatchEvent`\n          container.removeEventListener(AUTOFOCUS_ON_UNMOUNT, onUnmountAutoFocus);\n\n          focusScopesStack.remove(focusScope);\n        }, 0);\n      };\n    }\n  }, [container, onMountAutoFocus, onUnmountAutoFocus, focusScope]);\n\n  // Takes care of looping focus (when tabbing whilst at the edges)\n  const handleKeyDown = React.useCallback(\n    (event: React.KeyboardEvent) => {\n      if (!loop && !trapped) return;\n      if (focusScope.paused) return;\n\n      const isTabKey = event.key === 'Tab' && !event.altKey && !event.ctrlKey && !event.metaKey;\n      const focusedElement = document.activeElement as HTMLElement | null;\n\n      if (isTabKey && focusedElement) {\n        const container = event.currentTarget as HTMLElement;\n        const [first, last] = getTabbableEdges(container);\n        const hasTabbableElementsInside = first && last;\n\n        // we can only wrap focus if we have tabbable edges\n        if (!hasTabbableElementsInside) {\n          if (focusedElement === container) event.preventDefault();\n        } else {\n          if (!event.shiftKey && focusedElement === last) {\n            event.preventDefault();\n            if (loop) focus(first, { select: true });\n          } else if (event.shiftKey && focusedElement === first) {\n            event.preventDefault();\n            if (loop) focus(last, { select: true });\n          }\n        }\n      }\n    },\n    [loop, trapped, focusScope.paused]\n  );\n\n  return (\n    <Primitive.div tabIndex={-1} {...scopeProps} ref={composedRefs} onKeyDown={handleKeyDown} />\n  );\n});\n\nFocusScope.displayName = FOCUS_SCOPE_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * Utils\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * Attempts focusing the first element in a list of candidates.\n * Stops when focus has actually moved.\n */\nfunction focusFirst(candidates: HTMLElement[], { select = false } = {}) {\n  const previouslyFocusedElement = document.activeElement;\n  for (const candidate of candidates) {\n    focus(candidate, { select });\n    if (document.activeElement !== previouslyFocusedElement) return;\n  }\n}\n\n/**\n * Returns the first and last tabbable elements inside a container.\n */\nfunction getTabbableEdges(container: HTMLElement) {\n  const candidates = getTabbableCandidates(container);\n  const first = findVisible(candidates, container);\n  const last = findVisible(candidates.reverse(), container);\n  return [first, last] as const;\n}\n\n/**\n * Returns a list of potential tabbable candidates.\n *\n * NOTE: This is only a close approximation. For example it doesn't take into account cases like when\n * elements are not visible. This cannot be worked out easily by just reading a property, but rather\n * necessitate runtime knowledge (computed styles, etc). We deal with these cases separately.\n *\n * See: https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker\n * Credit: https://github.com/discord/focus-layers/blob/master/src/util/wrapFocus.tsx#L1\n */\nfunction getTabbableCandidates(container: HTMLElement) {\n  const nodes: HTMLElement[] = [];\n  const walker = document.createTreeWalker(container, NodeFilter.SHOW_ELEMENT, {\n    acceptNode: (node: any) => {\n      const isHiddenInput = node.tagName === 'INPUT' && node.type === 'hidden';\n      if (node.disabled || node.hidden || isHiddenInput) return NodeFilter.FILTER_SKIP;\n      // `.tabIndex` is not the same as the `tabindex` attribute. It works on the\n      // runtime's understanding of tabbability, so this automatically accounts\n      // for any kind of element that could be tabbed to.\n      return node.tabIndex >= 0 ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;\n    },\n  });\n  while (walker.nextNode()) nodes.push(walker.currentNode as HTMLElement);\n  // we do not take into account the order of nodes with positive `tabIndex` as it\n  // hinders accessibility to have tab order different from visual order.\n  return nodes;\n}\n\n/**\n * Returns the first visible element in a list.\n * NOTE: Only checks visibility up to the `container`.\n */\nfunction findVisible(elements: HTMLElement[], container: HTMLElement) {\n  for (const element of elements) {\n    // we stop checking if it's hidden at the `container` level (excluding)\n    if (!isHidden(element, { upTo: container })) return element;\n  }\n}\n\nfunction isHidden(node: HTMLElement, { upTo }: { upTo?: HTMLElement }) {\n  if (getComputedStyle(node).visibility === 'hidden') return true;\n  while (node) {\n    // we stop at `upTo` (excluding it)\n    if (upTo !== undefined && node === upTo) return false;\n    if (getComputedStyle(node).display === 'none') return true;\n    node = node.parentElement as HTMLElement;\n  }\n  return false;\n}\n\nfunction isSelectableInput(element: any): element is FocusableTarget & { select: () => void } {\n  return element instanceof HTMLInputElement && 'select' in element;\n}\n\nfunction focus(element?: FocusableTarget | null, { select = false } = {}) {\n  // only focus if that element is focusable\n  if (element && element.focus) {\n    const previouslyFocusedElement = document.activeElement;\n    // NOTE: we prevent scrolling on focus, to minimize jarring transitions for users\n    element.focus({ preventScroll: true });\n    // only select if its not the same element, it supports selection and we need to select\n    if (element !== previouslyFocusedElement && isSelectableInput(element) && select)\n      element.select();\n  }\n}\n\n/* -------------------------------------------------------------------------------------------------\n * FocusScope stack\n * -----------------------------------------------------------------------------------------------*/\n\ntype FocusScopeAPI = { paused: boolean; pause(): void; resume(): void };\nconst focusScopesStack = createFocusScopesStack();\n\nfunction createFocusScopesStack() {\n  /** A stack of focus scopes, with the active one at the top */\n  let stack: FocusScopeAPI[] = [];\n\n  return {\n    add(focusScope: FocusScopeAPI) {\n      // pause the currently active focus scope (at the top of the stack)\n      const activeFocusScope = stack[0];\n      if (focusScope !== activeFocusScope) {\n        activeFocusScope?.pause();\n      }\n      // remove in case it already exists (because we'll re-add it at the top of the stack)\n      stack = arrayRemove(stack, focusScope);\n      stack.unshift(focusScope);\n    },\n\n    remove(focusScope: FocusScopeAPI) {\n      stack = arrayRemove(stack, focusScope);\n      stack[0]?.resume();\n    },\n  };\n}\n\nfunction arrayRemove<T>(array: T[], item: T) {\n  const updatedArray = [...array];\n  const index = updatedArray.indexOf(item);\n  if (index !== -1) {\n    updatedArray.splice(index, 1);\n  }\n  return updatedArray;\n}\n\nfunction removeLinks(items: HTMLElement[]) {\n  return items.filter((item) => item.tagName !== 'A');\n}\n\nconst Root = FocusScope;\n\nexport {\n  FocusScope,\n  //\n  Root,\n};\nexport type { FocusScopeProps };\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}