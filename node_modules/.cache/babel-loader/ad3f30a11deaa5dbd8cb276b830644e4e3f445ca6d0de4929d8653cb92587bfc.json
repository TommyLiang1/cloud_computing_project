{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __asyncValues = this && this.__asyncValues || function (o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator],\n    i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () {\n    return this;\n  }, i);\n  function verb(n) {\n    i[n] = o[n] && function (v) {\n      return new Promise(function (resolve, reject) {\n        v = o[n](v), settle(resolve, reject, v.done, v.value);\n      });\n    };\n  }\n  function settle(resolve, reject, d, v) {\n    Promise.resolve(v).then(function (v) {\n      resolve({\n        value: v,\n        done: d\n      });\n    }, reject);\n  }\n};\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport AsyncStorageDatabase from './AsyncStorageDatabase';\nimport { ModelPredicateCreator, ModelSortPredicateCreator } from '../../predicates';\nimport { isPredicateObj, OpType, QueryOne } from '../../types';\nimport { DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR, exhaustiveCheck, getIndex, getIndexFromAssociation, isModelConstructor, traverseModel, validatePredicate, sortCompareFunction, keysEqual, getStorename, getIndexKeys, extractPrimaryKeyValues, IDENTIFIER_KEY_SEPARATOR } from '../../util';\nvar logger = new Logger('DataStore');\nvar AsyncStorageAdapter = /** @class */function () {\n  function AsyncStorageAdapter() {}\n  AsyncStorageAdapter.prototype.getStorenameForModel = function (modelConstructor) {\n    var namespace = this.namespaceResolver(modelConstructor);\n    var modelName = modelConstructor.name;\n    return getStorename(namespace, modelName);\n  };\n  // Retrieves primary key values from a model\n  AsyncStorageAdapter.prototype.getIndexKeyValuesFromModel = function (model) {\n    var modelConstructor = Object.getPrototypeOf(model).constructor;\n    var namespaceName = this.namespaceResolver(modelConstructor);\n    var keys = getIndexKeys(this.schema.namespaces[namespaceName], modelConstructor.name);\n    return extractPrimaryKeyValues(model, keys);\n  };\n  // Retrieves concatenated primary key values from a model\n  AsyncStorageAdapter.prototype.getIndexKeyValuesPath = function (model) {\n    return this.getIndexKeyValuesFromModel(model).join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR);\n  };\n  AsyncStorageAdapter.prototype.setUp = function (theSchema, namespaceResolver, modelInstanceCreator, getModelConstructorByModelName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var error_1;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!!this.initPromise) return [3 /*break*/, 1];\n            this.initPromise = new Promise(function (res, rej) {\n              _this.resolve = res;\n              _this.reject = rej;\n            });\n            return [3 /*break*/, 3];\n          case 1:\n            return [4 /*yield*/, this.initPromise];\n          case 2:\n            _a.sent();\n            return [2 /*return*/];\n          case 3:\n            this.schema = theSchema;\n            this.namespaceResolver = namespaceResolver;\n            this.modelInstanceCreator = modelInstanceCreator;\n            this.getModelConstructorByModelName = getModelConstructorByModelName;\n            _a.label = 4;\n          case 4:\n            _a.trys.push([4, 7,, 8]);\n            if (!!this.db) return [3 /*break*/, 6];\n            this.db = new AsyncStorageDatabase();\n            return [4 /*yield*/, this.db.init()];\n          case 5:\n            _a.sent();\n            this.resolve();\n            _a.label = 6;\n          case 6:\n            return [3 /*break*/, 8];\n          case 7:\n            error_1 = _a.sent();\n            this.reject(error_1);\n            return [3 /*break*/, 8];\n          case 8:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AsyncStorageAdapter.prototype.save = function (model, condition) {\n    var e_1, _a;\n    return __awaiter(this, void 0, void 0, function () {\n      var modelConstructor, storeName, namespaceName, connectedModels, set, connectionStoreNames, keyValuesPath, fromDB, predicates, predicateObjs, type, isValid, msg, result, connectionStoreNames_1, connectionStoreNames_1_1, resItem, storeName_1, item, instance, keys, itemKeyValues, itemKeyValuesPath, fromDB_1, opType, modelKeyValues, e_1_1;\n      var _this = this;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            modelConstructor = Object.getPrototypeOf(model).constructor;\n            storeName = this.getStorenameForModel(modelConstructor);\n            namespaceName = this.namespaceResolver(modelConstructor);\n            connectedModels = traverseModel(modelConstructor.name, model, this.schema.namespaces[namespaceName], this.modelInstanceCreator, this.getModelConstructorByModelName);\n            set = new Set();\n            connectionStoreNames = Object.values(connectedModels).map(function (_a) {\n              var modelName = _a.modelName,\n                item = _a.item,\n                instance = _a.instance;\n              var storeName = getStorename(namespaceName, modelName);\n              set.add(storeName);\n              var keys = getIndexKeys(_this.schema.namespaces[namespaceName], modelName);\n              return {\n                storeName: storeName,\n                item: item,\n                instance: instance,\n                keys: keys\n              };\n            });\n            keyValuesPath = this.getIndexKeyValuesPath(model);\n            return [4 /*yield*/, this.db.get(keyValuesPath, storeName)];\n          case 1:\n            fromDB = _b.sent();\n            if (condition && fromDB) {\n              predicates = ModelPredicateCreator.getPredicates(condition);\n              predicateObjs = predicates.predicates, type = predicates.type;\n              isValid = validatePredicate(fromDB, type, predicateObjs);\n              if (!isValid) {\n                msg = 'Conditional update failed';\n                logger.error(msg, {\n                  model: fromDB,\n                  condition: predicateObjs\n                });\n                throw new Error(msg);\n              }\n            }\n            result = [];\n            _b.label = 2;\n          case 2:\n            _b.trys.push([2, 9, 10, 15]);\n            connectionStoreNames_1 = __asyncValues(connectionStoreNames);\n            _b.label = 3;\n          case 3:\n            return [4 /*yield*/, connectionStoreNames_1.next()];\n          case 4:\n            if (!(connectionStoreNames_1_1 = _b.sent(), !connectionStoreNames_1_1.done)) return [3 /*break*/, 8];\n            resItem = connectionStoreNames_1_1.value;\n            storeName_1 = resItem.storeName, item = resItem.item, instance = resItem.instance, keys = resItem.keys;\n            itemKeyValues = keys.map(function (key) {\n              return item[key];\n            });\n            itemKeyValuesPath = itemKeyValues.join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR);\n            return [4 /*yield*/, this.db.get(itemKeyValuesPath, storeName_1)];\n          case 5:\n            fromDB_1 = _b.sent();\n            opType = fromDB_1 ? OpType.UPDATE : OpType.INSERT;\n            modelKeyValues = this.getIndexKeyValuesFromModel(model);\n            if (!(keysEqual(itemKeyValues, modelKeyValues) || opType === OpType.INSERT)) return [3 /*break*/, 7];\n            return [4 /*yield*/, this.db.save(item, storeName_1, keys, itemKeyValuesPath)];\n          case 6:\n            _b.sent();\n            result.push([instance, opType]);\n            _b.label = 7;\n          case 7:\n            return [3 /*break*/, 3];\n          case 8:\n            return [3 /*break*/, 15];\n          case 9:\n            e_1_1 = _b.sent();\n            e_1 = {\n              error: e_1_1\n            };\n            return [3 /*break*/, 15];\n          case 10:\n            _b.trys.push([10,, 13, 14]);\n            if (!(connectionStoreNames_1_1 && !connectionStoreNames_1_1.done && (_a = connectionStoreNames_1.return))) return [3 /*break*/, 12];\n            return [4 /*yield*/, _a.call(connectionStoreNames_1)];\n          case 11:\n            _b.sent();\n            _b.label = 12;\n          case 12:\n            return [3 /*break*/, 14];\n          case 13:\n            if (e_1) throw e_1.error;\n            return [7 /*endfinally*/];\n          case 14:\n            return [7 /*endfinally*/];\n          case 15:\n            return [2 /*return*/, result];\n        }\n      });\n    });\n  };\n  AsyncStorageAdapter.prototype.load = function (namespaceName, srcModelName, records) {\n    var records_1, records_1_1, records_2, records_2_1;\n    var e_2, _a, e_3, _b, e_4, _c;\n    return __awaiter(this, void 0, void 0, function () {\n      var namespace, relations, connectionStoreNames, modelConstructor, relations_1, relations_1_1, relation, fieldName, modelName, targetName, targetNames, relationType, storeName, modelConstructor_1, _d, recordItem, getByFields, allPresent, keys, connectionRecord, getByfield, key, connectionRecord, e_3_1, recordItem, allPresent, keys, connectionRecord, key, connectionRecord, e_4_1, e_2_1;\n      var _this = this;\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            namespace = this.schema.namespaces[namespaceName];\n            relations = namespace.relationships[srcModelName].relationTypes;\n            connectionStoreNames = relations.map(function (_a) {\n              var modelName = _a.modelName;\n              return getStorename(namespaceName, modelName);\n            });\n            modelConstructor = this.getModelConstructorByModelName(namespaceName, srcModelName);\n            if (connectionStoreNames.length === 0) {\n              return [2 /*return*/, records.map(function (record) {\n                return _this.modelInstanceCreator(modelConstructor, record);\n              })];\n            }\n            _e.label = 1;\n          case 1:\n            _e.trys.push([1, 38, 39, 44]);\n            relations_1 = __asyncValues(relations);\n            _e.label = 2;\n          case 2:\n            return [4 /*yield*/, relations_1.next()];\n          case 3:\n            if (!(relations_1_1 = _e.sent(), !relations_1_1.done)) return [3 /*break*/, 37];\n            relation = relations_1_1.value;\n            fieldName = relation.fieldName, modelName = relation.modelName, targetName = relation.targetName, targetNames = relation.targetNames, relationType = relation.relationType;\n            storeName = getStorename(namespaceName, modelName);\n            modelConstructor_1 = this.getModelConstructorByModelName(namespaceName, modelName);\n            _d = relationType;\n            switch (_d) {\n              case 'HAS_ONE':\n                return [3 /*break*/, 4];\n              case 'BELONGS_TO':\n                return [3 /*break*/, 19];\n              case 'HAS_MANY':\n                return [3 /*break*/, 34];\n            }\n            return [3 /*break*/, 35];\n          case 4:\n            _e.trys.push([4, 12, 13, 18]);\n            records_1 = __asyncValues(records);\n            _e.label = 5;\n          case 5:\n            return [4 /*yield*/, records_1.next()];\n          case 6:\n            if (!(records_1_1 = _e.sent(), !records_1_1.done)) return [3 /*break*/, 11];\n            recordItem = records_1_1.value;\n            if (!(targetNames === null || targetNames === void 0 ? void 0 : targetNames.length)) return [3 /*break*/, 8];\n            getByFields = [];\n            allPresent = void 0;\n            // iterate through all targetnames to make sure they are all present in the recordItem\n            allPresent = targetNames.every(function (targetName) {\n              return recordItem[targetName] != null;\n            });\n            if (!allPresent) {\n              return [3 /*break*/, 11];\n            }\n            getByFields = targetNames;\n            keys = getByFields.map(function (getByField) {\n              return recordItem[getByField];\n            }).join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR);\n            return [4 /*yield*/, this.db.get(keys, storeName)];\n          case 7:\n            connectionRecord = _e.sent();\n            recordItem[fieldName] = connectionRecord && this.modelInstanceCreator(modelConstructor_1, connectionRecord);\n            return [3 /*break*/, 10];\n          case 8:\n            getByfield = recordItem[targetName] ? targetName : fieldName;\n            if (!recordItem[getByfield]) return [3 /*break*/, 11];\n            key = recordItem[getByfield];\n            return [4 /*yield*/, this.db.get(key, storeName)];\n          case 9:\n            connectionRecord = _e.sent();\n            recordItem[fieldName] = connectionRecord && this.modelInstanceCreator(modelConstructor_1, connectionRecord);\n            _e.label = 10;\n          case 10:\n            return [3 /*break*/, 5];\n          case 11:\n            return [3 /*break*/, 18];\n          case 12:\n            e_3_1 = _e.sent();\n            e_3 = {\n              error: e_3_1\n            };\n            return [3 /*break*/, 18];\n          case 13:\n            _e.trys.push([13,, 16, 17]);\n            if (!(records_1_1 && !records_1_1.done && (_b = records_1.return))) return [3 /*break*/, 15];\n            return [4 /*yield*/, _b.call(records_1)];\n          case 14:\n            _e.sent();\n            _e.label = 15;\n          case 15:\n            return [3 /*break*/, 17];\n          case 16:\n            if (e_3) throw e_3.error;\n            return [7 /*endfinally*/];\n          case 17:\n            return [7 /*endfinally*/];\n          case 18:\n            return [3 /*break*/, 36];\n          case 19:\n            _e.trys.push([19, 27, 28, 33]);\n            records_2 = __asyncValues(records);\n            _e.label = 20;\n          case 20:\n            return [4 /*yield*/, records_2.next()];\n          case 21:\n            if (!(records_2_1 = _e.sent(), !records_2_1.done)) return [3 /*break*/, 26];\n            recordItem = records_2_1.value;\n            if (!(targetNames === null || targetNames === void 0 ? void 0 : targetNames.length)) return [3 /*break*/, 23];\n            allPresent = void 0;\n            // iterate through all targetnames to make sure they are all present in the recordItem\n            allPresent = targetNames.every(function (targetName) {\n              return recordItem[targetName] != null;\n            });\n            // If not present, there is not yet a connected record\n            if (!allPresent) {\n              return [3 /*break*/, 26];\n            }\n            keys = targetNames.map(function (targetName) {\n              return recordItem[targetName];\n            }).join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR);\n            return [4 /*yield*/, this.db.get(keys, storeName)];\n          case 22:\n            connectionRecord = _e.sent();\n            recordItem[fieldName] = connectionRecord && this.modelInstanceCreator(modelConstructor_1, connectionRecord);\n            targetNames === null || targetNames === void 0 ? void 0 : targetNames.map(function (targetName) {\n              delete recordItem[targetName];\n            });\n            return [3 /*break*/, 25];\n          case 23:\n            if (!recordItem[targetName]) return [3 /*break*/, 25];\n            key = recordItem[targetName];\n            return [4 /*yield*/, this.db.get(key, storeName)];\n          case 24:\n            connectionRecord = _e.sent();\n            recordItem[fieldName] = connectionRecord && this.modelInstanceCreator(modelConstructor_1, connectionRecord);\n            delete recordItem[targetName];\n            _e.label = 25;\n          case 25:\n            return [3 /*break*/, 20];\n          case 26:\n            return [3 /*break*/, 33];\n          case 27:\n            e_4_1 = _e.sent();\n            e_4 = {\n              error: e_4_1\n            };\n            return [3 /*break*/, 33];\n          case 28:\n            _e.trys.push([28,, 31, 32]);\n            if (!(records_2_1 && !records_2_1.done && (_c = records_2.return))) return [3 /*break*/, 30];\n            return [4 /*yield*/, _c.call(records_2)];\n          case 29:\n            _e.sent();\n            _e.label = 30;\n          case 30:\n            return [3 /*break*/, 32];\n          case 31:\n            if (e_4) throw e_4.error;\n            return [7 /*endfinally*/];\n          case 32:\n            return [7 /*endfinally*/];\n          case 33:\n            return [3 /*break*/, 36];\n          case 34:\n            // TODO: Lazy loading\n            return [3 /*break*/, 36];\n          case 35:\n            exhaustiveCheck(relationType);\n            return [3 /*break*/, 36];\n          case 36:\n            return [3 /*break*/, 2];\n          case 37:\n            return [3 /*break*/, 44];\n          case 38:\n            e_2_1 = _e.sent();\n            e_2 = {\n              error: e_2_1\n            };\n            return [3 /*break*/, 44];\n          case 39:\n            _e.trys.push([39,, 42, 43]);\n            if (!(relations_1_1 && !relations_1_1.done && (_a = relations_1.return))) return [3 /*break*/, 41];\n            return [4 /*yield*/, _a.call(relations_1)];\n          case 40:\n            _e.sent();\n            _e.label = 41;\n          case 41:\n            return [3 /*break*/, 43];\n          case 42:\n            if (e_2) throw e_2.error;\n            return [7 /*endfinally*/];\n          case 43:\n            return [7 /*endfinally*/];\n          case 44:\n            return [2 /*return*/, records.map(function (record) {\n              return _this.modelInstanceCreator(modelConstructor, record);\n            })];\n        }\n      });\n    });\n  };\n  AsyncStorageAdapter.prototype.query = function (modelConstructor, predicate, pagination) {\n    return __awaiter(this, void 0, void 0, function () {\n      var storeName, namespaceName, predicates, keys, queryByKey, hasSort, hasPagination, records;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            storeName = this.getStorenameForModel(modelConstructor);\n            namespaceName = this.namespaceResolver(modelConstructor);\n            predicates = predicate && ModelPredicateCreator.getPredicates(predicate);\n            keys = getIndexKeys(this.schema.namespaces[namespaceName], modelConstructor.name);\n            queryByKey = predicates && this.keyValueFromPredicate(predicates, keys);\n            hasSort = pagination && pagination.sort;\n            hasPagination = pagination && pagination.limit;\n            return [4 /*yield*/, function () {\n              return __awaiter(_this, void 0, void 0, function () {\n                var record, filtered, all;\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      if (!queryByKey) return [3 /*break*/, 2];\n                      return [4 /*yield*/, this.getByKey(storeName, queryByKey)];\n                    case 1:\n                      record = _a.sent();\n                      return [2 /*return*/, record ? [record] : []];\n                    case 2:\n                      if (!predicates) return [3 /*break*/, 4];\n                      return [4 /*yield*/, this.filterOnPredicate(storeName, predicates)];\n                    case 3:\n                      filtered = _a.sent();\n                      return [2 /*return*/, this.inMemoryPagination(filtered, pagination)];\n                    case 4:\n                      if (!(hasSort || hasPagination)) return [3 /*break*/, 6];\n                      return [4 /*yield*/, this.getAll(storeName)];\n                    case 5:\n                      all = _a.sent();\n                      return [2 /*return*/, this.inMemoryPagination(all, pagination)];\n                    case 6:\n                      return [2 /*return*/, this.getAll(storeName)];\n                  }\n                });\n              });\n            }()];\n          case 1:\n            records = _a.sent();\n            return [4 /*yield*/, this.load(namespaceName, modelConstructor.name, records)];\n          case 2:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  AsyncStorageAdapter.prototype.getByKey = function (storeName, keyValuePath) {\n    return __awaiter(this, void 0, void 0, function () {\n      var record;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.db.get(keyValuePath, storeName)];\n          case 1:\n            record = _a.sent();\n            return [2 /*return*/, record];\n        }\n      });\n    });\n  };\n  AsyncStorageAdapter.prototype.getAll = function (storeName) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.db.getAll(storeName)];\n          case 1:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  AsyncStorageAdapter.prototype.keyValueFromPredicate = function (predicates, keys) {\n    var e_5, _a;\n    var predicateObjs = predicates.predicates;\n    if (predicateObjs.length !== keys.length) {\n      return;\n    }\n    var keyValues = [];\n    var _loop_1 = function (key) {\n      var predicateObj = predicateObjs.find(function (p) {\n        return isPredicateObj(p) && p.field === key && p.operator === 'eq';\n      });\n      predicateObj && keyValues.push(predicateObj.operand);\n    };\n    try {\n      for (var keys_1 = __values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {\n        var key = keys_1_1.value;\n        _loop_1(key);\n      }\n    } catch (e_5_1) {\n      e_5 = {\n        error: e_5_1\n      };\n    } finally {\n      try {\n        if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return)) _a.call(keys_1);\n      } finally {\n        if (e_5) throw e_5.error;\n      }\n    }\n    return keyValues.length === keys.length ? keyValues.join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR) : undefined;\n  };\n  AsyncStorageAdapter.prototype.filterOnPredicate = function (storeName, predicates) {\n    return __awaiter(this, void 0, void 0, function () {\n      var predicateObjs, type, all, filtered;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            predicateObjs = predicates.predicates, type = predicates.type;\n            return [4 /*yield*/, this.getAll(storeName)];\n          case 1:\n            all = _a.sent();\n            filtered = predicateObjs ? all.filter(function (m) {\n              return validatePredicate(m, type, predicateObjs);\n            }) : all;\n            return [2 /*return*/, filtered];\n        }\n      });\n    });\n  };\n  AsyncStorageAdapter.prototype.inMemoryPagination = function (records, pagination) {\n    if (pagination && records.length > 1) {\n      if (pagination.sort) {\n        var sortPredicates = ModelSortPredicateCreator.getPredicates(pagination.sort);\n        if (sortPredicates.length) {\n          var compareFn = sortCompareFunction(sortPredicates);\n          records.sort(compareFn);\n        }\n      }\n      var _a = pagination.page,\n        page = _a === void 0 ? 0 : _a,\n        _b = pagination.limit,\n        limit = _b === void 0 ? 0 : _b;\n      var start = Math.max(0, page * limit) || 0;\n      var end = limit > 0 ? start + limit : records.length;\n      return records.slice(start, end);\n    }\n    return records;\n  };\n  AsyncStorageAdapter.prototype.queryOne = function (modelConstructor, firstOrLast) {\n    if (firstOrLast === void 0) {\n      firstOrLast = QueryOne.FIRST;\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      var storeName, result;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            storeName = this.getStorenameForModel(modelConstructor);\n            return [4 /*yield*/, this.db.getOne(firstOrLast, storeName)];\n          case 1:\n            result = _a.sent();\n            return [2 /*return*/, result && this.modelInstanceCreator(modelConstructor, result)];\n        }\n      });\n    });\n  };\n  AsyncStorageAdapter.prototype.delete = function (modelOrModelConstructor, condition) {\n    return __awaiter(this, void 0, void 0, function () {\n      var deleteQueue, modelConstructor, nameSpace, models, relations, deletedModels, deletedModels, model, modelConstructor, namespaceName, storeName, keyValuePath, fromDB, msg, predicates, predicateObjs, type, isValid, msg, relations, relations, deletedModels;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            deleteQueue = [];\n            if (!isModelConstructor(modelOrModelConstructor)) return [3 /*break*/, 8];\n            modelConstructor = modelOrModelConstructor;\n            nameSpace = this.namespaceResolver(modelConstructor);\n            return [4 /*yield*/, this.query(modelConstructor, condition)];\n          case 1:\n            models = _a.sent();\n            relations = this.schema.namespaces[nameSpace].relationships[modelConstructor.name].relationTypes;\n            if (!(condition !== undefined)) return [3 /*break*/, 4];\n            return [4 /*yield*/, this.deleteTraverse(relations, models, modelConstructor.name, nameSpace, deleteQueue)];\n          case 2:\n            _a.sent();\n            return [4 /*yield*/, this.deleteItem(deleteQueue)];\n          case 3:\n            _a.sent();\n            deletedModels = deleteQueue.reduce(function (acc, _a) {\n              var items = _a.items;\n              return acc.concat(items);\n            }, []);\n            return [2 /*return*/, [models, deletedModels]];\n          case 4:\n            return [4 /*yield*/, this.deleteTraverse(relations, models, modelConstructor.name, nameSpace, deleteQueue)];\n          case 5:\n            _a.sent();\n            return [4 /*yield*/, this.deleteItem(deleteQueue)];\n          case 6:\n            _a.sent();\n            deletedModels = deleteQueue.reduce(function (acc, _a) {\n              var items = _a.items;\n              return acc.concat(items);\n            }, []);\n            return [2 /*return*/, [models, deletedModels]];\n          case 7:\n            return [3 /*break*/, 15];\n          case 8:\n            model = modelOrModelConstructor;\n            modelConstructor = Object.getPrototypeOf(model).constructor;\n            namespaceName = this.namespaceResolver(modelConstructor);\n            storeName = this.getStorenameForModel(modelConstructor);\n            if (!condition) return [3 /*break*/, 11];\n            keyValuePath = this.getIndexKeyValuesPath(model);\n            return [4 /*yield*/, this.db.get(keyValuePath, storeName)];\n          case 9:\n            fromDB = _a.sent();\n            if (fromDB === undefined) {\n              msg = 'Model instance not found in storage';\n              logger.warn(msg, {\n                model: model\n              });\n              return [2 /*return*/, [[model], []]];\n            }\n            predicates = ModelPredicateCreator.getPredicates(condition);\n            predicateObjs = predicates.predicates, type = predicates.type;\n            isValid = validatePredicate(fromDB, type, predicateObjs);\n            if (!isValid) {\n              msg = 'Conditional update failed';\n              logger.error(msg, {\n                model: fromDB,\n                condition: predicateObjs\n              });\n              throw new Error(msg);\n            }\n            relations = this.schema.namespaces[namespaceName].relationships[modelConstructor.name].relationTypes;\n            return [4 /*yield*/, this.deleteTraverse(relations, [model], modelConstructor.name, namespaceName, deleteQueue)];\n          case 10:\n            _a.sent();\n            return [3 /*break*/, 13];\n          case 11:\n            relations = this.schema.namespaces[namespaceName].relationships[modelConstructor.name].relationTypes;\n            return [4 /*yield*/, this.deleteTraverse(relations, [model], modelConstructor.name, namespaceName, deleteQueue)];\n          case 12:\n            _a.sent();\n            _a.label = 13;\n          case 13:\n            return [4 /*yield*/, this.deleteItem(deleteQueue)];\n          case 14:\n            _a.sent();\n            deletedModels = deleteQueue.reduce(function (acc, _a) {\n              var items = _a.items;\n              return acc.concat(items);\n            }, []);\n            return [2 /*return*/, [[model], deletedModels]];\n          case 15:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AsyncStorageAdapter.prototype.deleteItem = function (deleteQueue) {\n    var deleteQueue_1, deleteQueue_1_1;\n    var e_6, _a, e_7, _b;\n    return __awaiter(this, void 0, void 0, function () {\n      var deleteItem, storeName, items, items_1, items_1_1, item, keyValuesPath, e_7_1, e_6_1;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            _c.trys.push([0, 17, 18, 23]);\n            deleteQueue_1 = __asyncValues(deleteQueue);\n            _c.label = 1;\n          case 1:\n            return [4 /*yield*/, deleteQueue_1.next()];\n          case 2:\n            if (!(deleteQueue_1_1 = _c.sent(), !deleteQueue_1_1.done)) return [3 /*break*/, 16];\n            deleteItem = deleteQueue_1_1.value;\n            storeName = deleteItem.storeName, items = deleteItem.items;\n            _c.label = 3;\n          case 3:\n            _c.trys.push([3, 9, 10, 15]);\n            items_1 = __asyncValues(items);\n            _c.label = 4;\n          case 4:\n            return [4 /*yield*/, items_1.next()];\n          case 5:\n            if (!(items_1_1 = _c.sent(), !items_1_1.done)) return [3 /*break*/, 8];\n            item = items_1_1.value;\n            if (!item) return [3 /*break*/, 7];\n            if (!(typeof item === 'object')) return [3 /*break*/, 7];\n            keyValuesPath = this.getIndexKeyValuesPath(item);\n            return [4 /*yield*/, this.db.delete(keyValuesPath, storeName)];\n          case 6:\n            _c.sent();\n            _c.label = 7;\n          case 7:\n            return [3 /*break*/, 4];\n          case 8:\n            return [3 /*break*/, 15];\n          case 9:\n            e_7_1 = _c.sent();\n            e_7 = {\n              error: e_7_1\n            };\n            return [3 /*break*/, 15];\n          case 10:\n            _c.trys.push([10,, 13, 14]);\n            if (!(items_1_1 && !items_1_1.done && (_b = items_1.return))) return [3 /*break*/, 12];\n            return [4 /*yield*/, _b.call(items_1)];\n          case 11:\n            _c.sent();\n            _c.label = 12;\n          case 12:\n            return [3 /*break*/, 14];\n          case 13:\n            if (e_7) throw e_7.error;\n            return [7 /*endfinally*/];\n          case 14:\n            return [7 /*endfinally*/];\n          case 15:\n            return [3 /*break*/, 1];\n          case 16:\n            return [3 /*break*/, 23];\n          case 17:\n            e_6_1 = _c.sent();\n            e_6 = {\n              error: e_6_1\n            };\n            return [3 /*break*/, 23];\n          case 18:\n            _c.trys.push([18,, 21, 22]);\n            if (!(deleteQueue_1_1 && !deleteQueue_1_1.done && (_a = deleteQueue_1.return))) return [3 /*break*/, 20];\n            return [4 /*yield*/, _a.call(deleteQueue_1)];\n          case 19:\n            _c.sent();\n            _c.label = 20;\n          case 20:\n            return [3 /*break*/, 22];\n          case 21:\n            if (e_6) throw e_6.error;\n            return [7 /*endfinally*/];\n          case 22:\n            return [7 /*endfinally*/];\n          case 23:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Populates the delete Queue with all the items to delete\n   * @param relations\n   * @param models\n   * @param srcModel\n   * @param nameSpace\n   * @param deleteQueue\n   */\n  AsyncStorageAdapter.prototype.deleteTraverse = function (relations, models, srcModel, nameSpace, deleteQueue) {\n    var relations_2, relations_2_1, models_1, models_1_1, models_2, models_2_1;\n    var e_8, _a, e_9, _b, e_10, _c;\n    return __awaiter(this, void 0, void 0, function () {\n      var rel, relationType, modelName, targetName, targetNames, associatedWith, storeName, index, _d, model, hasOneIndex_1, hasConnectedModelFields, keyValuesPath, values_1, isUnidirectionalConnection, allRecords, recordToDelete, hasOneIndex_2, hasOneCustomField, keyValuesPath, value_1, allRecords, recordToDelete, e_9_1, model, keyValues, allRecords, indices, childrenArray, e_10_1, e_8_1;\n      var _this = this;\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            _e.trys.push([0, 38, 39, 44]);\n            relations_2 = __asyncValues(relations);\n            _e.label = 1;\n          case 1:\n            return [4 /*yield*/, relations_2.next()];\n          case 2:\n            if (!(relations_2_1 = _e.sent(), !relations_2_1.done)) return [3 /*break*/, 37];\n            rel = relations_2_1.value;\n            relationType = rel.relationType, modelName = rel.modelName, targetName = rel.targetName, targetNames = rel.targetNames, associatedWith = rel.associatedWith;\n            storeName = getStorename(nameSpace, modelName);\n            index = getIndex(this.schema.namespaces[nameSpace].relationships[modelName].relationTypes, srcModel) ||\n            // if we were unable to find an index via relationTypes\n            // i.e. for keyName connections, attempt to find one by the\n            // associatedWith property\n            getIndexFromAssociation(this.schema.namespaces[nameSpace].relationships[modelName].indexes, rel.associatedWith);\n            _d = relationType;\n            switch (_d) {\n              case 'HAS_ONE':\n                return [3 /*break*/, 3];\n              case 'HAS_MANY':\n                return [3 /*break*/, 20];\n              case 'BELONGS_TO':\n                return [3 /*break*/, 34];\n            }\n            return [3 /*break*/, 35];\n          case 3:\n            _e.trys.push([3, 13, 14, 19]);\n            models_1 = __asyncValues(models);\n            _e.label = 4;\n          case 4:\n            return [4 /*yield*/, models_1.next()];\n          case 5:\n            if (!(models_1_1 = _e.sent(), !models_1_1.done)) return [3 /*break*/, 12];\n            model = models_1_1.value;\n            if (!(targetNames && (targetNames === null || targetNames === void 0 ? void 0 : targetNames.length))) return [3 /*break*/, 8];\n            if (index) {\n              hasOneIndex_1 = index.split(IDENTIFIER_KEY_SEPARATOR);\n            } else if (associatedWith) {\n              if (Array.isArray(associatedWith)) {\n                hasOneIndex_1 = associatedWith;\n              } else {\n                hasOneIndex_1 = [associatedWith];\n              }\n            }\n            hasConnectedModelFields = targetNames.every(function (targetName) {\n              return model.hasOwnProperty(targetName);\n            });\n            keyValuesPath = this.getIndexKeyValuesPath(model);\n            isUnidirectionalConnection = hasOneIndex_1 === associatedWith;\n            if (hasConnectedModelFields && isUnidirectionalConnection) {\n              // Values will be that of the child model\n              values_1 = targetNames.map(function (targetName) {\n                return model[targetName];\n              });\n            } else {\n              // values will be that of the parent model\n              values_1 = keyValuesPath.split(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR);\n            }\n            if (values_1.length === 0) return [3 /*break*/, 12];\n            return [4 /*yield*/, this.db.getAll(storeName)];\n          case 6:\n            allRecords = _e.sent();\n            recordToDelete = void 0;\n            // values === targetNames\n            if (hasConnectedModelFields) {\n              /**\n               * Retrieve record by finding the record where all\n               * targetNames are present on the connected model.\n               *\n               */\n              // recordToDelete = allRecords.filter(childItem =>\n              // \tvalues.every(value => childItem[value] != null)\n              // ) as T[];\n              recordToDelete = allRecords.filter(function (childItem) {\n                return hasOneIndex_1.every(function (index) {\n                  return values_1.includes(childItem[index]);\n                });\n              });\n            } else {\n              // values === keyValuePath\n              recordToDelete = allRecords.filter(function (childItem) {\n                return childItem[hasOneIndex_1] === values_1;\n              });\n            }\n            return [4 /*yield*/, this.deleteTraverse(this.schema.namespaces[nameSpace].relationships[modelName].relationTypes, recordToDelete, modelName, nameSpace, deleteQueue)];\n          case 7:\n            _e.sent();\n            return [3 /*break*/, 11];\n          case 8:\n            hasOneIndex_2 = index || associatedWith;\n            hasOneCustomField = targetName in model;\n            keyValuesPath = this.getIndexKeyValuesPath(model);\n            value_1 = hasOneCustomField ? model[targetName] : keyValuesPath;\n            if (!value_1) return [3 /*break*/, 12];\n            return [4 /*yield*/, this.db.getAll(storeName)];\n          case 9:\n            allRecords = _e.sent();\n            recordToDelete = allRecords.filter(function (childItem) {\n              return childItem[hasOneIndex_2] === value_1;\n            });\n            return [4 /*yield*/, this.deleteTraverse(this.schema.namespaces[nameSpace].relationships[modelName].relationTypes, recordToDelete, modelName, nameSpace, deleteQueue)];\n          case 10:\n            _e.sent();\n            _e.label = 11;\n          case 11:\n            return [3 /*break*/, 4];\n          case 12:\n            return [3 /*break*/, 19];\n          case 13:\n            e_9_1 = _e.sent();\n            e_9 = {\n              error: e_9_1\n            };\n            return [3 /*break*/, 19];\n          case 14:\n            _e.trys.push([14,, 17, 18]);\n            if (!(models_1_1 && !models_1_1.done && (_b = models_1.return))) return [3 /*break*/, 16];\n            return [4 /*yield*/, _b.call(models_1)];\n          case 15:\n            _e.sent();\n            _e.label = 16;\n          case 16:\n            return [3 /*break*/, 18];\n          case 17:\n            if (e_9) throw e_9.error;\n            return [7 /*endfinally*/];\n          case 18:\n            return [7 /*endfinally*/];\n          case 19:\n            return [3 /*break*/, 36];\n          case 20:\n            _e.trys.push([20, 27, 28, 33]);\n            models_2 = __asyncValues(models);\n            _e.label = 21;\n          case 21:\n            return [4 /*yield*/, models_2.next()];\n          case 22:\n            if (!(models_2_1 = _e.sent(), !models_2_1.done)) return [3 /*break*/, 26];\n            model = models_2_1.value;\n            keyValues = this.getIndexKeyValuesFromModel(model);\n            return [4 /*yield*/, this.db.getAll(storeName)];\n          case 23:\n            allRecords = _e.sent();\n            indices = index.split(IDENTIFIER_KEY_SEPARATOR);\n            childrenArray = allRecords.filter(function (childItem) {\n              return indices.every(function (index) {\n                return keyValues.includes(childItem[index]);\n              });\n            });\n            return [4 /*yield*/, this.deleteTraverse(this.schema.namespaces[nameSpace].relationships[modelName].relationTypes, childrenArray, modelName, nameSpace, deleteQueue)];\n          case 24:\n            _e.sent();\n            _e.label = 25;\n          case 25:\n            return [3 /*break*/, 21];\n          case 26:\n            return [3 /*break*/, 33];\n          case 27:\n            e_10_1 = _e.sent();\n            e_10 = {\n              error: e_10_1\n            };\n            return [3 /*break*/, 33];\n          case 28:\n            _e.trys.push([28,, 31, 32]);\n            if (!(models_2_1 && !models_2_1.done && (_c = models_2.return))) return [3 /*break*/, 30];\n            return [4 /*yield*/, _c.call(models_2)];\n          case 29:\n            _e.sent();\n            _e.label = 30;\n          case 30:\n            return [3 /*break*/, 32];\n          case 31:\n            if (e_10) throw e_10.error;\n            return [7 /*endfinally*/];\n          case 32:\n            return [7 /*endfinally*/];\n          case 33:\n            return [3 /*break*/, 36];\n          case 34:\n            // Intentionally blank\n            return [3 /*break*/, 36];\n          case 35:\n            exhaustiveCheck(relationType);\n            return [3 /*break*/, 36];\n          case 36:\n            return [3 /*break*/, 1];\n          case 37:\n            return [3 /*break*/, 44];\n          case 38:\n            e_8_1 = _e.sent();\n            e_8 = {\n              error: e_8_1\n            };\n            return [3 /*break*/, 44];\n          case 39:\n            _e.trys.push([39,, 42, 43]);\n            if (!(relations_2_1 && !relations_2_1.done && (_a = relations_2.return))) return [3 /*break*/, 41];\n            return [4 /*yield*/, _a.call(relations_2)];\n          case 40:\n            _e.sent();\n            _e.label = 41;\n          case 41:\n            return [3 /*break*/, 43];\n          case 42:\n            if (e_8) throw e_8.error;\n            return [7 /*endfinally*/];\n          case 43:\n            return [7 /*endfinally*/];\n          case 44:\n            deleteQueue.push({\n              storeName: getStorename(nameSpace, srcModel),\n              items: models.map(function (record) {\n                return _this.modelInstanceCreator(_this.getModelConstructorByModelName(nameSpace, srcModel), record);\n              })\n            });\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AsyncStorageAdapter.prototype.clear = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.db.clear()];\n          case 1:\n            _a.sent();\n            this.db = undefined;\n            this.initPromise = undefined;\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AsyncStorageAdapter.prototype.batchSave = function (modelConstructor, items) {\n    return __awaiter(this, void 0, void 0, function () {\n      var modelName, namespaceName, storeName, keys, batch, _loop_2, this_1, items_2, items_2_1, item;\n      var e_11, _a;\n      var _this = this;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            modelName = modelConstructor.name;\n            namespaceName = this.namespaceResolver(modelConstructor);\n            storeName = getStorename(namespaceName, modelName);\n            keys = getIndexKeys(this.schema.namespaces[namespaceName], modelName);\n            batch = [];\n            _loop_2 = function (item) {\n              var model = this_1.modelInstanceCreator(modelConstructor, item);\n              var connectedModels = traverseModel(modelName, model, this_1.schema.namespaces[namespaceName], this_1.modelInstanceCreator, this_1.getModelConstructorByModelName);\n              var keyValuesPath = this_1.getIndexKeyValuesPath(model);\n              var instance = connectedModels.find(function (_a) {\n                var instance = _a.instance;\n                var instanceKeyValuesPath = _this.getIndexKeyValuesPath(instance);\n                return keysEqual([instanceKeyValuesPath], [keyValuesPath]);\n              }).instance;\n              batch.push(instance);\n            };\n            this_1 = this;\n            try {\n              for (items_2 = __values(items), items_2_1 = items_2.next(); !items_2_1.done; items_2_1 = items_2.next()) {\n                item = items_2_1.value;\n                _loop_2(item);\n              }\n            } catch (e_11_1) {\n              e_11 = {\n                error: e_11_1\n              };\n            } finally {\n              try {\n                if (items_2_1 && !items_2_1.done && (_a = items_2.return)) _a.call(items_2);\n              } finally {\n                if (e_11) throw e_11.error;\n              }\n            }\n            return [4 /*yield*/, this.db.batchSave(storeName, batch, keys)];\n          case 1:\n            return [2 /*return*/, _b.sent()];\n        }\n      });\n    });\n  };\n  return AsyncStorageAdapter;\n}();\nexport { AsyncStorageAdapter };\nexport default new AsyncStorageAdapter();","map":{"version":3,"mappings":"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","names":["ConsoleLogger","Logger","AsyncStorageDatabase","ModelPredicateCreator","ModelSortPredicateCreator","isPredicateObj","OpType","QueryOne","DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR","exhaustiveCheck","getIndex","getIndexFromAssociation","isModelConstructor","traverseModel","validatePredicate","sortCompareFunction","keysEqual","getStorename","getIndexKeys","extractPrimaryKeyValues","IDENTIFIER_KEY_SEPARATOR","logger","AsyncStorageAdapter","modelConstructor","namespace","namespaceResolver","modelName","model","Object","getPrototypeOf","constructor","namespaceName","keys","schema","namespaces","name","getIndexKeyValuesFromModel","join","theSchema","modelInstanceCreator","getModelConstructorByModelName","initPromise","Promise","res","rej","_this","resolve","reject","_a","db","init","error_1","condition","storeName","getStorenameForModel","connectedModels","set","Set","connectionStoreNames","values","map","item","instance","add","keyValuesPath","getIndexKeyValuesPath","get","fromDB","_b","predicates","getPredicates","predicateObjs","type","isValid","msg","error","Error","result","connectionStoreNames_1","resItem","storeName_1","itemKeyValues","key","itemKeyValuesPath","fromDB_1","opType","UPDATE","INSERT","modelKeyValues","save","push","srcModelName","records","relations","relationships","relationTypes","length","record","relations_1","relation","fieldName","targetName","targetNames","relationType","modelConstructor_1","_d","records_1","recordItem","getByFields","allPresent","every","getByField","connectionRecord","_e","getByfield","records_2","predicate","pagination","queryByKey","keyValueFromPredicate","hasSort","sort","hasPagination","limit","getByKey","filterOnPredicate","filtered","inMemoryPagination","getAll","all","load","keyValuePath","keyValues","predicateObj","find","p","field","operator","operand","undefined","filter","m","sortPredicates","compareFn","page","start","Math","max","end","slice","firstOrLast","FIRST","getOne","modelOrModelConstructor","deleteQueue","nameSpace","query","models","deleteTraverse","deleteItem","deletedModels","reduce","acc","items","concat","warn","deleteQueue_1","items_1","delete","_c","srcModel","relations_2","rel","associatedWith","index","indexes","models_1","hasOneIndex_1","split","Array","isArray","hasConnectedModelFields","hasOwnProperty","isUnidirectionalConnection","values_1","allRecords","recordToDelete","includes","childItem","hasOneIndex_2","hasOneCustomField","value_1","models_2","indices","childrenArray","clear","batch","this_1","items_2","batchSave"],"sources":["C:\\Users\\weida\\Desktop\\playground_CC\\node_modules\\@aws-amplify\\datastore\\src\\storage\\adapter\\AsyncStorageAdapter.ts"],"sourcesContent":["import { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport AsyncStorageDatabase from './AsyncStorageDatabase';\nimport { Adapter } from './index';\nimport { ModelInstanceCreator } from '../../datastore/datastore';\nimport {\n\tModelPredicateCreator,\n\tModelSortPredicateCreator,\n} from '../../predicates';\nimport {\n\tInternalSchema,\n\tisPredicateObj,\n\tModelInstanceMetadata,\n\tModelPredicate,\n\tNamespaceResolver,\n\tOpType,\n\tPaginationInput,\n\tPersistentModel,\n\tPersistentModelConstructor,\n\tPredicateObject,\n\tPredicatesGroup,\n\tQueryOne,\n\tRelationType,\n} from '../../types';\nimport {\n\tDEFAULT_PRIMARY_KEY_VALUE_SEPARATOR,\n\texhaustiveCheck,\n\tgetIndex,\n\tgetIndexFromAssociation,\n\tisModelConstructor,\n\ttraverseModel,\n\tvalidatePredicate,\n\tsortCompareFunction,\n\tkeysEqual,\n\tgetStorename,\n\tgetIndexKeys,\n\textractPrimaryKeyValues,\n\tIDENTIFIER_KEY_SEPARATOR,\n} from '../../util';\n\nconst logger = new Logger('DataStore');\n\nexport class AsyncStorageAdapter implements Adapter {\n\tprivate schema: InternalSchema;\n\tprivate namespaceResolver: NamespaceResolver;\n\tprivate modelInstanceCreator: ModelInstanceCreator;\n\tprivate getModelConstructorByModelName: (\n\t\tnamsespaceName: string,\n\t\tmodelName: string\n\t) => PersistentModelConstructor<any>;\n\tprivate db: AsyncStorageDatabase;\n\tprivate initPromise: Promise<void>;\n\tprivate resolve: (value?: any) => void;\n\tprivate reject: (value?: any) => void;\n\n\tprivate getStorenameForModel(\n\t\tmodelConstructor: PersistentModelConstructor<any>\n\t) {\n\t\tconst namespace = this.namespaceResolver(modelConstructor);\n\t\tconst { name: modelName } = modelConstructor;\n\n\t\treturn getStorename(namespace, modelName);\n\t}\n\n\t// Retrieves primary key values from a model\n\tprivate getIndexKeyValuesFromModel<T extends PersistentModel>(\n\t\tmodel: T\n\t): string[] {\n\t\tconst modelConstructor = Object.getPrototypeOf(model)\n\t\t\t.constructor as PersistentModelConstructor<T>;\n\t\tconst namespaceName = this.namespaceResolver(modelConstructor);\n\t\tconst keys = getIndexKeys(\n\t\t\tthis.schema.namespaces[namespaceName],\n\t\t\tmodelConstructor.name\n\t\t);\n\n\t\treturn extractPrimaryKeyValues(model, keys);\n\t}\n\n\t// Retrieves concatenated primary key values from a model\n\tprivate getIndexKeyValuesPath<T extends PersistentModel>(model: T): string {\n\t\treturn this.getIndexKeyValuesFromModel(model).join(\n\t\t\tDEFAULT_PRIMARY_KEY_VALUE_SEPARATOR\n\t\t);\n\t}\n\n\tasync setUp(\n\t\ttheSchema: InternalSchema,\n\t\tnamespaceResolver: NamespaceResolver,\n\t\tmodelInstanceCreator: ModelInstanceCreator,\n\t\tgetModelConstructorByModelName: (\n\t\t\tnamsespaceName: string,\n\t\t\tmodelName: string\n\t\t) => PersistentModelConstructor<any>\n\t) {\n\t\tif (!this.initPromise) {\n\t\t\tthis.initPromise = new Promise((res, rej) => {\n\t\t\t\tthis.resolve = res;\n\t\t\t\tthis.reject = rej;\n\t\t\t});\n\t\t} else {\n\t\t\tawait this.initPromise;\n\t\t\treturn;\n\t\t}\n\t\tthis.schema = theSchema;\n\t\tthis.namespaceResolver = namespaceResolver;\n\t\tthis.modelInstanceCreator = modelInstanceCreator;\n\t\tthis.getModelConstructorByModelName = getModelConstructorByModelName;\n\t\ttry {\n\t\t\tif (!this.db) {\n\t\t\t\tthis.db = new AsyncStorageDatabase();\n\t\t\t\tawait this.db.init();\n\t\t\t\tthis.resolve();\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis.reject(error);\n\t\t}\n\t}\n\n\tasync save<T extends PersistentModel>(\n\t\tmodel: T,\n\t\tcondition?: ModelPredicate<T>\n\t): Promise<[T, OpType.INSERT | OpType.UPDATE][]> {\n\t\tconst modelConstructor = Object.getPrototypeOf(model)\n\t\t\t.constructor as PersistentModelConstructor<T>;\n\t\tconst storeName = this.getStorenameForModel(modelConstructor);\n\n\t\tconst namespaceName = this.namespaceResolver(modelConstructor);\n\n\t\tconst connectedModels = traverseModel(\n\t\t\tmodelConstructor.name,\n\t\t\tmodel,\n\t\t\tthis.schema.namespaces[namespaceName],\n\t\t\tthis.modelInstanceCreator,\n\t\t\tthis.getModelConstructorByModelName\n\t\t);\n\n\t\tconst set = new Set<string>();\n\t\tconst connectionStoreNames = Object.values(connectedModels).map(\n\t\t\t({ modelName, item, instance }) => {\n\t\t\t\tconst storeName = getStorename(namespaceName, modelName);\n\t\t\t\tset.add(storeName);\n\t\t\t\tconst keys = getIndexKeys(\n\t\t\t\t\tthis.schema.namespaces[namespaceName],\n\t\t\t\t\tmodelName\n\t\t\t\t);\n\t\t\t\treturn { storeName, item, instance, keys };\n\t\t\t}\n\t\t);\n\t\tconst keyValuesPath = this.getIndexKeyValuesPath(model);\n\n\t\tconst fromDB = await this.db.get(keyValuesPath, storeName);\n\n\t\tif (condition && fromDB) {\n\t\t\tconst predicates = ModelPredicateCreator.getPredicates(condition);\n\t\t\tconst { predicates: predicateObjs, type } = predicates;\n\n\t\t\tconst isValid = validatePredicate(fromDB, type, predicateObjs);\n\n\t\t\tif (!isValid) {\n\t\t\t\tconst msg = 'Conditional update failed';\n\t\t\t\tlogger.error(msg, { model: fromDB, condition: predicateObjs });\n\n\t\t\t\tthrow new Error(msg);\n\t\t\t}\n\t\t}\n\n\t\tconst result: [T, OpType.INSERT | OpType.UPDATE][] = [];\n\n\t\tfor await (const resItem of connectionStoreNames) {\n\t\t\tconst { storeName, item, instance, keys } = resItem;\n\n\t\t\t/* Find the key values in the item, and concatenate them */\n\t\t\tconst itemKeyValues: string[] = keys.map(key => item[key]);\n\t\t\tconst itemKeyValuesPath: string = itemKeyValues.join(\n\t\t\t\tDEFAULT_PRIMARY_KEY_VALUE_SEPARATOR\n\t\t\t);\n\n\t\t\tconst fromDB = <T>await this.db.get(itemKeyValuesPath, storeName);\n\t\t\tconst opType: OpType = fromDB ? OpType.UPDATE : OpType.INSERT;\n\t\t\tconst modelKeyValues = this.getIndexKeyValuesFromModel(model);\n\n\t\t\t// If item key values and model key values are equal, save to db\n\t\t\tif (\n\t\t\t\tkeysEqual(itemKeyValues, modelKeyValues) ||\n\t\t\t\topType === OpType.INSERT\n\t\t\t) {\n\t\t\t\tawait this.db.save(item, storeName, keys, itemKeyValuesPath);\n\n\t\t\t\tresult.push([instance, opType]);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprivate async load<T>(\n\t\tnamespaceName: string,\n\t\tsrcModelName: string,\n\t\trecords: T[]\n\t): Promise<T[]> {\n\t\tconst namespace = this.schema.namespaces[namespaceName];\n\t\tconst relations = namespace.relationships[srcModelName].relationTypes;\n\t\tconst connectionStoreNames = relations.map(({ modelName }) => {\n\t\t\treturn getStorename(namespaceName, modelName);\n\t\t});\n\t\tconst modelConstructor = this.getModelConstructorByModelName(\n\t\t\tnamespaceName,\n\t\t\tsrcModelName\n\t\t);\n\n\t\tif (connectionStoreNames.length === 0) {\n\t\t\treturn records.map(record =>\n\t\t\t\tthis.modelInstanceCreator(modelConstructor, record)\n\t\t\t);\n\t\t}\n\n\t\tfor await (const relation of relations) {\n\t\t\tconst { fieldName, modelName, targetName, targetNames, relationType } =\n\t\t\t\trelation;\n\t\t\tconst storeName = getStorename(namespaceName, modelName);\n\t\t\tconst modelConstructor = this.getModelConstructorByModelName(\n\t\t\t\tnamespaceName,\n\t\t\t\tmodelName\n\t\t\t);\n\n\t\t\tswitch (relationType) {\n\t\t\t\tcase 'HAS_ONE':\n\t\t\t\t\tfor await (const recordItem of records) {\n\t\t\t\t\t\t// ASYNC CPK TODO: make this cleaner\n\t\t\t\t\t\tif (targetNames?.length) {\n\t\t\t\t\t\t\tlet getByFields = [];\n\t\t\t\t\t\t\tlet allPresent;\n\t\t\t\t\t\t\t// iterate through all targetnames to make sure they are all present in the recordItem\n\t\t\t\t\t\t\tallPresent = targetNames.every(targetName => {\n\t\t\t\t\t\t\t\treturn recordItem[targetName] != null;\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tif (!allPresent) {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgetByFields = targetNames as any;\n\n\t\t\t\t\t\t\t// keys are the key values\n\t\t\t\t\t\t\tconst keys = getByFields\n\t\t\t\t\t\t\t\t.map(getByField => recordItem[getByField])\n\t\t\t\t\t\t\t\t.join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR);\n\n\t\t\t\t\t\t\tconst connectionRecord = await this.db.get(keys, storeName);\n\n\t\t\t\t\t\t\trecordItem[fieldName] =\n\t\t\t\t\t\t\t\tconnectionRecord &&\n\t\t\t\t\t\t\t\tthis.modelInstanceCreator(modelConstructor, connectionRecord);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst getByfield = recordItem[targetName]\n\t\t\t\t\t\t\t\t? targetName\n\t\t\t\t\t\t\t\t: fieldName;\n\t\t\t\t\t\t\tif (!recordItem[getByfield]) break;\n\n\t\t\t\t\t\t\tconst key = recordItem[getByfield];\n\n\t\t\t\t\t\t\tconst connectionRecord = await this.db.get(key, storeName);\n\n\t\t\t\t\t\t\trecordItem[fieldName] =\n\t\t\t\t\t\t\t\tconnectionRecord &&\n\t\t\t\t\t\t\t\tthis.modelInstanceCreator(modelConstructor, connectionRecord);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'BELONGS_TO':\n\t\t\t\t\tfor await (const recordItem of records) {\n\t\t\t\t\t\t// ASYNC CPK TODO: make this cleaner\n\t\t\t\t\t\tif (targetNames?.length) {\n\t\t\t\t\t\t\tlet allPresent;\n\t\t\t\t\t\t\t// iterate through all targetnames to make sure they are all present in the recordItem\n\t\t\t\t\t\t\tallPresent = targetNames.every(targetName => {\n\t\t\t\t\t\t\t\treturn recordItem[targetName] != null;\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t// If not present, there is not yet a connected record\n\t\t\t\t\t\t\tif (!allPresent) {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst keys = targetNames\n\t\t\t\t\t\t\t\t.map(targetName => recordItem[targetName])\n\t\t\t\t\t\t\t\t.join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR);\n\n\t\t\t\t\t\t\t// Retrieve the connected record\n\t\t\t\t\t\t\tconst connectionRecord = await this.db.get(keys, storeName);\n\n\t\t\t\t\t\t\trecordItem[fieldName] =\n\t\t\t\t\t\t\t\tconnectionRecord &&\n\t\t\t\t\t\t\t\tthis.modelInstanceCreator(modelConstructor, connectionRecord);\n\n\t\t\t\t\t\t\ttargetNames?.map(targetName => {\n\t\t\t\t\t\t\t\tdelete recordItem[targetName];\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else if (recordItem[targetName as any]) {\n\t\t\t\t\t\t\tconst key = recordItem[targetName];\n\n\t\t\t\t\t\t\tconst connectionRecord = await this.db.get(key, storeName);\n\n\t\t\t\t\t\t\trecordItem[fieldName] =\n\t\t\t\t\t\t\t\tconnectionRecord &&\n\t\t\t\t\t\t\t\tthis.modelInstanceCreator(modelConstructor, connectionRecord);\n\t\t\t\t\t\t\tdelete recordItem[targetName];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'HAS_MANY':\n\t\t\t\t\t// TODO: Lazy loading\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\texhaustiveCheck(relationType);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn records.map(record =>\n\t\t\tthis.modelInstanceCreator(modelConstructor, record)\n\t\t);\n\t}\n\n\tasync query<T extends PersistentModel>(\n\t\tmodelConstructor: PersistentModelConstructor<T>,\n\t\tpredicate?: ModelPredicate<T>,\n\t\tpagination?: PaginationInput<T>\n\t): Promise<T[]> {\n\t\tconst storeName = this.getStorenameForModel(modelConstructor);\n\t\tconst namespaceName = this.namespaceResolver(modelConstructor);\n\n\t\tconst predicates =\n\t\t\tpredicate && ModelPredicateCreator.getPredicates(predicate);\n\t\tconst keys = getIndexKeys(\n\t\t\tthis.schema.namespaces[namespaceName],\n\t\t\tmodelConstructor.name\n\t\t);\n\t\tconst queryByKey =\n\t\t\tpredicates && this.keyValueFromPredicate(predicates, keys);\n\n\t\tconst hasSort = pagination && pagination.sort;\n\t\tconst hasPagination = pagination && pagination.limit;\n\n\t\tconst records: T[] = await (async () => {\n\t\t\tif (queryByKey) {\n\t\t\t\tconst record = await this.getByKey(storeName, queryByKey);\n\t\t\t\treturn record ? [record] : [];\n\t\t\t}\n\n\t\t\tif (predicates) {\n\t\t\t\tconst filtered = await this.filterOnPredicate(storeName, predicates);\n\t\t\t\treturn this.inMemoryPagination(filtered, pagination);\n\t\t\t}\n\n\t\t\tif (hasSort || hasPagination) {\n\t\t\t\tconst all = await this.getAll(storeName);\n\t\t\t\treturn this.inMemoryPagination(all, pagination);\n\t\t\t}\n\n\t\t\treturn this.getAll(storeName);\n\t\t})();\n\n\t\treturn await this.load(namespaceName, modelConstructor.name, records);\n\t}\n\n\tprivate async getByKey<T extends PersistentModel>(\n\t\tstoreName: string,\n\t\tkeyValuePath: string\n\t): Promise<T> {\n\t\tconst record = <T>await this.db.get(keyValuePath, storeName);\n\t\treturn record;\n\t}\n\n\tprivate async getAll<T extends PersistentModel>(\n\t\tstoreName: string\n\t): Promise<T[]> {\n\t\treturn await this.db.getAll(storeName);\n\t}\n\n\tprivate keyValueFromPredicate<T extends PersistentModel>(\n\t\tpredicates: PredicatesGroup<T>,\n\t\tkeys: string[]\n\t): string | undefined {\n\t\tconst { predicates: predicateObjs } = predicates;\n\n\t\tif (predicateObjs.length !== keys.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst keyValues = [];\n\n\t\tfor (const key of keys) {\n\t\t\tconst predicateObj = predicateObjs.find(\n\t\t\t\tp => isPredicateObj(p) && p.field === key && p.operator === 'eq'\n\t\t\t) as PredicateObject<T>;\n\n\t\t\tpredicateObj && keyValues.push(predicateObj.operand);\n\t\t}\n\n\t\treturn keyValues.length === keys.length\n\t\t\t? keyValues.join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR)\n\t\t\t: undefined;\n\t}\n\n\tprivate async filterOnPredicate<T extends PersistentModel>(\n\t\tstoreName: string,\n\t\tpredicates: PredicatesGroup<T>\n\t) {\n\t\tconst { predicates: predicateObjs, type } = predicates;\n\n\t\tconst all = <T[]>await this.getAll(storeName);\n\n\t\tconst filtered = predicateObjs\n\t\t\t? all.filter(m => validatePredicate(m, type, predicateObjs))\n\t\t\t: all;\n\n\t\treturn filtered;\n\t}\n\n\tprivate inMemoryPagination<T extends PersistentModel>(\n\t\trecords: T[],\n\t\tpagination?: PaginationInput<T>\n\t): T[] {\n\t\tif (pagination && records.length > 1) {\n\t\t\tif (pagination.sort) {\n\t\t\t\tconst sortPredicates = ModelSortPredicateCreator.getPredicates(\n\t\t\t\t\tpagination.sort\n\t\t\t\t);\n\n\t\t\t\tif (sortPredicates.length) {\n\t\t\t\t\tconst compareFn = sortCompareFunction(sortPredicates);\n\t\t\t\t\trecords.sort(compareFn);\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst { page = 0, limit = 0 } = pagination;\n\t\t\tconst start = Math.max(0, page * limit) || 0;\n\n\t\t\tconst end = limit > 0 ? start + limit : records.length;\n\n\t\t\treturn records.slice(start, end);\n\t\t}\n\n\t\treturn records;\n\t}\n\n\tasync queryOne<T extends PersistentModel>(\n\t\tmodelConstructor: PersistentModelConstructor<T>,\n\t\tfirstOrLast: QueryOne = QueryOne.FIRST\n\t): Promise<T | undefined> {\n\t\tconst storeName = this.getStorenameForModel(modelConstructor);\n\t\tconst result = <T>await this.db.getOne(firstOrLast, storeName);\n\n\t\treturn result && this.modelInstanceCreator(modelConstructor, result);\n\t}\n\n\tasync delete<T extends PersistentModel>(\n\t\tmodelOrModelConstructor: T | PersistentModelConstructor<T>,\n\t\tcondition?: ModelPredicate<T>\n\t): Promise<[T[], T[]]> {\n\t\tconst deleteQueue: { storeName: string; items: T[] }[] = [];\n\n\t\tif (isModelConstructor(modelOrModelConstructor)) {\n\t\t\tconst modelConstructor = modelOrModelConstructor;\n\t\t\tconst nameSpace = this.namespaceResolver(modelConstructor);\n\n\t\t\t// models to be deleted.\n\t\t\tconst models = await this.query(modelConstructor, condition);\n\t\t\t// TODO: refactor this to use a function like getRelations()\n\t\t\tconst relations =\n\t\t\t\tthis.schema.namespaces[nameSpace].relationships[modelConstructor.name]\n\t\t\t\t\t.relationTypes;\n\n\t\t\tif (condition !== undefined) {\n\t\t\t\tawait this.deleteTraverse(\n\t\t\t\t\trelations,\n\t\t\t\t\tmodels,\n\t\t\t\t\tmodelConstructor.name,\n\t\t\t\t\tnameSpace,\n\t\t\t\t\tdeleteQueue\n\t\t\t\t);\n\n\t\t\t\tawait this.deleteItem(deleteQueue);\n\n\t\t\t\tconst deletedModels = deleteQueue.reduce(\n\t\t\t\t\t(acc, { items }) => acc.concat(items),\n\t\t\t\t\t<T[]>[]\n\t\t\t\t);\n\n\t\t\t\treturn [models, deletedModels];\n\t\t\t} else {\n\t\t\t\tawait this.deleteTraverse(\n\t\t\t\t\trelations,\n\t\t\t\t\tmodels,\n\t\t\t\t\tmodelConstructor.name,\n\t\t\t\t\tnameSpace,\n\t\t\t\t\tdeleteQueue\n\t\t\t\t);\n\n\t\t\t\tawait this.deleteItem(deleteQueue);\n\n\t\t\t\tconst deletedModels = deleteQueue.reduce(\n\t\t\t\t\t(acc, { items }) => acc.concat(items),\n\t\t\t\t\t<T[]>[]\n\t\t\t\t);\n\n\t\t\t\treturn [models, deletedModels];\n\t\t\t}\n\t\t} else {\n\t\t\tconst model = modelOrModelConstructor;\n\n\t\t\tconst modelConstructor = Object.getPrototypeOf(model)\n\t\t\t\t.constructor as PersistentModelConstructor<T>;\n\t\t\tconst namespaceName = this.namespaceResolver(modelConstructor);\n\n\t\t\tconst storeName = this.getStorenameForModel(modelConstructor);\n\n\t\t\tif (condition) {\n\t\t\t\tconst keyValuePath = this.getIndexKeyValuesPath(model);\n\n\t\t\t\tconst fromDB = await this.db.get(keyValuePath, storeName);\n\n\t\t\t\tif (fromDB === undefined) {\n\t\t\t\t\tconst msg = 'Model instance not found in storage';\n\t\t\t\t\tlogger.warn(msg, { model });\n\n\t\t\t\t\treturn [[model], []];\n\t\t\t\t}\n\n\t\t\t\tconst predicates = ModelPredicateCreator.getPredicates(condition);\n\t\t\t\tconst { predicates: predicateObjs, type } = predicates;\n\n\t\t\t\tconst isValid = validatePredicate(fromDB, type, predicateObjs);\n\t\t\t\tif (!isValid) {\n\t\t\t\t\tconst msg = 'Conditional update failed';\n\t\t\t\t\tlogger.error(msg, { model: fromDB, condition: predicateObjs });\n\n\t\t\t\t\tthrow new Error(msg);\n\t\t\t\t}\n\n\t\t\t\tconst relations =\n\t\t\t\t\tthis.schema.namespaces[namespaceName].relationships[\n\t\t\t\t\t\tmodelConstructor.name\n\t\t\t\t\t].relationTypes;\n\n\t\t\t\tawait this.deleteTraverse(\n\t\t\t\t\trelations,\n\t\t\t\t\t[model],\n\t\t\t\t\tmodelConstructor.name,\n\t\t\t\t\tnamespaceName,\n\t\t\t\t\tdeleteQueue\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tconst relations =\n\t\t\t\t\tthis.schema.namespaces[namespaceName].relationships[\n\t\t\t\t\t\tmodelConstructor.name\n\t\t\t\t\t].relationTypes;\n\n\t\t\t\tawait this.deleteTraverse(\n\t\t\t\t\trelations,\n\t\t\t\t\t[model],\n\t\t\t\t\tmodelConstructor.name,\n\t\t\t\t\tnamespaceName,\n\t\t\t\t\tdeleteQueue\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tawait this.deleteItem(deleteQueue);\n\n\t\t\tconst deletedModels = deleteQueue.reduce(\n\t\t\t\t(acc, { items }) => acc.concat(items),\n\t\t\t\t<T[]>[]\n\t\t\t);\n\n\t\t\treturn [[model], deletedModels];\n\t\t}\n\t}\n\n\tprivate async deleteItem<T extends PersistentModel>(\n\t\tdeleteQueue?: { storeName: string; items: T[] | IDBValidKey[] }[]\n\t) {\n\t\tfor await (const deleteItem of deleteQueue) {\n\t\t\tconst { storeName, items } = deleteItem;\n\n\t\t\tfor await (const item of items) {\n\t\t\t\tif (item) {\n\t\t\t\t\tif (typeof item === 'object') {\n\t\t\t\t\t\tconst keyValuesPath: string = this.getIndexKeyValuesPath(item as T);\n\t\t\t\t\t\tawait this.db.delete(keyValuesPath, storeName);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t/**\n\t * Populates the delete Queue with all the items to delete\n\t * @param relations\n\t * @param models\n\t * @param srcModel\n\t * @param nameSpace\n\t * @param deleteQueue\n\t */\n\tprivate async deleteTraverse<T extends PersistentModel>(\n\t\trelations: RelationType[],\n\t\tmodels: T[],\n\t\tsrcModel: string,\n\t\tnameSpace: string,\n\t\tdeleteQueue: { storeName: string; items: T[] }[]\n\t): Promise<void> {\n\t\tfor await (const rel of relations) {\n\t\t\tconst {\n\t\t\t\trelationType,\n\t\t\t\tmodelName,\n\t\t\t\ttargetName,\n\t\t\t\ttargetNames,\n\t\t\t\tassociatedWith,\n\t\t\t} = rel;\n\t\t\tconst storeName = getStorename(nameSpace, modelName);\n\n\t\t\tconst index: string | undefined =\n\t\t\t\tgetIndex(\n\t\t\t\t\tthis.schema.namespaces[nameSpace].relationships[modelName]\n\t\t\t\t\t\t.relationTypes,\n\t\t\t\t\tsrcModel\n\t\t\t\t) ||\n\t\t\t\t// if we were unable to find an index via relationTypes\n\t\t\t\t// i.e. for keyName connections, attempt to find one by the\n\t\t\t\t// associatedWith property\n\t\t\t\tgetIndexFromAssociation(\n\t\t\t\t\tthis.schema.namespaces[nameSpace].relationships[modelName].indexes,\n\t\t\t\t\trel.associatedWith\n\t\t\t\t);\n\n\t\t\tswitch (relationType) {\n\t\t\t\tcase 'HAS_ONE':\n\t\t\t\t\tfor await (const model of models) {\n\t\t\t\t\t\tif (targetNames && targetNames?.length) {\n\t\t\t\t\t\t\tlet hasOneIndex;\n\n\t\t\t\t\t\t\tif (index) {\n\t\t\t\t\t\t\t\thasOneIndex = index.split(IDENTIFIER_KEY_SEPARATOR);\n\t\t\t\t\t\t\t} else if (associatedWith) {\n\t\t\t\t\t\t\t\tif (Array.isArray(associatedWith)) {\n\t\t\t\t\t\t\t\t\thasOneIndex = associatedWith;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\thasOneIndex = [associatedWith];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// iterate over targetNames array and see if each key is present in model object\n\t\t\t\t\t\t\t// targetNames here being the keys for the CHILD model\n\t\t\t\t\t\t\tconst hasConnectedModelFields = targetNames.every(targetName =>\n\t\t\t\t\t\t\t\tmodel.hasOwnProperty(targetName)\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// PK / Composite key for the parent model\n\t\t\t\t\t\t\tconst keyValuesPath: string = this.getIndexKeyValuesPath(model);\n\n\t\t\t\t\t\t\tlet values;\n\n\t\t\t\t\t\t\tconst isUnidirectionalConnection = hasOneIndex === associatedWith;\n\n\t\t\t\t\t\t\tif (hasConnectedModelFields && isUnidirectionalConnection) {\n\t\t\t\t\t\t\t\t// Values will be that of the child model\n\t\t\t\t\t\t\t\tvalues = targetNames.map(\n\t\t\t\t\t\t\t\t\ttargetName => model[targetName]\n\t\t\t\t\t\t\t\t) as any;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// values will be that of the parent model\n\t\t\t\t\t\t\t\tvalues = keyValuesPath.split(\n\t\t\t\t\t\t\t\t\tDEFAULT_PRIMARY_KEY_VALUE_SEPARATOR\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (values.length === 0) break;\n\n\t\t\t\t\t\t\tconst allRecords = await this.db.getAll(storeName);\n\n\t\t\t\t\t\t\tlet recordToDelete;\n\n\t\t\t\t\t\t\t// values === targetNames\n\t\t\t\t\t\t\tif (hasConnectedModelFields) {\n\t\t\t\t\t\t\t\t/**\n\t\t\t\t\t\t\t\t * Retrieve record by finding the record where all\n\t\t\t\t\t\t\t\t * targetNames are present on the connected model.\n\t\t\t\t\t\t\t\t *\n\t\t\t\t\t\t\t\t */\n\t\t\t\t\t\t\t\t// recordToDelete = allRecords.filter(childItem =>\n\t\t\t\t\t\t\t\t// \tvalues.every(value => childItem[value] != null)\n\t\t\t\t\t\t\t\t// ) as T[];\n\n\t\t\t\t\t\t\t\trecordToDelete = allRecords.filter(childItem =>\n\t\t\t\t\t\t\t\t\thasOneIndex.every(index => values.includes(childItem[index]))\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// values === keyValuePath\n\t\t\t\t\t\t\t\trecordToDelete = allRecords.filter(\n\t\t\t\t\t\t\t\t\tchildItem => childItem[hasOneIndex] === values\n\t\t\t\t\t\t\t\t) as T[];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tawait this.deleteTraverse<T>(\n\t\t\t\t\t\t\t\tthis.schema.namespaces[nameSpace].relationships[modelName]\n\t\t\t\t\t\t\t\t\t.relationTypes,\n\t\t\t\t\t\t\t\trecordToDelete,\n\t\t\t\t\t\t\t\tmodelName,\n\t\t\t\t\t\t\t\tnameSpace,\n\t\t\t\t\t\t\t\tdeleteQueue\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst hasOneIndex = index || associatedWith;\n\t\t\t\t\t\t\tconst hasOneCustomField = targetName in model;\n\t\t\t\t\t\t\tconst keyValuesPath: string = this.getIndexKeyValuesPath(model);\n\t\t\t\t\t\t\tconst value = hasOneCustomField\n\t\t\t\t\t\t\t\t? model[targetName]\n\t\t\t\t\t\t\t\t: keyValuesPath;\n\n\t\t\t\t\t\t\tif (!value) break;\n\n\t\t\t\t\t\t\tconst allRecords = await this.db.getAll(storeName);\n\n\t\t\t\t\t\t\tconst recordToDelete = allRecords.filter(\n\t\t\t\t\t\t\t\tchildItem => childItem[hasOneIndex as string] === value\n\t\t\t\t\t\t\t) as T[];\n\n\t\t\t\t\t\t\tawait this.deleteTraverse<T>(\n\t\t\t\t\t\t\t\tthis.schema.namespaces[nameSpace].relationships[modelName]\n\t\t\t\t\t\t\t\t\t.relationTypes,\n\t\t\t\t\t\t\t\trecordToDelete,\n\t\t\t\t\t\t\t\tmodelName,\n\t\t\t\t\t\t\t\tnameSpace,\n\t\t\t\t\t\t\t\tdeleteQueue\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'HAS_MANY':\n\t\t\t\t\tfor await (const model of models) {\n\t\t\t\t\t\t// Key values for the parent model:\n\t\t\t\t\t\tconst keyValues: string[] = this.getIndexKeyValuesFromModel(model);\n\n\t\t\t\t\t\tconst allRecords = await this.db.getAll(storeName);\n\n\t\t\t\t\t\tconst indices = index.split(IDENTIFIER_KEY_SEPARATOR);\n\n\t\t\t\t\t\tconst childrenArray = allRecords.filter(childItem =>\n\t\t\t\t\t\t\tindices.every(index => keyValues.includes(childItem[index]))\n\t\t\t\t\t\t) as T[];\n\n\t\t\t\t\t\tawait this.deleteTraverse<T>(\n\t\t\t\t\t\t\tthis.schema.namespaces[nameSpace].relationships[modelName]\n\t\t\t\t\t\t\t\t.relationTypes,\n\t\t\t\t\t\t\tchildrenArray,\n\t\t\t\t\t\t\tmodelName,\n\t\t\t\t\t\t\tnameSpace,\n\t\t\t\t\t\t\tdeleteQueue\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'BELONGS_TO':\n\t\t\t\t\t// Intentionally blank\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\texhaustiveCheck(relationType);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tdeleteQueue.push({\n\t\t\tstoreName: getStorename(nameSpace, srcModel),\n\t\t\titems: models.map(record =>\n\t\t\t\tthis.modelInstanceCreator(\n\t\t\t\t\tthis.getModelConstructorByModelName(nameSpace, srcModel),\n\t\t\t\t\trecord\n\t\t\t\t)\n\t\t\t),\n\t\t});\n\t}\n\n\tasync clear(): Promise<void> {\n\t\tawait this.db.clear();\n\n\t\tthis.db = undefined;\n\t\tthis.initPromise = undefined;\n\t}\n\n\tasync batchSave<T extends PersistentModel>(\n\t\tmodelConstructor: PersistentModelConstructor<any>,\n\t\titems: ModelInstanceMetadata[]\n\t): Promise<[T, OpType][]> {\n\t\tconst { name: modelName } = modelConstructor;\n\t\tconst namespaceName = this.namespaceResolver(modelConstructor);\n\t\tconst storeName = getStorename(namespaceName, modelName);\n\t\tconst keys = getIndexKeys(this.schema.namespaces[namespaceName], modelName);\n\t\tconst batch: ModelInstanceMetadata[] = [];\n\n\t\tfor (const item of items) {\n\t\t\tconst model = this.modelInstanceCreator(modelConstructor, item);\n\n\t\t\tconst connectedModels = traverseModel(\n\t\t\t\tmodelName,\n\t\t\t\tmodel,\n\t\t\t\tthis.schema.namespaces[namespaceName],\n\t\t\t\tthis.modelInstanceCreator,\n\t\t\t\tthis.getModelConstructorByModelName\n\t\t\t);\n\n\t\t\tconst keyValuesPath = this.getIndexKeyValuesPath(model);\n\n\t\t\tconst { instance } = connectedModels.find(({ instance }) => {\n\t\t\t\tconst instanceKeyValuesPath = this.getIndexKeyValuesPath(instance);\n\t\t\t\treturn keysEqual([instanceKeyValuesPath], [keyValuesPath]);\n\t\t\t});\n\n\t\t\tbatch.push(instance);\n\t\t}\n\n\t\treturn await this.db.batchSave(storeName, batch, keys);\n\t}\n}\n\nexport default new AsyncStorageAdapter();\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}