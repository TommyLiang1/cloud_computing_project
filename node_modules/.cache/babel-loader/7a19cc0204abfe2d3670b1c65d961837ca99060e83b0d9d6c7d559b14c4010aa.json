{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nimport Observable from 'zen-observable-ts';\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { ReachabilityMonitor } from './datastoreReachability';\nvar logger = new Logger('DataStore');\nvar RECONNECTING_IN = 5000; // 5s this may be configurable in the future\nvar DataStoreConnectivity = /** @class */function () {\n  function DataStoreConnectivity() {\n    this.connectionStatus = {\n      online: false\n    };\n  }\n  DataStoreConnectivity.prototype.status = function () {\n    var _this = this;\n    if (this.observer) {\n      throw new Error('Subscriber already exists');\n    }\n    return new Observable(function (observer) {\n      _this.observer = observer;\n      // Will be used to forward socket connection changes, enhancing Reachability\n      _this.subscription = ReachabilityMonitor.subscribe(function (_a) {\n        var online = _a.online;\n        _this.connectionStatus.online = online;\n        var observerResult = __assign({}, _this.connectionStatus); // copyOf status\n        observer.next(observerResult);\n      });\n      return function () {\n        clearTimeout(_this.timeout);\n        _this.unsubscribe();\n      };\n    });\n  };\n  DataStoreConnectivity.prototype.unsubscribe = function () {\n    if (this.subscription) {\n      clearTimeout(this.timeout);\n      this.subscription.unsubscribe();\n    }\n  };\n  // for consistency with other background processors.\n  DataStoreConnectivity.prototype.stop = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        this.unsubscribe();\n        return [2 /*return*/];\n      });\n    });\n  };\n\n  DataStoreConnectivity.prototype.socketDisconnected = function () {\n    var _this = this;\n    if (this.observer && typeof this.observer.next === 'function') {\n      this.observer.next({\n        online: false\n      }); // Notify network issue from the socket\n      this.timeout = setTimeout(function () {\n        var observerResult = __assign({}, _this.connectionStatus); // copyOf status\n        _this.observer.next(observerResult);\n      }, RECONNECTING_IN); // giving time for socket cleanup and network status stabilization\n    }\n  };\n\n  return DataStoreConnectivity;\n}();\nexport default DataStoreConnectivity;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,UAA6B,MAAM,mBAAmB;AAC7D,SAASC,aAAa,IAAIC,MAAM,QAAQ,mBAAmB;AAC3D,SAASC,mBAAmB,QAAQ,yBAAyB;AAE7D,IAAMC,MAAM,GAAG,IAAIF,MAAM,CAAC,WAAW,CAAC;AAEtC,IAAMG,eAAe,GAAG,IAAI,CAAC,CAAC;AAO9B;EAKC;IACC,IAAI,CAACC,gBAAgB,GAAG;MACvBC,MAAM,EAAE;KACR;EACF;EAEAC,sCAAM,GAAN;IAAA;IACC,IAAI,IAAI,CAACC,QAAQ,EAAE;MAClB,MAAM,IAAIC,KAAK,CAAC,2BAA2B,CAAC;;IAE7C,OAAO,IAAIV,UAAU,CAAC,kBAAQ;MAC7BW,KAAI,CAACF,QAAQ,GAAGA,QAAQ;MACxB;MAEAE,KAAI,CAACC,YAAY,GAAGT,mBAAmB,CAACU,SAAS,CAAC,UAACC,EAAU;YAARP,kBAAM;QAC1DI,KAAI,CAACL,gBAAgB,CAACC,MAAM,GAAGA,MAAM;QAErC,IAAMQ,cAAc,gBAAQJ,KAAI,CAACL,gBAAgB,CAAE,CAAC,CAAC;QAErDG,QAAQ,CAACO,IAAI,CAACD,cAAc,CAAC;MAC9B,CAAC,CAAC;MAEF,OAAO;QACNE,YAAY,CAACN,KAAI,CAACO,OAAO,CAAC;QAC1BP,KAAI,CAACQ,WAAW,EAAE;MACnB,CAAC;IACF,CAAC,CAAC;EACH,CAAC;EAEDX,2CAAW,GAAX;IACC,IAAI,IAAI,CAACI,YAAY,EAAE;MACtBK,YAAY,CAAC,IAAI,CAACC,OAAO,CAAC;MAC1B,IAAI,CAACN,YAAY,CAACO,WAAW,EAAE;;EAEjC,CAAC;EAED;EACMX,oCAAI,GAAV;;;QACC,IAAI,CAACW,WAAW,EAAE;QAClB;;;GACA;;EAEDX,kDAAkB,GAAlB;IAAA;IACC,IAAI,IAAI,CAACC,QAAQ,IAAI,OAAO,IAAI,CAACA,QAAQ,CAACO,IAAI,KAAK,UAAU,EAAE;MAC9D,IAAI,CAACP,QAAQ,CAACO,IAAI,CAAC;QAAET,MAAM,EAAE;MAAK,CAAE,CAAC,CAAC,CAAC;MAEvC,IAAI,CAACW,OAAO,GAAGE,UAAU,CAAC;QACzB,IAAML,cAAc,gBAAQJ,KAAI,CAACL,gBAAgB,CAAE,CAAC,CAAC;QACrDK,KAAI,CAACF,QAAQ,CAACO,IAAI,CAACD,cAAc,CAAC;MACnC,CAAC,EAAEV,eAAe,CAAC,CAAC,CAAC;;EAEvB,CAAC;;EACF,4BAAC;AAAD,CAAC,EAzDD","names":["Observable","ConsoleLogger","Logger","ReachabilityMonitor","logger","RECONNECTING_IN","connectionStatus","online","DataStoreConnectivity","observer","Error","_this","subscription","subscribe","_a","observerResult","next","clearTimeout","timeout","unsubscribe","setTimeout"],"sources":["C:\\Users\\weida\\Desktop\\playground_CC\\node_modules\\@aws-amplify\\datastore\\src\\sync\\datastoreConnectivity.ts"],"sourcesContent":["import Observable, { ZenObservable } from 'zen-observable-ts';\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { ReachabilityMonitor } from './datastoreReachability';\n\nconst logger = new Logger('DataStore');\n\nconst RECONNECTING_IN = 5000; // 5s this may be configurable in the future\n\ntype ConnectionStatus = {\n\t// Might add other params in the future\n\tonline: boolean;\n};\n\nexport default class DataStoreConnectivity {\n\tprivate connectionStatus: ConnectionStatus;\n\tprivate observer: ZenObservable.SubscriptionObserver<ConnectionStatus>;\n\tprivate subscription: ZenObservable.Subscription;\n\tprivate timeout: ReturnType<typeof setTimeout>;\n\tconstructor() {\n\t\tthis.connectionStatus = {\n\t\t\tonline: false,\n\t\t};\n\t}\n\n\tstatus(): Observable<ConnectionStatus> {\n\t\tif (this.observer) {\n\t\t\tthrow new Error('Subscriber already exists');\n\t\t}\n\t\treturn new Observable(observer => {\n\t\t\tthis.observer = observer;\n\t\t\t// Will be used to forward socket connection changes, enhancing Reachability\n\n\t\t\tthis.subscription = ReachabilityMonitor.subscribe(({ online }) => {\n\t\t\t\tthis.connectionStatus.online = online;\n\n\t\t\t\tconst observerResult = { ...this.connectionStatus }; // copyOf status\n\n\t\t\t\tobserver.next(observerResult);\n\t\t\t});\n\n\t\t\treturn () => {\n\t\t\t\tclearTimeout(this.timeout);\n\t\t\t\tthis.unsubscribe();\n\t\t\t};\n\t\t});\n\t}\n\n\tunsubscribe() {\n\t\tif (this.subscription) {\n\t\t\tclearTimeout(this.timeout);\n\t\t\tthis.subscription.unsubscribe();\n\t\t}\n\t}\n\n\t// for consistency with other background processors.\n\tasync stop() {\n\t\tthis.unsubscribe();\n\t\treturn;\n\t}\n\n\tsocketDisconnected() {\n\t\tif (this.observer && typeof this.observer.next === 'function') {\n\t\t\tthis.observer.next({ online: false }); // Notify network issue from the socket\n\n\t\t\tthis.timeout = setTimeout(() => {\n\t\t\t\tconst observerResult = { ...this.connectionStatus }; // copyOf status\n\t\t\t\tthis.observer.next(observerResult);\n\t\t\t}, RECONNECTING_IN); // giving time for socket cleanup and network status stabilization\n\t\t}\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}