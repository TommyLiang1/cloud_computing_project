{"ast":null,"code":"import { useId as e } from \"@radix-ui/react-id\";\nimport { Presence as t } from \"@radix-ui/react-presence\";\nimport { Primitive as o } from \"@radix-ui/react-primitive\";\nimport { useComposedRefs as n } from \"@radix-ui/react-compose-refs\";\nimport { useLayoutEffect as r } from \"@radix-ui/react-use-layout-effect\";\nimport { useControllableState as i } from \"@radix-ui/react-use-controllable-state\";\nimport { createContextScope as a } from \"@radix-ui/react-context\";\nimport { composeEventHandlers as l } from \"@radix-ui/primitive\";\nimport * as s from \"react\";\nimport c from \"@babel/runtime/helpers/esm/extends\";\nconst [p, d] = a(\"Collapsible\");\nexport { d as createCollapsibleScope };\nconst [u, m] = p(\"Collapsible\");\nexport const Collapsible = /*#__PURE__*/s.forwardRef((t, n) => {\n  const {\n      __scopeCollapsible: r,\n      open: a,\n      defaultOpen: l,\n      disabled: p,\n      onOpenChange: d,\n      ...m\n    } = t,\n    [f = !1, C] = i({\n      prop: a,\n      defaultProp: l,\n      onChange: d\n    }); /*#__PURE__*/\n  return s.createElement(u, {\n    scope: r,\n    disabled: p,\n    contentId: e(),\n    open: f,\n    onOpenToggle: s.useCallback(() => C(e => !e), [C])\n  }, /*#__PURE__*/s.createElement(o.div, c({\n    \"data-state\": b(f),\n    \"data-disabled\": p ? \"\" : void 0\n  }, m, {\n    ref: n\n  })));\n}); /*#__PURE__*/\nexport const CollapsibleTrigger = /*#__PURE__*/s.forwardRef((e, t) => {\n  const {\n      __scopeCollapsible: n,\n      ...r\n    } = e,\n    i = m(\"CollapsibleTrigger\", n); /*#__PURE__*/\n  return s.createElement(o.button, c({\n    type: \"button\",\n    \"aria-controls\": i.contentId,\n    \"aria-expanded\": i.open || !1,\n    \"data-state\": b(i.open),\n    \"data-disabled\": i.disabled ? \"\" : void 0,\n    disabled: i.disabled\n  }, r, {\n    ref: t,\n    onClick: l(e.onClick, i.onOpenToggle)\n  }));\n}); /*#__PURE__*/\nexport const CollapsibleContent = /*#__PURE__*/s.forwardRef((e, o) => {\n  const {\n      forceMount: n,\n      ...r\n    } = e,\n    i = m(\"CollapsibleContent\", e.__scopeCollapsible); /*#__PURE__*/\n  return s.createElement(t, {\n    present: n || i.open\n  }, _ref => {\n    let {\n      present: e\n    } = _ref;\n    return /*#__PURE__*/s.createElement(f, c({}, r, {\n      ref: o,\n      present: e\n    }));\n  });\n}); /*#__PURE__*/\nconst f = /*#__PURE__*/s.forwardRef((e, t) => {\n  const {\n      __scopeCollapsible: i,\n      present: a,\n      children: l,\n      ...p\n    } = e,\n    d = m(\"CollapsibleContent\", i),\n    [u, f] = s.useState(a),\n    C = s.useRef(null),\n    x = n(t, C),\n    g = s.useRef(0),\n    y = g.current,\n    h = s.useRef(0),\n    R = h.current,\n    D = d.open || u,\n    v = s.useRef(D),\n    _ = s.useRef();\n  return s.useEffect(() => {\n    const e = requestAnimationFrame(() => v.current = !1);\n    return () => cancelAnimationFrame(e);\n  }, []), r(() => {\n    const e = C.current;\n    if (e) {\n      _.current = _.current || {\n        transitionDuration: e.style.transitionDuration,\n        animationDuration: e.style.animationDuration,\n        animationFillMode: e.style.animationFillMode\n      }, e.style.transitionDuration = \"0s\", e.style.animationDuration = \"0s\", e.style.animationFillMode = \"none\";\n      const t = e.getBoundingClientRect();\n      g.current = t.height, h.current = t.width, v.current || (e.style.transitionDuration = _.current.transitionDuration, e.style.animationDuration = _.current.animationDuration, e.style.animationFillMode = _.current.animationFillMode), f(a);\n    }\n  }, [d.open, a]), /*#__PURE__*/s.createElement(o.div, c({\n    \"data-state\": b(d.open),\n    \"data-disabled\": d.disabled ? \"\" : void 0,\n    id: d.contentId,\n    hidden: !D\n  }, p, {\n    ref: x,\n    style: {\n      \"--radix-collapsible-content-height\": y ? `${y}px` : void 0,\n      \"--radix-collapsible-content-width\": R ? `${R}px` : void 0,\n      ...e.style\n    }\n  }), D && l);\n});\nfunction b(e) {\n  return e ? \"open\" : \"closed\";\n}\nexport const Root = Collapsible;\nexport const Trigger = CollapsibleTrigger;\nexport const Content = CollapsibleContent;","map":{"version":3,"mappings":"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","names":["createCollapsibleContext","createCollapsibleScope","createContextScope","CollapsibleProvider","useCollapsibleContext","Collapsible","React","forwardRef","props","forwardedRef","__scopeCollapsible","open","openProp","defaultOpen","disabled","onOpenChange","collapsibleProps","setOpen","useControllableState","prop","defaultProp","onChange","_react","$a5c9ff236b90360c7963e374990ad39$var$CollapsibleProvider","scope","contentId","useId","onOpenToggle","useCallback","prevOpen","Primitive","div","_babelRuntimeHelpersEsmExtends","getState","undefined","ref","CollapsibleTrigger","triggerProps","context","button","type","onClick","composeEventHandlers","CollapsibleContent","forceMount","contentProps","Presence","present","$a5c9ff236b90360c7963e374990ad39$var$CollapsibleContentImpl","CollapsibleContentImpl","children","isPresent","setIsPresent","useState","useRef","composedRefs","useComposedRefs","heightRef","height","current","widthRef","width","isOpen","isMountAnimationPreventedRef","originalStylesRef","useEffect","rAF","requestAnimationFrame","cancelAnimationFrame","useLayoutEffect","node","transitionDuration","style","animationDuration","animationFillMode","rect","getBoundingClientRect","id","hidden","Root","Trigger","Content"],"sources":["C:\\Users\\weida\\Desktop\\playground_CC\\node_modules\\@aws-amplify\\ui-react\\node_modules\\@radix-ui\\react-accordion\\node_modules\\@radix-ui\\react-collapsible\\dist\\packages\\react\\collapsible\\src\\Collapsible.tsx"],"sourcesContent":["import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { useLayoutEffect } from '@radix-ui/react-use-layout-effect';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport { Presence } from '@radix-ui/react-presence';\nimport { useId } from '@radix-ui/react-id';\n\nimport type * as Radix from '@radix-ui/react-primitive';\nimport type { Scope } from '@radix-ui/react-context';\n\n/* -------------------------------------------------------------------------------------------------\n * Collapsible\n * -----------------------------------------------------------------------------------------------*/\n\nconst COLLAPSIBLE_NAME = 'Collapsible';\n\ntype ScopedProps<P> = P & { __scopeCollapsible?: Scope };\nconst [createCollapsibleContext, createCollapsibleScope] = createContextScope(COLLAPSIBLE_NAME);\n\ntype CollapsibleContextValue = {\n  contentId: string;\n  disabled?: boolean;\n  open: boolean;\n  onOpenToggle(): void;\n};\n\nconst [CollapsibleProvider, useCollapsibleContext] =\n  createCollapsibleContext<CollapsibleContextValue>(COLLAPSIBLE_NAME);\n\ntype CollapsibleElement = React.ElementRef<typeof Primitive.div>;\ntype PrimitiveDivProps = Radix.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface CollapsibleProps extends PrimitiveDivProps {\n  defaultOpen?: boolean;\n  open?: boolean;\n  disabled?: boolean;\n  onOpenChange?(open: boolean): void;\n}\n\nconst Collapsible = React.forwardRef<CollapsibleElement, CollapsibleProps>(\n  (props: ScopedProps<CollapsibleProps>, forwardedRef) => {\n    const {\n      __scopeCollapsible,\n      open: openProp,\n      defaultOpen,\n      disabled,\n      onOpenChange,\n      ...collapsibleProps\n    } = props;\n\n    const [open = false, setOpen] = useControllableState({\n      prop: openProp,\n      defaultProp: defaultOpen,\n      onChange: onOpenChange,\n    });\n\n    return (\n      <CollapsibleProvider\n        scope={__scopeCollapsible}\n        disabled={disabled}\n        contentId={useId()}\n        open={open}\n        onOpenToggle={React.useCallback(() => setOpen((prevOpen) => !prevOpen), [setOpen])}\n      >\n        <Primitive.div\n          data-state={getState(open)}\n          data-disabled={disabled ? '' : undefined}\n          {...collapsibleProps}\n          ref={forwardedRef}\n        />\n      </CollapsibleProvider>\n    );\n  }\n);\n\nCollapsible.displayName = COLLAPSIBLE_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * CollapsibleTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst TRIGGER_NAME = 'CollapsibleTrigger';\n\ntype CollapsibleTriggerElement = React.ElementRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = Radix.ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface CollapsibleTriggerProps extends PrimitiveButtonProps {}\n\nconst CollapsibleTrigger = React.forwardRef<CollapsibleTriggerElement, CollapsibleTriggerProps>(\n  (props: ScopedProps<CollapsibleTriggerProps>, forwardedRef) => {\n    const { __scopeCollapsible, ...triggerProps } = props;\n    const context = useCollapsibleContext(TRIGGER_NAME, __scopeCollapsible);\n    return (\n      <Primitive.button\n        type=\"button\"\n        aria-controls={context.contentId}\n        aria-expanded={context.open || false}\n        data-state={getState(context.open)}\n        data-disabled={context.disabled ? '' : undefined}\n        disabled={context.disabled}\n        {...triggerProps}\n        ref={forwardedRef}\n        onClick={composeEventHandlers(props.onClick, context.onOpenToggle)}\n      />\n    );\n  }\n);\n\nCollapsibleTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * CollapsibleContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'CollapsibleContent';\n\ntype CollapsibleContentElement = CollapsibleContentImplElement;\ninterface CollapsibleContentProps extends Omit<CollapsibleContentImplProps, 'present'> {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst CollapsibleContent = React.forwardRef<CollapsibleContentElement, CollapsibleContentProps>(\n  (props: ScopedProps<CollapsibleContentProps>, forwardedRef) => {\n    const { forceMount, ...contentProps } = props;\n    const context = useCollapsibleContext(CONTENT_NAME, props.__scopeCollapsible);\n    return (\n      <Presence present={forceMount || context.open}>\n        {({ present }) => (\n          <CollapsibleContentImpl {...contentProps} ref={forwardedRef} present={present} />\n        )}\n      </Presence>\n    );\n  }\n);\n\nCollapsibleContent.displayName = CONTENT_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype CollapsibleContentImplElement = React.ElementRef<typeof Primitive.div>;\ninterface CollapsibleContentImplProps extends PrimitiveDivProps {\n  present: boolean;\n}\n\nconst CollapsibleContentImpl = React.forwardRef<\n  CollapsibleContentImplElement,\n  CollapsibleContentImplProps\n>((props: ScopedProps<CollapsibleContentImplProps>, forwardedRef) => {\n  const { __scopeCollapsible, present, children, ...contentProps } = props;\n  const context = useCollapsibleContext(CONTENT_NAME, __scopeCollapsible);\n  const [isPresent, setIsPresent] = React.useState(present);\n  const ref = React.useRef<CollapsibleContentImplElement>(null);\n  const composedRefs = useComposedRefs(forwardedRef, ref);\n  const heightRef = React.useRef<number | undefined>(0);\n  const height = heightRef.current;\n  const widthRef = React.useRef<number | undefined>(0);\n  const width = widthRef.current;\n  // when opening we want it to immediately open to retrieve dimensions\n  // when closing we delay `present` to retrieve dimensions before closing\n  const isOpen = context.open || isPresent;\n  const isMountAnimationPreventedRef = React.useRef(isOpen);\n  const originalStylesRef = React.useRef<Record<string, string>>();\n\n  React.useEffect(() => {\n    const rAF = requestAnimationFrame(() => (isMountAnimationPreventedRef.current = false));\n    return () => cancelAnimationFrame(rAF);\n  }, []);\n\n  useLayoutEffect(() => {\n    const node = ref.current;\n    if (node) {\n      originalStylesRef.current = originalStylesRef.current || {\n        transitionDuration: node.style.transitionDuration,\n        animationDuration: node.style.animationDuration,\n        animationFillMode: node.style.animationFillMode,\n      };\n      // block any animations/transitions so the element renders at its full dimensions\n      node.style.transitionDuration = '0s';\n      node.style.animationDuration = '0s';\n      node.style.animationFillMode = 'none';\n\n      // get width and height from full dimensions\n      const rect = node.getBoundingClientRect();\n      heightRef.current = rect.height;\n      widthRef.current = rect.width;\n\n      // kick off any animations/transitions that were originally set up if it isn't the initial mount\n      if (!isMountAnimationPreventedRef.current) {\n        node.style.transitionDuration = originalStylesRef.current.transitionDuration;\n        node.style.animationDuration = originalStylesRef.current.animationDuration;\n        node.style.animationFillMode = originalStylesRef.current.animationFillMode;\n      }\n\n      setIsPresent(present);\n    }\n    /**\n     * depends on `context.open` because it will change to `false`\n     * when a close is triggered but `present` will be `false` on\n     * animation end (so when close finishes). This allows us to\n     * retrieve the dimensions *before* closing.\n     */\n  }, [context.open, present]);\n\n  return (\n    <Primitive.div\n      data-state={getState(context.open)}\n      data-disabled={context.disabled ? '' : undefined}\n      id={context.contentId}\n      hidden={!isOpen}\n      {...contentProps}\n      ref={composedRefs}\n      style={{\n        [`--radix-collapsible-content-height` as any]: height ? `${height}px` : undefined,\n        [`--radix-collapsible-content-width` as any]: width ? `${width}px` : undefined,\n        ...props.style,\n      }}\n    >\n      {isOpen && children}\n    </Primitive.div>\n  );\n});\n\n/* -----------------------------------------------------------------------------------------------*/\n\nfunction getState(open?: boolean) {\n  return open ? 'open' : 'closed';\n}\n\nconst Root = Collapsible;\nconst Trigger = CollapsibleTrigger;\nconst Content = CollapsibleContent;\n\nexport {\n  createCollapsibleScope,\n  //\n  Collapsible,\n  CollapsibleTrigger,\n  CollapsibleContent,\n  //\n  Root,\n  Trigger,\n  Content,\n};\nexport type { CollapsibleProps, CollapsibleTriggerProps, CollapsibleContentProps };\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}