{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nimport { GRAPHQL_AUTH_MODE } from '@aws-amplify/api-graphql';\nimport { GraphQLAuthError } from '@aws-amplify/api';\nimport { Logger } from '@aws-amplify/core';\nimport { isEnumFieldType, isGraphQLScalarType, isPredicateObj, isSchemaModel, isSchemaModelWithAttributes, isTargetNameAssociation, isNonModelFieldType, OpType, ModelOperation } from '../types';\nimport { exhaustiveCheck, extractPrimaryKeyFieldNames, establishRelationAndKeys, IDENTIFIER_KEY_SEPARATOR } from '../util';\nvar logger = new Logger('DataStore');\nvar GraphQLOperationType;\n(function (GraphQLOperationType) {\n  GraphQLOperationType[\"LIST\"] = \"query\";\n  GraphQLOperationType[\"CREATE\"] = \"mutation\";\n  GraphQLOperationType[\"UPDATE\"] = \"mutation\";\n  GraphQLOperationType[\"DELETE\"] = \"mutation\";\n  GraphQLOperationType[\"GET\"] = \"query\";\n})(GraphQLOperationType || (GraphQLOperationType = {}));\nexport var TransformerMutationType;\n(function (TransformerMutationType) {\n  TransformerMutationType[\"CREATE\"] = \"Create\";\n  TransformerMutationType[\"UPDATE\"] = \"Update\";\n  TransformerMutationType[\"DELETE\"] = \"Delete\";\n  TransformerMutationType[\"GET\"] = \"Get\";\n})(TransformerMutationType || (TransformerMutationType = {}));\nvar dummyMetadata = {\n  _version: undefined,\n  _lastChangedAt: undefined,\n  _deleted: undefined\n};\nvar metadataFields = Object.keys(dummyMetadata);\nexport function getMetadataFields() {\n  return metadataFields;\n}\nexport function generateSelectionSet(namespace, modelDefinition) {\n  var scalarFields = getScalarFields(modelDefinition);\n  var nonModelFields = getNonModelFields(namespace, modelDefinition);\n  var implicitOwnerField = getImplicitOwnerField(modelDefinition, scalarFields);\n  var scalarAndMetadataFields = Object.values(scalarFields).map(function (_a) {\n    var name = _a.name;\n    return name;\n  }).concat(implicitOwnerField).concat(nonModelFields);\n  if (isSchemaModel(modelDefinition)) {\n    scalarAndMetadataFields = scalarAndMetadataFields.concat(getMetadataFields()).concat(getConnectionFields(modelDefinition, namespace));\n  }\n  var result = scalarAndMetadataFields.join('\\n');\n  return result;\n}\nfunction getImplicitOwnerField(modelDefinition, scalarFields) {\n  var ownerFields = getOwnerFields(modelDefinition);\n  if (!scalarFields.owner && ownerFields.includes('owner')) {\n    return ['owner'];\n  }\n  return [];\n}\nfunction getOwnerFields(modelDefinition) {\n  var ownerFields = [];\n  if (isSchemaModelWithAttributes(modelDefinition)) {\n    modelDefinition.attributes.forEach(function (attr) {\n      if (attr.properties && attr.properties.rules) {\n        var rule = attr.properties.rules.find(function (rule) {\n          return rule.allow === 'owner';\n        });\n        if (rule && rule.ownerField) {\n          ownerFields.push(rule.ownerField);\n        }\n      }\n    });\n  }\n  return ownerFields;\n}\nfunction getScalarFields(modelDefinition) {\n  var fields = modelDefinition.fields;\n  var result = Object.values(fields).filter(function (field) {\n    if (isGraphQLScalarType(field.type) || isEnumFieldType(field.type)) {\n      return true;\n    }\n    return false;\n  }).reduce(function (acc, field) {\n    acc[field.name] = field;\n    return acc;\n  }, {});\n  return result;\n}\n// Used for generating the selection set for queries and mutations\nfunction getConnectionFields(modelDefinition, namespace) {\n  var result = [];\n  Object.values(modelDefinition.fields).filter(function (_a) {\n    var association = _a.association;\n    return association && Object.keys(association).length;\n  }).forEach(function (_a) {\n    var name = _a.name,\n      association = _a.association;\n    var connectionType = association.connectionType;\n    switch (connectionType) {\n      case 'HAS_ONE':\n      case 'HAS_MANY':\n        // Intentionally blank\n        break;\n      case 'BELONGS_TO':\n        if (isTargetNameAssociation(association)) {\n          // New codegen (CPK)\n          if (association.targetNames && association.targetNames.length > 0) {\n            // Need to retrieve relations in order to get connected model keys\n            var _b = __read(establishRelationAndKeys(namespace), 1),\n              relations = _b[0];\n            var connectedModelName = modelDefinition.fields[name].type['model'];\n            var byPkIndex = relations[connectedModelName].indexes.find(function (_a) {\n              var _b = __read(_a, 1),\n                name = _b[0];\n              return name === 'byPk';\n            });\n            var keyFields = byPkIndex && byPkIndex[1];\n            var keyFieldSelectionSet = keyFields === null || keyFields === void 0 ? void 0 : keyFields.join(' ');\n            // We rely on `_deleted` when we process the sync query (e.g. in batchSave in the adapters)\n            result.push(name + \" { \" + keyFieldSelectionSet + \" _deleted }\");\n          } else {\n            // backwards-compatability for schema generated prior to custom primary key support\n            result.push(name + \" { id _deleted }\");\n          }\n        }\n        break;\n      default:\n        exhaustiveCheck(connectionType);\n    }\n  });\n  return result;\n}\nfunction getNonModelFields(namespace, modelDefinition) {\n  var result = [];\n  Object.values(modelDefinition.fields).forEach(function (_a) {\n    var name = _a.name,\n      type = _a.type;\n    if (isNonModelFieldType(type)) {\n      var typeDefinition = namespace.nonModels[type.nonModel];\n      var scalarFields = Object.values(getScalarFields(typeDefinition)).map(function (_a) {\n        var name = _a.name;\n        return name;\n      });\n      var nested_1 = [];\n      Object.values(typeDefinition.fields).forEach(function (field) {\n        var type = field.type,\n          name = field.name;\n        if (isNonModelFieldType(type)) {\n          var typeDefinition_1 = namespace.nonModels[type.nonModel];\n          nested_1.push(name + \" { \" + generateSelectionSet(namespace, typeDefinition_1) + \" }\");\n        }\n      });\n      result.push(name + \" { \" + scalarFields.join(' ') + \" \" + nested_1.join(' ') + \" }\");\n    }\n  });\n  return result;\n}\nexport function getAuthorizationRules(modelDefinition) {\n  // Searching for owner authorization on attributes\n  var authConfig = [].concat(modelDefinition.attributes).find(function (attr) {\n    return attr && attr.type === 'auth';\n  });\n  var _a = (authConfig || {}).properties,\n    _b = (_a === void 0 ? {} : _a).rules,\n    rules = _b === void 0 ? [] : _b;\n  var resultRules = [];\n  // Multiple rules can be declared for allow: owner\n  rules.forEach(function (rule) {\n    // setting defaults for backwards compatibility with old cli\n    var _a = rule.identityClaim,\n      identityClaim = _a === void 0 ? 'cognito:username' : _a,\n      _b = rule.ownerField,\n      ownerField = _b === void 0 ? 'owner' : _b,\n      _c = rule.operations,\n      operations = _c === void 0 ? ['create', 'update', 'delete', 'read'] : _c,\n      _d = rule.provider,\n      provider = _d === void 0 ? 'userPools' : _d,\n      _e = rule.groupClaim,\n      groupClaim = _e === void 0 ? 'cognito:groups' : _e,\n      _f = rule.allow,\n      authStrategy = _f === void 0 ? 'iam' : _f,\n      _g = rule.groups,\n      groups = _g === void 0 ? [] : _g;\n    var isReadAuthorized = operations.includes('read');\n    var isOwnerAuth = authStrategy === 'owner';\n    if (!isReadAuthorized && !isOwnerAuth) {\n      return;\n    }\n    var authRule = {\n      identityClaim: identityClaim,\n      ownerField: ownerField,\n      provider: provider,\n      groupClaim: groupClaim,\n      authStrategy: authStrategy,\n      groups: groups,\n      areSubscriptionsPublic: false\n    };\n    if (isOwnerAuth) {\n      // look for the subscription level override\n      // only pay attention to the public level\n      var modelConfig = [].concat(modelDefinition.attributes).find(function (attr) {\n        return attr && attr.type === 'model';\n      });\n      // find the subscriptions level. ON is default\n      var _h = (modelConfig || {}).properties,\n        _j = (_h === void 0 ? {} : _h).subscriptions,\n        _k = (_j === void 0 ? {} : _j).level,\n        level = _k === void 0 ? 'on' : _k;\n      // treat subscriptions as public for owner auth with unprotected reads\n      // when `read` is omitted from `operations`\n      authRule.areSubscriptionsPublic = !operations.includes('read') || level === 'public';\n    }\n    if (isOwnerAuth) {\n      // owner rules has least priority\n      resultRules.push(authRule);\n      return;\n    }\n    resultRules.unshift(authRule);\n  });\n  return resultRules;\n}\nexport function buildSubscriptionGraphQLOperation(namespace, modelDefinition, transformerMutationType, isOwnerAuthorization, ownerField) {\n  var selectionSet = generateSelectionSet(namespace, modelDefinition);\n  var typeName = modelDefinition.name,\n    pluralTypeName = modelDefinition.pluralName;\n  var opName = \"on\" + transformerMutationType + typeName;\n  var docArgs = '';\n  var opArgs = '';\n  if (isOwnerAuthorization) {\n    docArgs = \"($\" + ownerField + \": String!)\";\n    opArgs = \"(\" + ownerField + \": $\" + ownerField + \")\";\n  }\n  return [transformerMutationType, opName, \"subscription operation\" + docArgs + \"{\\n\\t\\t\\t\" + opName + opArgs + \"{\\n\\t\\t\\t\\t\" + selectionSet + \"\\n\\t\\t\\t}\\n\\t\\t}\"];\n}\nexport function buildGraphQLOperation(namespace, modelDefinition, graphQLOpType) {\n  var selectionSet = generateSelectionSet(namespace, modelDefinition);\n  var typeName = modelDefinition.name,\n    pluralTypeName = modelDefinition.pluralName;\n  var operation;\n  var documentArgs = ' ';\n  var operationArgs = ' ';\n  var transformerMutationType;\n  switch (graphQLOpType) {\n    case 'LIST':\n      operation = \"sync\" + pluralTypeName;\n      documentArgs = \"($limit: Int, $nextToken: String, $lastSync: AWSTimestamp, $filter: Model\" + typeName + \"FilterInput)\";\n      operationArgs = '(limit: $limit, nextToken: $nextToken, lastSync: $lastSync, filter: $filter)';\n      selectionSet = \"items {\\n\\t\\t\\t\\t\\t\\t\\t\" + selectionSet + \"\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tnextToken\\n\\t\\t\\t\\t\\t\\tstartedAt\";\n      break;\n    case 'CREATE':\n      operation = \"create\" + typeName;\n      documentArgs = \"($input: Create\" + typeName + \"Input!)\";\n      operationArgs = '(input: $input)';\n      transformerMutationType = TransformerMutationType.CREATE;\n      break;\n    case 'UPDATE':\n      operation = \"update\" + typeName;\n      documentArgs = \"($input: Update\" + typeName + \"Input!, $condition: Model\" + typeName + \"ConditionInput)\";\n      operationArgs = '(input: $input, condition: $condition)';\n      transformerMutationType = TransformerMutationType.UPDATE;\n      break;\n    case 'DELETE':\n      operation = \"delete\" + typeName;\n      documentArgs = \"($input: Delete\" + typeName + \"Input!, $condition: Model\" + typeName + \"ConditionInput)\";\n      operationArgs = '(input: $input, condition: $condition)';\n      transformerMutationType = TransformerMutationType.DELETE;\n      break;\n    case 'GET':\n      operation = \"get\" + typeName;\n      documentArgs = \"($id: ID!)\";\n      operationArgs = '(id: $id)';\n      transformerMutationType = TransformerMutationType.GET;\n      break;\n    default:\n      exhaustiveCheck(graphQLOpType);\n  }\n  return [[transformerMutationType, operation, GraphQLOperationType[graphQLOpType] + \" operation\" + documentArgs + \"{\\n\\t\\t\" + operation + operationArgs + \"{\\n\\t\\t\\t\" + selectionSet + \"\\n\\t\\t}\\n\\t}\"]];\n}\nexport function createMutationInstanceFromModelOperation(relationships, modelDefinition, opType, model, element, condition, MutationEventConstructor, modelInstanceCreator, id) {\n  var operation;\n  switch (opType) {\n    case OpType.INSERT:\n      operation = TransformerMutationType.CREATE;\n      break;\n    case OpType.UPDATE:\n      operation = TransformerMutationType.UPDATE;\n      break;\n    case OpType.DELETE:\n      operation = TransformerMutationType.DELETE;\n      break;\n    default:\n      exhaustiveCheck(opType);\n  }\n  // stringify nested objects of type AWSJSON\n  // this allows us to return parsed JSON to users (see `castInstanceType()` in datastore.ts),\n  // but still send the object correctly over the wire\n  var replacer = function (k, v) {\n    var isAWSJSON = k && v !== null && typeof v === 'object' && modelDefinition.fields[k] && modelDefinition.fields[k].type === 'AWSJSON';\n    if (isAWSJSON) {\n      return JSON.stringify(v);\n    }\n    return v;\n  };\n  var modelId = getIdentifierValue(modelDefinition, element);\n  var optionalId = OpType.INSERT && id ? {\n    id: id\n  } : {};\n  var mutationEvent = modelInstanceCreator(MutationEventConstructor, __assign(__assign({}, optionalId), {\n    data: JSON.stringify(element, replacer),\n    modelId: modelId,\n    model: model.name,\n    operation: operation,\n    condition: JSON.stringify(condition)\n  }));\n  return mutationEvent;\n}\nexport function predicateToGraphQLCondition(predicate, modelDefinition) {\n  var result = {};\n  if (!predicate || !Array.isArray(predicate.predicates)) {\n    return result;\n  }\n  var keyFields = extractPrimaryKeyFieldNames(modelDefinition);\n  predicate.predicates.forEach(function (p) {\n    var _a;\n    if (isPredicateObj(p)) {\n      var field = p.field,\n        operator = p.operator,\n        operand = p.operand;\n      // This is compatible with how the GQL Transform currently generates the Condition Input,\n      // i.e. any PK and SK fields are omitted and can't be used as conditions.\n      // However, I think this limits usability.\n      // What if we want to delete all records where SK > some value\n      // Or all records where PK = some value but SKs are different values\n      // TODO: if the Transform gets updated ^ we'll need to modify this logic to only omit\n      // key fields from the predicate/condition when ALL of the keyFields are present and using `eq` operators\n      if (keyFields.includes(field)) {\n        return;\n      }\n      result[field] = (_a = {}, _a[operator] = operand, _a);\n    } else {\n      result[p.type] = predicateToGraphQLCondition(p, modelDefinition);\n    }\n  });\n  return result;\n}\nexport function predicateToGraphQLFilter(predicatesGroup) {\n  var result = {};\n  if (!predicatesGroup || !Array.isArray(predicatesGroup.predicates)) {\n    return result;\n  }\n  var type = predicatesGroup.type,\n    predicates = predicatesGroup.predicates;\n  var isList = type === 'and' || type === 'or';\n  result[type] = isList ? [] : {};\n  var appendToFilter = function (value) {\n    return isList ? result[type].push(value) : result[type] = value;\n  };\n  predicates.forEach(function (predicate) {\n    var _a, _b;\n    if (isPredicateObj(predicate)) {\n      var field = predicate.field,\n        operator = predicate.operator,\n        operand = predicate.operand;\n      var gqlField = (_a = {}, _a[field] = (_b = {}, _b[operator] = operand, _b), _a);\n      appendToFilter(gqlField);\n      return;\n    }\n    appendToFilter(predicateToGraphQLFilter(predicate));\n  });\n  return result;\n}\nexport function getUserGroupsFromToken(token, rule) {\n  // validate token against groupClaim\n  var userGroups = token[rule.groupClaim] || [];\n  if (typeof userGroups === 'string') {\n    var parsedGroups = void 0;\n    try {\n      parsedGroups = JSON.parse(userGroups);\n    } catch (e) {\n      parsedGroups = userGroups;\n    }\n    userGroups = [].concat(parsedGroups);\n  }\n  return userGroups;\n}\nexport function getModelAuthModes(_a) {\n  var authModeStrategy = _a.authModeStrategy,\n    defaultAuthMode = _a.defaultAuthMode,\n    modelName = _a.modelName,\n    schema = _a.schema;\n  return __awaiter(this, void 0, void 0, function () {\n    var operations, modelAuthModes, error_1;\n    var _this = this;\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          operations = Object.values(ModelOperation);\n          modelAuthModes = {\n            CREATE: [],\n            READ: [],\n            UPDATE: [],\n            DELETE: []\n          };\n          _b.label = 1;\n        case 1:\n          _b.trys.push([1, 3,, 4]);\n          return [4 /*yield*/, Promise.all(operations.map(function (operation) {\n            return __awaiter(_this, void 0, void 0, function () {\n              var authModes;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    return [4 /*yield*/, authModeStrategy({\n                      schema: schema,\n                      modelName: modelName,\n                      operation: operation\n                    })];\n                  case 1:\n                    authModes = _a.sent();\n                    if (typeof authModes === 'string') {\n                      modelAuthModes[operation] = [authModes];\n                    } else if (Array.isArray(authModes) && authModes.length) {\n                      modelAuthModes[operation] = authModes;\n                    } else {\n                      // Use default auth mode if nothing is returned from authModeStrategy\n                      modelAuthModes[operation] = [defaultAuthMode];\n                    }\n                    return [2 /*return*/];\n                }\n              });\n            });\n          }))];\n\n        case 2:\n          _b.sent();\n          return [3 /*break*/, 4];\n        case 3:\n          error_1 = _b.sent();\n          logger.debug(\"Error getting auth modes for model: \" + modelName, error_1);\n          return [3 /*break*/, 4];\n        case 4:\n          return [2 /*return*/, modelAuthModes];\n      }\n    });\n  });\n}\nexport function getForbiddenError(error) {\n  var forbiddenErrorMessages = ['Request failed with status code 401', 'Request failed with status code 403'];\n  var forbiddenError;\n  if (error && error.errors) {\n    forbiddenError = error.errors.find(function (err) {\n      return forbiddenErrorMessages.includes(err.message);\n    });\n  } else if (error && error.message) {\n    forbiddenError = error;\n  }\n  if (forbiddenError) {\n    return forbiddenError.message;\n  }\n  return null;\n}\nexport function getClientSideAuthError(error) {\n  var clientSideAuthErrors = Object.values(GraphQLAuthError);\n  var clientSideError = error && error.message && clientSideAuthErrors.find(function (clientError) {\n    return error.message.includes(clientError);\n  });\n  return clientSideError || null;\n}\nexport function getTokenForCustomAuth(authMode, amplifyConfig) {\n  if (amplifyConfig === void 0) {\n    amplifyConfig = {};\n  }\n  return __awaiter(this, void 0, void 0, function () {\n    var _a, functionAuthProvider, token, error_2;\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          if (!(authMode === GRAPHQL_AUTH_MODE.AWS_LAMBDA)) return [3 /*break*/, 6];\n          _a = amplifyConfig.authProviders, functionAuthProvider = (_a === void 0 ? {\n            functionAuthProvider: null\n          } : _a).functionAuthProvider;\n          if (!(functionAuthProvider && typeof functionAuthProvider === 'function')) return [3 /*break*/, 5];\n          _b.label = 1;\n        case 1:\n          _b.trys.push([1, 3,, 4]);\n          return [4 /*yield*/, functionAuthProvider()];\n        case 2:\n          token = _b.sent().token;\n          return [2 /*return*/, token];\n        case 3:\n          error_2 = _b.sent();\n          throw new Error(\"Error retrieving token from `functionAuthProvider`: \" + error_2);\n        case 4:\n          return [3 /*break*/, 6];\n        case 5:\n          // TODO: add docs link once available\n          throw new Error(\"You must provide a `functionAuthProvider` function to `DataStore.configure` when using \" + GRAPHQL_AUTH_MODE.AWS_LAMBDA);\n        case 6:\n          return [2 /*return*/];\n      }\n    });\n  });\n}\n// Util that takes a modelDefinition and model and returns either the id value(s) or the custom primary key value(s)\nexport function getIdentifierValue(modelDefinition, model) {\n  var pkFieldNames = extractPrimaryKeyFieldNames(modelDefinition);\n  var idOrPk = pkFieldNames.map(function (f) {\n    return model[f];\n  }).join(IDENTIFIER_KEY_SEPARATOR);\n  return idOrPk;\n}","map":{"version":3,"mappings":"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","names":["GRAPHQL_AUTH_MODE","GraphQLAuthError","Logger","isEnumFieldType","isGraphQLScalarType","isPredicateObj","isSchemaModel","isSchemaModelWithAttributes","isTargetNameAssociation","isNonModelFieldType","OpType","ModelOperation","exhaustiveCheck","extractPrimaryKeyFieldNames","establishRelationAndKeys","IDENTIFIER_KEY_SEPARATOR","logger","GraphQLOperationType","TransformerMutationType","dummyMetadata","_version","undefined","_lastChangedAt","_deleted","metadataFields","Object","keys","getMetadataFields","generateSelectionSet","namespace","modelDefinition","scalarFields","getScalarFields","nonModelFields","getNonModelFields","implicitOwnerField","getImplicitOwnerField","scalarAndMetadataFields","values","map","_a","name","concat","getConnectionFields","result","join","ownerFields","getOwnerFields","owner","includes","attributes","forEach","attr","properties","rules","rule","find","allow","ownerField","push","fields","filter","field","type","reduce","acc","association","length","connectionType","targetNames","relations","connectedModelName","byPkIndex","indexes","_b","keyFields","keyFieldSelectionSet","typeDefinition","nonModels","nonModel","nested_1","typeDefinition_1","getAuthorizationRules","authConfig","resultRules","identityClaim","_c","operations","_d","provider","_e","groupClaim","_f","authStrategy","_g","groups","isReadAuthorized","isOwnerAuth","authRule","areSubscriptionsPublic","modelConfig","_j","_k","level","unshift","buildSubscriptionGraphQLOperation","transformerMutationType","isOwnerAuthorization","selectionSet","pluralTypeName","opName","typeName","docArgs","opArgs","buildGraphQLOperation","graphQLOpType","operation","documentArgs","operationArgs","CREATE","UPDATE","DELETE","GET","createMutationInstanceFromModelOperation","relationships","opType","model","element","condition","MutationEventConstructor","modelInstanceCreator","id","INSERT","replacer","k","v","isAWSJSON","JSON","stringify","modelId","getIdentifierValue","optionalId","mutationEvent","data","predicateToGraphQLCondition","predicate","Array","isArray","predicates","p","operator","operand","predicateToGraphQLFilter","predicatesGroup","isList","appendToFilter","value","gqlField","getUserGroupsFromToken","token","userGroups","parsedGroups","parse","e","getModelAuthModes","authModeStrategy","defaultAuthMode","modelName","schema","modelAuthModes","READ","Promise","all","authModes","debug","error_1","getForbiddenError","error","forbiddenErrorMessages","forbiddenError","errors","err","message","getClientSideAuthError","clientSideAuthErrors","clientSideError","clientError","getTokenForCustomAuth","authMode","amplifyConfig","AWS_LAMBDA","functionAuthProvider","Error","error_2","pkFieldNames","idOrPk","f"],"sources":["C:\\Users\\weida\\Desktop\\playground_CC\\node_modules\\@aws-amplify\\datastore\\src\\sync\\utils.ts"],"sourcesContent":["import { GRAPHQL_AUTH_MODE } from '@aws-amplify/api-graphql';\nimport { GraphQLAuthError } from '@aws-amplify/api';\nimport { Logger } from '@aws-amplify/core';\nimport { ModelInstanceCreator } from '../datastore/datastore';\nimport {\n\tAuthorizationRule,\n\tGraphQLCondition,\n\tGraphQLFilter,\n\tGraphQLField,\n\tisEnumFieldType,\n\tisGraphQLScalarType,\n\tisPredicateObj,\n\tisSchemaModel,\n\tisSchemaModelWithAttributes,\n\tisTargetNameAssociation,\n\tisNonModelFieldType,\n\tModelFields,\n\tModelInstanceMetadata,\n\tOpType,\n\tPersistentModel,\n\tPersistentModelConstructor,\n\tPredicatesGroup,\n\tRelationshipType,\n\tSchemaModel,\n\tSchemaNamespace,\n\tSchemaNonModel,\n\tModelOperation,\n\tInternalSchema,\n\tAuthModeStrategy,\n} from '../types';\nimport {\n\texhaustiveCheck,\n\textractPrimaryKeyFieldNames,\n\testablishRelationAndKeys,\n\tIDENTIFIER_KEY_SEPARATOR,\n} from '../util';\nimport { MutationEvent } from './';\n\nconst logger = new Logger('DataStore');\n\nenum GraphQLOperationType {\n\tLIST = 'query',\n\tCREATE = 'mutation',\n\tUPDATE = 'mutation',\n\tDELETE = 'mutation',\n\tGET = 'query',\n}\n\nexport enum TransformerMutationType {\n\tCREATE = 'Create',\n\tUPDATE = 'Update',\n\tDELETE = 'Delete',\n\tGET = 'Get',\n}\n\nconst dummyMetadata: ModelInstanceMetadata = {\n\t_version: undefined,\n\t_lastChangedAt: undefined,\n\t_deleted: undefined,\n};\n\nconst metadataFields = <(keyof ModelInstanceMetadata)[]>(\n\tObject.keys(dummyMetadata)\n);\nexport function getMetadataFields(): ReadonlyArray<string> {\n\treturn metadataFields;\n}\n\nexport function generateSelectionSet(\n\tnamespace: SchemaNamespace,\n\tmodelDefinition: SchemaModel | SchemaNonModel\n): string {\n\tconst scalarFields = getScalarFields(modelDefinition);\n\tconst nonModelFields = getNonModelFields(namespace, modelDefinition);\n\tconst implicitOwnerField = getImplicitOwnerField(\n\t\tmodelDefinition,\n\t\tscalarFields\n\t);\n\n\tlet scalarAndMetadataFields = Object.values(scalarFields)\n\t\t.map(({ name }) => name)\n\t\t.concat(implicitOwnerField)\n\t\t.concat(nonModelFields);\n\n\tif (isSchemaModel(modelDefinition)) {\n\t\tscalarAndMetadataFields = scalarAndMetadataFields\n\t\t\t.concat(getMetadataFields())\n\t\t\t.concat(getConnectionFields(modelDefinition, namespace));\n\t}\n\n\tconst result = scalarAndMetadataFields.join('\\n');\n\n\treturn result;\n}\n\nfunction getImplicitOwnerField(\n\tmodelDefinition: SchemaModel | SchemaNonModel,\n\tscalarFields: ModelFields\n) {\n\tconst ownerFields = getOwnerFields(modelDefinition);\n\n\tif (!scalarFields.owner && ownerFields.includes('owner')) {\n\t\treturn ['owner'];\n\t}\n\treturn [];\n}\n\nfunction getOwnerFields(\n\tmodelDefinition: SchemaModel | SchemaNonModel\n): string[] {\n\tconst ownerFields: string[] = [];\n\tif (isSchemaModelWithAttributes(modelDefinition)) {\n\t\tmodelDefinition.attributes.forEach(attr => {\n\t\t\tif (attr.properties && attr.properties.rules) {\n\t\t\t\tconst rule = attr.properties.rules.find(rule => rule.allow === 'owner');\n\t\t\t\tif (rule && rule.ownerField) {\n\t\t\t\t\townerFields.push(rule.ownerField);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\treturn ownerFields;\n}\n\nfunction getScalarFields(\n\tmodelDefinition: SchemaModel | SchemaNonModel\n): ModelFields {\n\tconst { fields } = modelDefinition;\n\n\tconst result = Object.values(fields)\n\t\t.filter(field => {\n\t\t\tif (isGraphQLScalarType(field.type) || isEnumFieldType(field.type)) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t})\n\t\t.reduce((acc, field) => {\n\t\t\tacc[field.name] = field;\n\n\t\t\treturn acc;\n\t\t}, {} as ModelFields);\n\n\treturn result;\n}\n\n// Used for generating the selection set for queries and mutations\nfunction getConnectionFields(\n\tmodelDefinition: SchemaModel,\n\tnamespace: SchemaNamespace\n): string[] {\n\tconst result: string[] = [];\n\n\tObject.values(modelDefinition.fields)\n\t\t.filter(({ association }) => association && Object.keys(association).length)\n\t\t.forEach(({ name, association }) => {\n\t\t\tconst { connectionType } = association;\n\n\t\t\tswitch (connectionType) {\n\t\t\t\tcase 'HAS_ONE':\n\t\t\t\tcase 'HAS_MANY':\n\t\t\t\t\t// Intentionally blank\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'BELONGS_TO':\n\t\t\t\t\tif (isTargetNameAssociation(association)) {\n\t\t\t\t\t\t// New codegen (CPK)\n\t\t\t\t\t\tif (association.targetNames && association.targetNames.length > 0) {\n\t\t\t\t\t\t\t// Need to retrieve relations in order to get connected model keys\n\t\t\t\t\t\t\tconst [relations] = establishRelationAndKeys(namespace);\n\n\t\t\t\t\t\t\tconst connectedModelName =\n\t\t\t\t\t\t\t\tmodelDefinition.fields[name].type['model'];\n\n\t\t\t\t\t\t\tconst byPkIndex = relations[connectedModelName].indexes.find(\n\t\t\t\t\t\t\t\t([name]) => name === 'byPk'\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tconst keyFields = byPkIndex && byPkIndex[1];\n\t\t\t\t\t\t\tconst keyFieldSelectionSet = keyFields?.join(' ');\n\n\t\t\t\t\t\t\t// We rely on `_deleted` when we process the sync query (e.g. in batchSave in the adapters)\n\t\t\t\t\t\t\tresult.push(`${name} { ${keyFieldSelectionSet} _deleted }`);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// backwards-compatability for schema generated prior to custom primary key support\n\t\t\t\t\t\t\tresult.push(`${name} { id _deleted }`);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\texhaustiveCheck(connectionType);\n\t\t\t}\n\t\t});\n\n\treturn result;\n}\n\nfunction getNonModelFields(\n\tnamespace: SchemaNamespace,\n\tmodelDefinition: SchemaModel | SchemaNonModel\n): string[] {\n\tconst result = [];\n\n\tObject.values(modelDefinition.fields).forEach(({ name, type }) => {\n\t\tif (isNonModelFieldType(type)) {\n\t\t\tconst typeDefinition = namespace.nonModels![type.nonModel];\n\t\t\tconst scalarFields = Object.values(getScalarFields(typeDefinition)).map(\n\t\t\t\t({ name }) => name\n\t\t\t);\n\n\t\t\tconst nested = [];\n\t\t\tObject.values(typeDefinition.fields).forEach(field => {\n\t\t\t\tconst { type, name } = field;\n\n\t\t\t\tif (isNonModelFieldType(type)) {\n\t\t\t\t\tconst typeDefinition = namespace.nonModels![type.nonModel];\n\n\t\t\t\t\tnested.push(\n\t\t\t\t\t\t`${name} { ${generateSelectionSet(namespace, typeDefinition)} }`\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tresult.push(`${name} { ${scalarFields.join(' ')} ${nested.join(' ')} }`);\n\t\t}\n\t});\n\n\treturn result;\n}\n\nexport function getAuthorizationRules(\n\tmodelDefinition: SchemaModel\n): AuthorizationRule[] {\n\t// Searching for owner authorization on attributes\n\tconst authConfig = []\n\t\t.concat(modelDefinition.attributes)\n\t\t.find(attr => attr && attr.type === 'auth');\n\n\tconst { properties: { rules = [] } = {} } = authConfig || {};\n\n\tconst resultRules: AuthorizationRule[] = [];\n\t// Multiple rules can be declared for allow: owner\n\trules.forEach(rule => {\n\t\t// setting defaults for backwards compatibility with old cli\n\t\tconst {\n\t\t\tidentityClaim = 'cognito:username',\n\t\t\townerField = 'owner',\n\t\t\toperations = ['create', 'update', 'delete', 'read'],\n\t\t\tprovider = 'userPools',\n\t\t\tgroupClaim = 'cognito:groups',\n\t\t\tallow: authStrategy = 'iam',\n\t\t\tgroups = [],\n\t\t} = rule;\n\n\t\tconst isReadAuthorized = operations.includes('read');\n\t\tconst isOwnerAuth = authStrategy === 'owner';\n\n\t\tif (!isReadAuthorized && !isOwnerAuth) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst authRule: AuthorizationRule = {\n\t\t\tidentityClaim,\n\t\t\townerField,\n\t\t\tprovider,\n\t\t\tgroupClaim,\n\t\t\tauthStrategy,\n\t\t\tgroups,\n\t\t\tareSubscriptionsPublic: false,\n\t\t};\n\n\t\tif (isOwnerAuth) {\n\t\t\t// look for the subscription level override\n\t\t\t// only pay attention to the public level\n\t\t\tconst modelConfig = (<typeof modelDefinition.attributes>[])\n\t\t\t\t.concat(modelDefinition.attributes)\n\t\t\t\t.find(attr => attr && attr.type === 'model');\n\n\t\t\t// find the subscriptions level. ON is default\n\t\t\tconst { properties: { subscriptions: { level = 'on' } = {} } = {} } =\n\t\t\t\tmodelConfig || {};\n\n\t\t\t// treat subscriptions as public for owner auth with unprotected reads\n\t\t\t// when `read` is omitted from `operations`\n\t\t\tauthRule.areSubscriptionsPublic =\n\t\t\t\t!operations.includes('read') || level === 'public';\n\t\t}\n\n\t\tif (isOwnerAuth) {\n\t\t\t// owner rules has least priority\n\t\t\tresultRules.push(authRule);\n\t\t\treturn;\n\t\t}\n\n\t\tresultRules.unshift(authRule);\n\t});\n\n\treturn resultRules;\n}\n\nexport function buildSubscriptionGraphQLOperation(\n\tnamespace: SchemaNamespace,\n\tmodelDefinition: SchemaModel,\n\ttransformerMutationType: TransformerMutationType,\n\tisOwnerAuthorization: boolean,\n\townerField: string\n): [TransformerMutationType, string, string] {\n\tconst selectionSet = generateSelectionSet(namespace, modelDefinition);\n\n\tconst { name: typeName, pluralName: pluralTypeName } = modelDefinition;\n\n\tconst opName = `on${transformerMutationType}${typeName}`;\n\tlet docArgs = '';\n\tlet opArgs = '';\n\n\tif (isOwnerAuthorization) {\n\t\tdocArgs = `($${ownerField}: String!)`;\n\t\topArgs = `(${ownerField}: $${ownerField})`;\n\t}\n\n\treturn [\n\t\ttransformerMutationType,\n\t\topName,\n\t\t`subscription operation${docArgs}{\n\t\t\t${opName}${opArgs}{\n\t\t\t\t${selectionSet}\n\t\t\t}\n\t\t}`,\n\t];\n}\n\nexport function buildGraphQLOperation(\n\tnamespace: SchemaNamespace,\n\tmodelDefinition: SchemaModel,\n\tgraphQLOpType: keyof typeof GraphQLOperationType\n): [TransformerMutationType, string, string][] {\n\tlet selectionSet = generateSelectionSet(namespace, modelDefinition);\n\n\tconst { name: typeName, pluralName: pluralTypeName } = modelDefinition;\n\n\tlet operation: string;\n\tlet documentArgs: string = ' ';\n\tlet operationArgs: string = ' ';\n\tlet transformerMutationType: TransformerMutationType;\n\n\tswitch (graphQLOpType) {\n\t\tcase 'LIST':\n\t\t\toperation = `sync${pluralTypeName}`;\n\t\t\tdocumentArgs = `($limit: Int, $nextToken: String, $lastSync: AWSTimestamp, $filter: Model${typeName}FilterInput)`;\n\t\t\toperationArgs =\n\t\t\t\t'(limit: $limit, nextToken: $nextToken, lastSync: $lastSync, filter: $filter)';\n\t\t\tselectionSet = `items {\n\t\t\t\t\t\t\t${selectionSet}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tnextToken\n\t\t\t\t\t\tstartedAt`;\n\t\t\tbreak;\n\t\tcase 'CREATE':\n\t\t\toperation = `create${typeName}`;\n\t\t\tdocumentArgs = `($input: Create${typeName}Input!)`;\n\t\t\toperationArgs = '(input: $input)';\n\t\t\ttransformerMutationType = TransformerMutationType.CREATE;\n\t\t\tbreak;\n\t\tcase 'UPDATE':\n\t\t\toperation = `update${typeName}`;\n\t\t\tdocumentArgs = `($input: Update${typeName}Input!, $condition: Model${typeName}ConditionInput)`;\n\t\t\toperationArgs = '(input: $input, condition: $condition)';\n\t\t\ttransformerMutationType = TransformerMutationType.UPDATE;\n\t\t\tbreak;\n\t\tcase 'DELETE':\n\t\t\toperation = `delete${typeName}`;\n\t\t\tdocumentArgs = `($input: Delete${typeName}Input!, $condition: Model${typeName}ConditionInput)`;\n\t\t\toperationArgs = '(input: $input, condition: $condition)';\n\t\t\ttransformerMutationType = TransformerMutationType.DELETE;\n\t\t\tbreak;\n\t\tcase 'GET':\n\t\t\toperation = `get${typeName}`;\n\t\t\tdocumentArgs = `($id: ID!)`;\n\t\t\toperationArgs = '(id: $id)';\n\t\t\ttransformerMutationType = TransformerMutationType.GET;\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\texhaustiveCheck(graphQLOpType);\n\t}\n\n\treturn [\n\t\t[\n\t\t\ttransformerMutationType,\n\t\t\toperation,\n\t\t\t`${GraphQLOperationType[graphQLOpType]} operation${documentArgs}{\n\t\t${operation}${operationArgs}{\n\t\t\t${selectionSet}\n\t\t}\n\t}`,\n\t\t],\n\t];\n}\n\nexport function createMutationInstanceFromModelOperation<\n\tT extends PersistentModel\n>(\n\trelationships: RelationshipType,\n\tmodelDefinition: SchemaModel,\n\topType: OpType,\n\tmodel: PersistentModelConstructor<T>,\n\telement: T,\n\tcondition: GraphQLCondition,\n\tMutationEventConstructor: PersistentModelConstructor<MutationEvent>,\n\tmodelInstanceCreator: ModelInstanceCreator,\n\tid?: string\n): MutationEvent {\n\tlet operation: TransformerMutationType;\n\n\tswitch (opType) {\n\t\tcase OpType.INSERT:\n\t\t\toperation = TransformerMutationType.CREATE;\n\t\t\tbreak;\n\t\tcase OpType.UPDATE:\n\t\t\toperation = TransformerMutationType.UPDATE;\n\t\t\tbreak;\n\t\tcase OpType.DELETE:\n\t\t\toperation = TransformerMutationType.DELETE;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\texhaustiveCheck(opType);\n\t}\n\n\t// stringify nested objects of type AWSJSON\n\t// this allows us to return parsed JSON to users (see `castInstanceType()` in datastore.ts),\n\t// but still send the object correctly over the wire\n\tconst replacer = (k, v) => {\n\t\tconst isAWSJSON =\n\t\t\tk &&\n\t\t\tv !== null &&\n\t\t\ttypeof v === 'object' &&\n\t\t\tmodelDefinition.fields[k] &&\n\t\t\tmodelDefinition.fields[k].type === 'AWSJSON';\n\n\t\tif (isAWSJSON) {\n\t\t\treturn JSON.stringify(v);\n\t\t}\n\t\treturn v;\n\t};\n\n\tconst modelId = getIdentifierValue(modelDefinition, element);\n\tconst optionalId = OpType.INSERT && id ? { id } : {};\n\n\tconst mutationEvent = modelInstanceCreator(MutationEventConstructor, {\n\t\t...optionalId,\n\t\tdata: JSON.stringify(element, replacer),\n\t\tmodelId,\n\t\tmodel: model.name,\n\t\toperation,\n\t\tcondition: JSON.stringify(condition),\n\t});\n\n\treturn mutationEvent;\n}\n\nexport function predicateToGraphQLCondition(\n\tpredicate: PredicatesGroup<any>,\n\tmodelDefinition: SchemaModel\n): GraphQLCondition {\n\tconst result = {};\n\n\tif (!predicate || !Array.isArray(predicate.predicates)) {\n\t\treturn result;\n\t}\n\n\tconst keyFields = extractPrimaryKeyFieldNames(modelDefinition);\n\n\tpredicate.predicates.forEach(p => {\n\t\tif (isPredicateObj(p)) {\n\t\t\tconst { field, operator, operand } = p;\n\n\t\t\t// This is compatible with how the GQL Transform currently generates the Condition Input,\n\t\t\t// i.e. any PK and SK fields are omitted and can't be used as conditions.\n\t\t\t// However, I think this limits usability.\n\t\t\t// What if we want to delete all records where SK > some value\n\t\t\t// Or all records where PK = some value but SKs are different values\n\n\t\t\t// TODO: if the Transform gets updated ^ we'll need to modify this logic to only omit\n\t\t\t// key fields from the predicate/condition when ALL of the keyFields are present and using `eq` operators\n\t\t\tif (keyFields.includes(field as string)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tresult[field] = { [operator]: operand };\n\t\t} else {\n\t\t\tresult[p.type] = predicateToGraphQLCondition(p, modelDefinition);\n\t\t}\n\t});\n\n\treturn result;\n}\n\nexport function predicateToGraphQLFilter(\n\tpredicatesGroup: PredicatesGroup<any>\n): GraphQLFilter {\n\tconst result: GraphQLFilter = {};\n\n\tif (!predicatesGroup || !Array.isArray(predicatesGroup.predicates)) {\n\t\treturn result;\n\t}\n\n\tconst { type, predicates } = predicatesGroup;\n\tconst isList = type === 'and' || type === 'or';\n\n\tresult[type] = isList ? [] : {};\n\n\tconst appendToFilter = value =>\n\t\tisList ? result[type].push(value) : (result[type] = value);\n\n\tpredicates.forEach(predicate => {\n\t\tif (isPredicateObj(predicate)) {\n\t\t\tconst { field, operator, operand } = predicate;\n\n\t\t\tconst gqlField: GraphQLField = {\n\t\t\t\t[field]: { [operator]: operand },\n\t\t\t};\n\n\t\t\tappendToFilter(gqlField);\n\t\t\treturn;\n\t\t}\n\n\t\tappendToFilter(predicateToGraphQLFilter(predicate));\n\t});\n\n\treturn result;\n}\n\nexport function getUserGroupsFromToken(\n\ttoken: { [field: string]: any },\n\trule: AuthorizationRule\n): string[] {\n\t// validate token against groupClaim\n\tlet userGroups: string[] | string = token[rule.groupClaim] || [];\n\n\tif (typeof userGroups === 'string') {\n\t\tlet parsedGroups;\n\t\ttry {\n\t\t\tparsedGroups = JSON.parse(userGroups);\n\t\t} catch (e) {\n\t\t\tparsedGroups = userGroups;\n\t\t}\n\t\tuserGroups = [].concat(parsedGroups);\n\t}\n\n\treturn userGroups;\n}\n\nexport async function getModelAuthModes({\n\tauthModeStrategy,\n\tdefaultAuthMode,\n\tmodelName,\n\tschema,\n}: {\n\tauthModeStrategy: AuthModeStrategy;\n\tdefaultAuthMode: GRAPHQL_AUTH_MODE;\n\tmodelName: string;\n\tschema: InternalSchema;\n}): Promise<{\n\t[key in ModelOperation]: GRAPHQL_AUTH_MODE[];\n}> {\n\tconst operations = Object.values(ModelOperation);\n\n\tconst modelAuthModes: {\n\t\t[key in ModelOperation]: GRAPHQL_AUTH_MODE[];\n\t} = {\n\t\tCREATE: [],\n\t\tREAD: [],\n\t\tUPDATE: [],\n\t\tDELETE: [],\n\t};\n\n\ttry {\n\t\tawait Promise.all(\n\t\t\toperations.map(async operation => {\n\t\t\t\tconst authModes = await authModeStrategy({\n\t\t\t\t\tschema,\n\t\t\t\t\tmodelName,\n\t\t\t\t\toperation,\n\t\t\t\t});\n\n\t\t\t\tif (typeof authModes === 'string') {\n\t\t\t\t\tmodelAuthModes[operation] = [authModes];\n\t\t\t\t} else if (Array.isArray(authModes) && authModes.length) {\n\t\t\t\t\tmodelAuthModes[operation] = authModes;\n\t\t\t\t} else {\n\t\t\t\t\t// Use default auth mode if nothing is returned from authModeStrategy\n\t\t\t\t\tmodelAuthModes[operation] = [defaultAuthMode];\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t} catch (error) {\n\t\tlogger.debug(`Error getting auth modes for model: ${modelName}`, error);\n\t}\n\treturn modelAuthModes;\n}\n\nexport function getForbiddenError(error) {\n\tconst forbiddenErrorMessages = [\n\t\t'Request failed with status code 401',\n\t\t'Request failed with status code 403',\n\t];\n\tlet forbiddenError;\n\tif (error && error.errors) {\n\t\tforbiddenError = (error.errors as [any]).find(err =>\n\t\t\tforbiddenErrorMessages.includes(err.message)\n\t\t);\n\t} else if (error && error.message) {\n\t\tforbiddenError = error;\n\t}\n\n\tif (forbiddenError) {\n\t\treturn forbiddenError.message;\n\t}\n\treturn null;\n}\n\nexport function getClientSideAuthError(error) {\n\tconst clientSideAuthErrors = Object.values(GraphQLAuthError);\n\tconst clientSideError =\n\t\terror &&\n\t\terror.message &&\n\t\tclientSideAuthErrors.find(clientError =>\n\t\t\terror.message.includes(clientError)\n\t\t);\n\treturn clientSideError || null;\n}\n\nexport async function getTokenForCustomAuth(\n\tauthMode: GRAPHQL_AUTH_MODE,\n\tamplifyConfig: Record<string, any> = {}\n): Promise<string | undefined> {\n\tif (authMode === GRAPHQL_AUTH_MODE.AWS_LAMBDA) {\n\t\tconst {\n\t\t\tauthProviders: { functionAuthProvider } = { functionAuthProvider: null },\n\t\t} = amplifyConfig;\n\t\tif (functionAuthProvider && typeof functionAuthProvider === 'function') {\n\t\t\ttry {\n\t\t\t\tconst { token } = await functionAuthProvider();\n\t\t\t\treturn token;\n\t\t\t} catch (error) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Error retrieving token from \\`functionAuthProvider\\`: ${error}`\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\t// TODO: add docs link once available\n\t\t\tthrow new Error(\n\t\t\t\t`You must provide a \\`functionAuthProvider\\` function to \\`DataStore.configure\\` when using ${GRAPHQL_AUTH_MODE.AWS_LAMBDA}`\n\t\t\t);\n\t\t}\n\t}\n}\n\n// Util that takes a modelDefinition and model and returns either the id value(s) or the custom primary key value(s)\nexport function getIdentifierValue(\n\tmodelDefinition: SchemaModel,\n\tmodel: ModelInstanceMetadata | PersistentModel\n): string {\n\tconst pkFieldNames = extractPrimaryKeyFieldNames(modelDefinition);\n\n\tconst idOrPk = pkFieldNames.map(f => model[f]).join(IDENTIFIER_KEY_SEPARATOR);\n\n\treturn idOrPk;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}