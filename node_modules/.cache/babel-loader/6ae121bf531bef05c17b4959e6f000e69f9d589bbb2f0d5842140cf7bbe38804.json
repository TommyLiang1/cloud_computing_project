{"ast":null,"code":"import { useId as e } from \"@radix-ui/react-id\";\nimport * as o from \"@radix-ui/react-collapsible\";\nimport { createCollapsibleScope as r } from \"@radix-ui/react-collapsible\";\nimport { Primitive as t } from \"@radix-ui/react-primitive\";\nimport { useControllableState as c } from \"@radix-ui/react-use-controllable-state\";\nimport { composeEventHandlers as n } from \"@radix-ui/primitive\";\nimport { useComposedRefs as i } from \"@radix-ui/react-compose-refs\";\nimport { createCollection as a } from \"@radix-ui/react-collection\";\nimport { createContextScope as l } from \"@radix-ui/react-context\";\nimport d from \"react\";\nimport p from \"@babel/runtime/helpers/esm/extends\";\nconst s = [\"Home\", \"End\", \"ArrowDown\", \"ArrowUp\"],\n  [u, m, f] = a(\"Accordion\"),\n  [A, g] = l(\"Accordion\", [f, r]);\nexport { g as createAccordionScope };\nconst b = r();\nexport const Accordion = /*#__PURE__*/d.forwardRef((e, o) => {\n  const {\n      type: r,\n      ...t\n    } = e,\n    c = t,\n    n = t; /*#__PURE__*/\n  return d.createElement(u.Provider, {\n    scope: e.__scopeAccordion\n  }, \"multiple\" === r ? /*#__PURE__*/d.createElement(I, p({}, n, {\n    ref: o\n  })) : /*#__PURE__*/d.createElement(y, p({}, c, {\n    ref: o\n  })));\n}); /*#__PURE__*/\nAccordion.propTypes = {\n  type(e) {\n    const o = e.value || e.defaultValue;\n    return e.type && ![\"single\", \"multiple\"].includes(e.type) ? new Error(\"Invalid prop `type` supplied to `Accordion`. Expected one of `single | multiple`.\") : \"multiple\" === e.type && \"string\" == typeof o ? new Error(\"Invalid prop `type` supplied to `Accordion`. Expected `single` when `defaultValue` or `value` is type `string`.\") : \"single\" === e.type && Array.isArray(o) ? new Error(\"Invalid prop `type` supplied to `Accordion`. Expected `multiple` when `defaultValue` or `value` is type `string[]`.\") : null;\n  }\n};\nconst [x, v] = A(\"Accordion\"),\n  [E, w] = A(\"Accordion\", {\n    collapsible: !1\n  }),\n  y = /*#__PURE__*/d.forwardRef((e, o) => {\n    const {\n        value: r,\n        defaultValue: t,\n        onValueChange: n = () => {},\n        collapsible: i = !1,\n        ...a\n      } = e,\n      [l, s] = c({\n        prop: r,\n        defaultProp: t,\n        onChange: n\n      }); /*#__PURE__*/\n    return d.createElement(x, {\n      scope: e.__scopeAccordion,\n      value: l ? [l] : [],\n      onItemOpen: s,\n      onItemClose: d.useCallback(() => i && s(\"\"), [i, s])\n    }, /*#__PURE__*/d.createElement(E, {\n      scope: e.__scopeAccordion,\n      collapsible: i\n    }, /*#__PURE__*/d.createElement(C, p({}, a, {\n      ref: o\n    }))));\n  }),\n  I = /*#__PURE__*/d.forwardRef((e, o) => {\n    const {\n        value: r,\n        defaultValue: t,\n        onValueChange: n = () => {},\n        ...i\n      } = e,\n      [a = [], l] = c({\n        prop: r,\n        defaultProp: t,\n        onChange: n\n      }),\n      s = d.useCallback(e => l(function () {\n        let o = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n        return [...o, e];\n      }), [l]),\n      u = d.useCallback(e => l(function () {\n        let o = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n        return o.filter(o => o !== e);\n      }), [l]); /*#__PURE__*/\n    return d.createElement(x, {\n      scope: e.__scopeAccordion,\n      value: a,\n      onItemOpen: s,\n      onItemClose: u\n    }, /*#__PURE__*/d.createElement(E, {\n      scope: e.__scopeAccordion,\n      collapsible: !0\n    }, /*#__PURE__*/d.createElement(C, p({}, i, {\n      ref: o\n    }))));\n  }),\n  [_, h] = A(\"Accordion\"),\n  C = /*#__PURE__*/d.forwardRef((e, o) => {\n    const {\n        __scopeAccordion: r,\n        disabled: c,\n        ...a\n      } = e,\n      l = d.useRef(null),\n      f = i(l, o),\n      A = m(r),\n      g = n(e.onKeyDown, e => {\n        var o;\n        if (!s.includes(e.key)) return;\n        const r = e.target,\n          t = A().filter(e => {\n            var o;\n            return !(null !== (o = e.ref.current) && void 0 !== o && o.disabled);\n          }),\n          c = t.findIndex(e => e.ref.current === r),\n          n = t.length;\n        if (-1 === c) return;\n        e.preventDefault();\n        let i = c;\n        switch (e.key) {\n          case \"Home\":\n            i = 0;\n            break;\n          case \"End\":\n            i = n - 1;\n            break;\n          case \"ArrowDown\":\n            i = c + 1;\n            break;\n          case \"ArrowUp\":\n            i = c - 1, i < 0 && (i = n - 1);\n        }\n        null === (o = t[i % n].ref.current) || void 0 === o || o.focus();\n      }); /*#__PURE__*/\n    return d.createElement(_, {\n      scope: r,\n      disabled: c\n    }, /*#__PURE__*/d.createElement(u.Slot, {\n      scope: r\n    }, /*#__PURE__*/d.createElement(t.div, p({}, a, {\n      ref: f,\n      onKeyDown: c ? void 0 : g\n    }))));\n  }),\n  [R, k] = A(\"AccordionItem\");\nexport const AccordionItem = /*#__PURE__*/d.forwardRef((r, t) => {\n  const {\n      __scopeAccordion: c,\n      value: n,\n      ...i\n    } = r,\n    a = h(\"AccordionItem\", c),\n    l = v(\"AccordionItem\", c),\n    s = b(c),\n    u = e(),\n    m = n && l.value.includes(n) || !1,\n    f = a.disabled || r.disabled; /*#__PURE__*/\n  return d.createElement(R, {\n    scope: c,\n    open: m,\n    disabled: f,\n    triggerId: u\n  }, /*#__PURE__*/d.createElement(o.Root, p({\n    \"data-state\": m ? \"open\" : \"closed\"\n  }, s, i, {\n    ref: t,\n    disabled: f,\n    open: m,\n    onOpenChange: e => {\n      e ? l.onItemOpen(n) : l.onItemClose(n);\n    }\n  })));\n}); /*#__PURE__*/\nexport const AccordionHeader = /*#__PURE__*/d.forwardRef((e, o) => {\n  const {\n      __scopeAccordion: r,\n      ...c\n    } = e,\n    n = k(\"AccordionHeader\", r); /*#__PURE__*/\n  return d.createElement(t.h3, p({\n    \"data-state\": (i = n.open, i ? \"open\" : \"closed\"),\n    \"data-disabled\": n.disabled ? \"\" : void 0\n  }, c, {\n    ref: o\n  }));\n  var i;\n}); /*#__PURE__*/\nexport const AccordionTrigger = /*#__PURE__*/d.forwardRef((e, r) => {\n  const {\n      __scopeAccordion: t,\n      ...c\n    } = e,\n    n = k(\"AccordionTrigger\", t),\n    i = w(\"AccordionTrigger\", t),\n    a = b(t); /*#__PURE__*/\n  return d.createElement(u.ItemSlot, {\n    scope: t\n  }, /*#__PURE__*/d.createElement(o.Trigger, p({\n    \"aria-disabled\": n.open && !i.collapsible || void 0,\n    id: n.triggerId\n  }, a, c, {\n    ref: r\n  })));\n}); /*#__PURE__*/\nexport const AccordionContent = /*#__PURE__*/d.forwardRef((e, r) => {\n  const {\n      __scopeAccordion: t,\n      ...c\n    } = e,\n    n = k(\"AccordionContent\", t),\n    i = b(t); /*#__PURE__*/\n  return d.createElement(o.Content, p({\n    role: \"region\",\n    \"aria-labelledby\": n.triggerId\n  }, i, c, {\n    ref: r,\n    style: {\n      \"--radix-accordion-content-height\": \"var(--radix-collapsible-content-height)\",\n      \"--radix-accordion-content-width\": \"var(--radix-collapsible-content-width)\",\n      ...e.style\n    }\n  }));\n}); /*#__PURE__*/\nexport const Root = Accordion;\nexport const Item = AccordionItem;\nexport const Header = AccordionHeader;\nexport const Trigger = AccordionTrigger;\nexport const Content = AccordionContent;","map":{"version":3,"mappings":"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","names":["ACCORDION_KEYS","Collection","useCollection","createCollectionScope","createCollection","createAccordionContext","createAccordionScope","createContextScope","createCollapsibleScope","useCollapsibleScope","Accordion","React","forwardRef","props","forwardedRef","type","accordionProps","singleProps","multipleProps","_react","$c2edcd6d640daf5939a1552e1f81c4$var$Collection","Provider","scope","__scopeAccordion","$c2edcd6d640daf5939a1552e1f81c4$var$AccordionImplMultiple","_babelRuntimeHelpersEsmExtends","ref","$c2edcd6d640daf5939a1552e1f81c4$var$AccordionImplSingle","propTypes","value","defaultValue","includes","Error","Array","isArray","AccordionValueProvider","useAccordionValueContext","AccordionCollapsibleProvider","useAccordionCollapsibleContext","collapsible","AccordionImplSingle","valueProp","onValueChange","accordionSingleProps","setValue","useControllableState","prop","defaultProp","onChange","$c2edcd6d640daf5939a1552e1f81c4$var$AccordionValueProvider","onItemOpen","onItemClose","useCallback","$c2edcd6d640daf5939a1552e1f81c4$var$AccordionCollapsibleProvider","$c2edcd6d640daf5939a1552e1f81c4$var$AccordionImpl","AccordionImplMultiple","accordionMultipleProps","handleItemOpen","itemValue","prevValue","handleItemClose","filter","AccordionImplProvider","useAccordionContext","AccordionImpl","disabled","accordionRef","useRef","composedRefs","useComposedRefs","getItems","handleKeyDown","composeEventHandlers","onKeyDown","event","key","target","triggerCollection","item","current","_item$ref$current","triggerIndex","findIndex","triggerCount","length","preventDefault","nextIndex","focus","$c2edcd6d640daf5939a1552e1f81c4$var$AccordionImplProvider","Slot","Primitive","div","undefined","AccordionItemProvider","useAccordionItemContext","AccordionItem","accordionItemProps","accordionContext","valueContext","collapsibleScope","triggerId","useId","open","$c2edcd6d640daf5939a1552e1f81c4$var$AccordionItemProvider","_radixUiReactCollapsible","Root","onOpenChange","AccordionHeader","headerProps","itemContext","h3","AccordionTrigger","triggerProps","collapsibleContext","ItemSlot","Trigger","id","AccordionContent","contentProps","Content","role","style","Item","Header"],"sources":["C:\\Users\\weida\\Desktop\\playground_CC\\node_modules\\@aws-amplify\\ui-react\\node_modules\\@radix-ui\\react-accordion\\dist\\packages\\react\\accordion\\src\\Accordion.tsx"],"sourcesContent":["import React from 'react';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { createCollection } from '@radix-ui/react-collection';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport * as CollapsiblePrimitive from '@radix-ui/react-collapsible';\nimport { createCollapsibleScope } from '@radix-ui/react-collapsible';\nimport { useId } from '@radix-ui/react-id';\n\nimport type * as Radix from '@radix-ui/react-primitive';\nimport type { Scope } from '@radix-ui/react-context';\n\n/* -------------------------------------------------------------------------------------------------\n * Accordion\n * -----------------------------------------------------------------------------------------------*/\n\nconst ACCORDION_NAME = 'Accordion';\nconst ACCORDION_KEYS = ['Home', 'End', 'ArrowDown', 'ArrowUp'];\n\nconst [Collection, useCollection, createCollectionScope] =\n  createCollection<AccordionTriggerElement>(ACCORDION_NAME);\n\ntype ScopedProps<P> = P & { __scopeAccordion?: Scope };\nconst [createAccordionContext, createAccordionScope] = createContextScope(ACCORDION_NAME, [\n  createCollectionScope,\n  createCollapsibleScope,\n]);\nconst useCollapsibleScope = createCollapsibleScope();\n\ntype AccordionElement = AccordionImplMultipleElement | AccordionImplSingleElement;\ninterface AccordionSingleProps extends AccordionImplSingleProps {\n  type: 'single';\n}\ninterface AccordionMultipleProps extends AccordionImplMultipleProps {\n  type: 'multiple';\n}\n\nconst Accordion = React.forwardRef<AccordionElement, AccordionSingleProps | AccordionMultipleProps>(\n  (props: ScopedProps<AccordionSingleProps | AccordionMultipleProps>, forwardedRef) => {\n    const { type, ...accordionProps } = props;\n    const singleProps = accordionProps as AccordionImplSingleProps;\n    const multipleProps = accordionProps as AccordionImplMultipleProps;\n    return (\n      <Collection.Provider scope={props.__scopeAccordion}>\n        {type === 'multiple' ? (\n          <AccordionImplMultiple {...multipleProps} ref={forwardedRef} />\n        ) : (\n          <AccordionImplSingle {...singleProps} ref={forwardedRef} />\n        )}\n      </Collection.Provider>\n    );\n  }\n);\n\nAccordion.displayName = ACCORDION_NAME;\n\nAccordion.propTypes = {\n  type(props) {\n    const value = props.value || props.defaultValue;\n    if (props.type && !['single', 'multiple'].includes(props.type)) {\n      return new Error(\n        'Invalid prop `type` supplied to `Accordion`. Expected one of `single | multiple`.'\n      );\n    }\n    if (props.type === 'multiple' && typeof value === 'string') {\n      return new Error(\n        'Invalid prop `type` supplied to `Accordion`. Expected `single` when `defaultValue` or `value` is type `string`.'\n      );\n    }\n    if (props.type === 'single' && Array.isArray(value)) {\n      return new Error(\n        'Invalid prop `type` supplied to `Accordion`. Expected `multiple` when `defaultValue` or `value` is type `string[]`.'\n      );\n    }\n    return null;\n  },\n};\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype AccordionValueContextValue = {\n  value: string[];\n  onItemOpen(value: string): void;\n  onItemClose(value: string): void;\n};\n\nconst [AccordionValueProvider, useAccordionValueContext] =\n  createAccordionContext<AccordionValueContextValue>(ACCORDION_NAME);\n\nconst [AccordionCollapsibleProvider, useAccordionCollapsibleContext] = createAccordionContext(\n  ACCORDION_NAME,\n  { collapsible: false }\n);\n\ntype AccordionImplSingleElement = AccordionImplElement;\ninterface AccordionImplSingleProps extends AccordionImplProps {\n  /**\n   * The controlled stateful value of the accordion item whose content is expanded.\n   */\n  value?: string;\n  /**\n   * The value of the item whose content is expanded when the accordion is initially rendered. Use\n   * `defaultValue` if you do not need to control the state of an accordion.\n   */\n  defaultValue?: string;\n  /**\n   * The callback that fires when the state of the accordion changes.\n   */\n  onValueChange?(value: string): void;\n  /**\n   * Whether an accordion item can be collapsed after it has been opened.\n   * @default false\n   */\n  collapsible?: boolean;\n}\n\nconst AccordionImplSingle = React.forwardRef<AccordionImplSingleElement, AccordionImplSingleProps>(\n  (props: ScopedProps<AccordionImplSingleProps>, forwardedRef) => {\n    const {\n      value: valueProp,\n      defaultValue,\n      onValueChange = () => {},\n      collapsible = false,\n      ...accordionSingleProps\n    } = props;\n\n    const [value, setValue] = useControllableState({\n      prop: valueProp,\n      defaultProp: defaultValue,\n      onChange: onValueChange,\n    });\n\n    return (\n      <AccordionValueProvider\n        scope={props.__scopeAccordion}\n        value={value ? [value] : []}\n        onItemOpen={setValue}\n        onItemClose={React.useCallback(() => collapsible && setValue(''), [collapsible, setValue])}\n      >\n        <AccordionCollapsibleProvider scope={props.__scopeAccordion} collapsible={collapsible}>\n          <AccordionImpl {...accordionSingleProps} ref={forwardedRef} />\n        </AccordionCollapsibleProvider>\n      </AccordionValueProvider>\n    );\n  }\n);\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype AccordionImplMultipleElement = AccordionImplElement;\ninterface AccordionImplMultipleProps extends AccordionImplProps {\n  /**\n   * The controlled stateful value of the accordion items whose contents are expanded.\n   */\n  value?: string[];\n  /**\n   * The value of the items whose contents are expanded when the accordion is initially rendered. Use\n   * `defaultValue` if you do not need to control the state of an accordion.\n   */\n  defaultValue?: string[];\n  /**\n   * The callback that fires when the state of the accordion changes.\n   */\n  onValueChange?(value: string[]): void;\n}\n\nconst AccordionImplMultiple = React.forwardRef<\n  AccordionImplMultipleElement,\n  AccordionImplMultipleProps\n>((props: ScopedProps<AccordionImplMultipleProps>, forwardedRef) => {\n  const {\n    value: valueProp,\n    defaultValue,\n    onValueChange = () => {},\n    ...accordionMultipleProps\n  } = props;\n\n  const [value = [], setValue] = useControllableState({\n    prop: valueProp,\n    defaultProp: defaultValue,\n    onChange: onValueChange,\n  });\n\n  const handleItemOpen = React.useCallback(\n    (itemValue) => setValue((prevValue = []) => [...prevValue, itemValue]),\n    [setValue]\n  );\n\n  const handleItemClose = React.useCallback(\n    (itemValue) => setValue((prevValue = []) => prevValue.filter((value) => value !== itemValue)),\n    [setValue]\n  );\n\n  return (\n    <AccordionValueProvider\n      scope={props.__scopeAccordion}\n      value={value}\n      onItemOpen={handleItemOpen}\n      onItemClose={handleItemClose}\n    >\n      <AccordionCollapsibleProvider scope={props.__scopeAccordion} collapsible={true}>\n        <AccordionImpl {...accordionMultipleProps} ref={forwardedRef} />\n      </AccordionCollapsibleProvider>\n    </AccordionValueProvider>\n  );\n});\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype AccordionImplContextValue = {\n  disabled?: boolean;\n};\n\nconst [AccordionImplProvider, useAccordionContext] =\n  createAccordionContext<AccordionImplContextValue>(ACCORDION_NAME);\n\ntype AccordionImplElement = React.ElementRef<typeof Primitive.div>;\ntype PrimitiveDivProps = Radix.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface AccordionImplProps extends PrimitiveDivProps {\n  /**\n   * Whether or not an accordion is disabled from user interaction.\n   *\n   * @defaultValue false\n   */\n  disabled?: boolean;\n}\n\nconst AccordionImpl = React.forwardRef<AccordionImplElement, AccordionImplProps>(\n  (props: ScopedProps<AccordionImplProps>, forwardedRef) => {\n    const { __scopeAccordion, disabled, ...accordionProps } = props;\n    const accordionRef = React.useRef<AccordionImplElement>(null);\n    const composedRefs = useComposedRefs(accordionRef, forwardedRef);\n    const getItems = useCollection(__scopeAccordion);\n\n    const handleKeyDown = composeEventHandlers(props.onKeyDown, (event) => {\n      if (!ACCORDION_KEYS.includes(event.key)) return;\n      const target = event.target as HTMLElement;\n      const triggerCollection = getItems().filter((item) => !item.ref.current?.disabled);\n      const triggerIndex = triggerCollection.findIndex((item) => item.ref.current === target);\n      const triggerCount = triggerCollection.length;\n\n      if (triggerIndex === -1) return;\n\n      // Prevents page scroll while user is navigating\n      event.preventDefault();\n\n      let nextIndex = triggerIndex;\n      switch (event.key) {\n        case 'Home':\n          nextIndex = 0;\n          break;\n        case 'End':\n          nextIndex = triggerCount - 1;\n          break;\n        case 'ArrowDown':\n          nextIndex = triggerIndex + 1;\n          break;\n        case 'ArrowUp':\n          nextIndex = triggerIndex - 1;\n          if (nextIndex < 0) {\n            nextIndex = triggerCount - 1;\n          }\n          break;\n      }\n\n      const clampedIndex = nextIndex % triggerCount;\n      triggerCollection[clampedIndex].ref.current?.focus();\n    });\n\n    return (\n      <AccordionImplProvider scope={__scopeAccordion} disabled={disabled}>\n        <Collection.Slot scope={__scopeAccordion}>\n          <Primitive.div\n            {...accordionProps}\n            ref={composedRefs}\n            onKeyDown={disabled ? undefined : handleKeyDown}\n          />\n        </Collection.Slot>\n      </AccordionImplProvider>\n    );\n  }\n);\n\n/* -------------------------------------------------------------------------------------------------\n * AccordionItem\n * -----------------------------------------------------------------------------------------------*/\n\nconst ITEM_NAME = 'AccordionItem';\n\ntype AccordionItemContextValue = { open?: boolean; disabled?: boolean; triggerId: string };\nconst [AccordionItemProvider, useAccordionItemContext] =\n  createAccordionContext<AccordionItemContextValue>(ITEM_NAME);\n\ntype AccordionItemElement = React.ElementRef<typeof CollapsiblePrimitive.Root>;\ntype CollapsibleProps = Radix.ComponentPropsWithoutRef<typeof CollapsiblePrimitive.Root>;\ninterface AccordionItemProps\n  extends Omit<CollapsibleProps, 'open' | 'defaultOpen' | 'onOpenChange'> {\n  /**\n   * Whether or not an accordion item is disabled from user interaction.\n   *\n   * @defaultValue false\n   */\n  disabled?: boolean;\n  /**\n   * A string value for the accordion item. All items within an accordion should use a unique value.\n   */\n  value: string;\n}\n\n/**\n * `AccordionItem` contains all of the parts of a collapsible section inside of an `Accordion`.\n */\nconst AccordionItem = React.forwardRef<AccordionItemElement, AccordionItemProps>(\n  (props: ScopedProps<AccordionItemProps>, forwardedRef) => {\n    const { __scopeAccordion, value, ...accordionItemProps } = props;\n    const accordionContext = useAccordionContext(ITEM_NAME, __scopeAccordion);\n    const valueContext = useAccordionValueContext(ITEM_NAME, __scopeAccordion);\n    const collapsibleScope = useCollapsibleScope(__scopeAccordion);\n    const triggerId = useId();\n    const open = (value && valueContext.value.includes(value)) || false;\n    const disabled = accordionContext.disabled || props.disabled;\n\n    return (\n      <AccordionItemProvider\n        scope={__scopeAccordion}\n        open={open}\n        disabled={disabled}\n        triggerId={triggerId}\n      >\n        <CollapsiblePrimitive.Root\n          data-state={open ? 'open' : 'closed'}\n          {...collapsibleScope}\n          {...accordionItemProps}\n          ref={forwardedRef}\n          disabled={disabled}\n          open={open}\n          onOpenChange={(open) => {\n            if (open) {\n              valueContext.onItemOpen(value);\n            } else {\n              valueContext.onItemClose(value);\n            }\n          }}\n        />\n      </AccordionItemProvider>\n    );\n  }\n);\n\nAccordionItem.displayName = ITEM_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AccordionHeader\n * -----------------------------------------------------------------------------------------------*/\n\nconst HEADER_NAME = 'AccordionHeader';\n\ntype AccordionHeaderElement = React.ElementRef<typeof Primitive.h3>;\ntype PrimitiveHeading3Props = Radix.ComponentPropsWithoutRef<typeof Primitive.h3>;\ninterface AccordionHeaderProps extends PrimitiveHeading3Props {}\n\n/**\n * `AccordionHeader` contains the content for the parts of an `AccordionItem` that will be visible\n * whether or not its content is collapsed.\n */\nconst AccordionHeader = React.forwardRef<AccordionHeaderElement, AccordionHeaderProps>(\n  (props: ScopedProps<AccordionHeaderProps>, forwardedRef) => {\n    const { __scopeAccordion, ...headerProps } = props;\n    const itemContext = useAccordionItemContext(HEADER_NAME, __scopeAccordion);\n    return (\n      <Primitive.h3\n        data-state={getState(itemContext.open)}\n        data-disabled={itemContext.disabled ? '' : undefined}\n        {...headerProps}\n        ref={forwardedRef}\n      />\n    );\n  }\n);\n\nAccordionHeader.displayName = HEADER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AccordionTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst TRIGGER_NAME = 'AccordionTrigger';\n\ntype AccordionTriggerElement = React.ElementRef<typeof CollapsiblePrimitive.Trigger>;\ntype CollapsibleTriggerProps = Radix.ComponentPropsWithoutRef<typeof CollapsiblePrimitive.Trigger>;\ninterface AccordionTriggerProps extends CollapsibleTriggerProps {}\n\n/**\n * `AccordionTrigger` is the trigger that toggles the collapsed state of an `AccordionItem`. It\n * should always be nested inside of an `AccordionHeader`.\n */\nconst AccordionTrigger = React.forwardRef<AccordionTriggerElement, AccordionTriggerProps>(\n  (props: ScopedProps<AccordionTriggerProps>, forwardedRef) => {\n    const { __scopeAccordion, ...triggerProps } = props;\n    const itemContext = useAccordionItemContext(TRIGGER_NAME, __scopeAccordion);\n    const collapsibleContext = useAccordionCollapsibleContext(TRIGGER_NAME, __scopeAccordion);\n    const collapsibleScope = useCollapsibleScope(__scopeAccordion);\n    return (\n      <Collection.ItemSlot scope={__scopeAccordion}>\n        <CollapsiblePrimitive.Trigger\n          aria-disabled={(itemContext.open && !collapsibleContext.collapsible) || undefined}\n          id={itemContext.triggerId}\n          {...collapsibleScope}\n          {...triggerProps}\n          ref={forwardedRef}\n        />\n      </Collection.ItemSlot>\n    );\n  }\n);\n\nAccordionTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AccordionContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'AccordionContent';\n\ntype AccordionContentElement = React.ElementRef<typeof CollapsiblePrimitive.Content>;\ntype CollapsibleContentProps = Radix.ComponentPropsWithoutRef<typeof CollapsiblePrimitive.Content>;\ninterface AccordionContentProps extends CollapsibleContentProps {}\n\n/**\n * `AccordionContent` contains the collapsible content for an `AccordionItem`.\n */\nconst AccordionContent = React.forwardRef<AccordionContentElement, AccordionContentProps>(\n  (props: ScopedProps<AccordionContentProps>, forwardedRef) => {\n    const { __scopeAccordion, ...contentProps } = props;\n    const itemContext = useAccordionItemContext(CONTENT_NAME, __scopeAccordion);\n    const collapsibleScope = useCollapsibleScope(__scopeAccordion);\n    return (\n      <CollapsiblePrimitive.Content\n        role=\"region\"\n        aria-labelledby={itemContext.triggerId}\n        {...collapsibleScope}\n        {...contentProps}\n        ref={forwardedRef}\n        style={{\n          ['--radix-accordion-content-height' as any]: 'var(--radix-collapsible-content-height)',\n          ['--radix-accordion-content-width' as any]: 'var(--radix-collapsible-content-width)',\n          ...props.style,\n        }}\n      />\n    );\n  }\n);\n\nAccordionContent.displayName = CONTENT_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\nfunction getState(open?: boolean) {\n  return open ? 'open' : 'closed';\n}\n\nconst Root = Accordion;\nconst Item = AccordionItem;\nconst Header = AccordionHeader;\nconst Trigger = AccordionTrigger;\nconst Content = AccordionContent;\n\nexport {\n  createAccordionScope,\n  //\n  Accordion,\n  AccordionItem,\n  AccordionHeader,\n  AccordionTrigger,\n  AccordionContent,\n  //\n  Root,\n  Item,\n  Header,\n  Trigger,\n  Content,\n};\nexport type {\n  AccordionSingleProps,\n  AccordionMultipleProps,\n  AccordionItemProps,\n  AccordionHeaderProps,\n  AccordionTriggerProps,\n  AccordionContentProps,\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}