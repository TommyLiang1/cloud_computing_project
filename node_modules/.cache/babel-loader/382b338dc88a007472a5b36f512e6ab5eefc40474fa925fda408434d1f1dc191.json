{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar InMemoryStore = /** @class */function () {\n  function InMemoryStore() {\n    var _this = this;\n    this.db = new Map();\n    this.getAllKeys = function () {\n      return __awaiter(_this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n          return [2 /*return*/, Array.from(this.db.keys())];\n        });\n      });\n    };\n    this.multiGet = function (keys) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var _this = this;\n        return __generator(this, function (_a) {\n          return [2 /*return*/, keys.reduce(function (res, k) {\n            return res.push([k, _this.db.get(k)]), res;\n          }, [])];\n        });\n      });\n    };\n    this.multiRemove = function (keys, callback) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var _this = this;\n        return __generator(this, function (_a) {\n          keys.forEach(function (k) {\n            return _this.db.delete(k);\n          });\n          typeof callback === 'function' && callback();\n          return [2 /*return*/];\n        });\n      });\n    };\n\n    this.multiSet = function (entries, callback) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var _this = this;\n        return __generator(this, function (_a) {\n          entries.forEach(function (_a) {\n            var _b = __read(_a, 2),\n              key = _b[0],\n              value = _b[1];\n            _this.setItem(key, value);\n          });\n          typeof callback === 'function' && callback();\n          return [2 /*return*/];\n        });\n      });\n    };\n\n    this.setItem = function (key, value) {\n      return __awaiter(_this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n          return [2 /*return*/, this.db.set(key, value)];\n        });\n      });\n    };\n    this.removeItem = function (key) {\n      return __awaiter(_this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n          return [2 /*return*/, this.db.delete(key)];\n        });\n      });\n    };\n    this.getItem = function (key) {\n      return __awaiter(_this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n          return [2 /*return*/, this.db.get(key)];\n        });\n      });\n    };\n  }\n  return InMemoryStore;\n}();\nexport { InMemoryStore };\nexport function createInMemoryStore() {\n  return new InMemoryStore();\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;EAAA;IAAA;IACC,OAAE,GAAG,IAAIA,GAAG,EAAkB;IAE9B,eAAU,GAAG;MAAA;;UACZ,sBAAOC,KAAK,CAACC,IAAI,CAAC,IAAI,CAACC,EAAE,CAACC,IAAI,EAAE,CAAC;;;KACjC;IAED,aAAQ,GAAG,UAAOA,IAAc;MAAA;;;UAC/B,sBAAOA,IAAI,CAACC,MAAM,CAAC,UAACC,GAAG,EAAEC,CAAC;YAAK,OAACD,GAAG,CAACE,IAAI,CAAC,CAACD,CAAC,EAAEE,KAAI,CAACN,EAAE,CAACO,GAAG,CAACH,CAAC,CAAC,CAAC,CAAC,EAAED,GAAG;UAAnC,CAAoC,EAAE,EAAE,CAAC;;;KACxE;IAED,gBAAW,GAAG,UAAOF,IAAc,EAAEO,QAAS;MAAA;;;UAC7CP,IAAI,CAACQ,OAAO,CAAC,WAAC;YAAI,YAAI,CAACT,EAAE,CAACU,MAAM,CAACN,CAAC,CAAC;UAAjB,CAAiB,CAAC;UAEpC,OAAOI,QAAQ,KAAK,UAAU,IAAIA,QAAQ,EAAE;;;;KAC5C;;IAED,aAAQ,GAAG,UAAOG,OAAmB,EAAEH,QAAS;MAAA;;;UAC/CG,OAAO,CAACF,OAAO,CAAC,UAACG,EAAY;gBAAZC,kBAAY;cAAXC,WAAG;cAAEC,aAAK;YAC3BT,KAAI,CAACU,OAAO,CAACF,GAAG,EAAEC,KAAK,CAAC;UACzB,CAAC,CAAC;UAEF,OAAOP,QAAQ,KAAK,UAAU,IAAIA,QAAQ,EAAE;;;;KAC5C;;IAED,YAAO,GAAG,UAAOM,GAAW,EAAEC,KAAa;MAAA;;UAC1C,sBAAO,IAAI,CAACf,EAAE,CAACiB,GAAG,CAACH,GAAG,EAAEC,KAAK,CAAC;;;KAC9B;IAED,eAAU,GAAG,UAAOD,GAAW;MAAA;;UAC9B,sBAAO,IAAI,CAACd,EAAE,CAACU,MAAM,CAACI,GAAG,CAAC;;;KAC1B;IAED,YAAO,GAAG,UAAOA,GAAW;MAAA;;UAC3B,sBAAO,IAAI,CAACd,EAAE,CAACO,GAAG,CAACO,GAAG,CAAC;;;KACvB;EACF;EAAA,oBAAC;AAAD,CAAC,EApCD;;AAsCA,OAAM,SAAUI,mBAAmB;EAClC,OAAO,IAAIC,aAAa,EAAE;AAC3B","names":["Map","Array","from","db","keys","reduce","res","k","push","_this","get","callback","forEach","delete","entries","_a","_b","key","value","setItem","set","createInMemoryStore","InMemoryStore"],"sources":["C:\\Users\\weida\\Desktop\\playground_CC\\node_modules\\@aws-amplify\\datastore\\src\\storage\\adapter\\InMemoryStore.ts"],"sourcesContent":["export class InMemoryStore {\n\tdb = new Map<string, string>();\n\n\tgetAllKeys = async () => {\n\t\treturn Array.from(this.db.keys());\n\t};\n\n\tmultiGet = async (keys: string[]) => {\n\t\treturn keys.reduce((res, k) => (res.push([k, this.db.get(k)]), res), []);\n\t};\n\n\tmultiRemove = async (keys: string[], callback?) => {\n\t\tkeys.forEach(k => this.db.delete(k));\n\n\t\ttypeof callback === 'function' && callback();\n\t};\n\n\tmultiSet = async (entries: string[][], callback?) => {\n\t\tentries.forEach(([key, value]) => {\n\t\t\tthis.setItem(key, value);\n\t\t});\n\n\t\ttypeof callback === 'function' && callback();\n\t};\n\n\tsetItem = async (key: string, value: string) => {\n\t\treturn this.db.set(key, value);\n\t};\n\n\tremoveItem = async (key: string) => {\n\t\treturn this.db.delete(key);\n\t};\n\n\tgetItem = async (key: string) => {\n\t\treturn this.db.get(key);\n\t};\n}\n\nexport function createInMemoryStore() {\n\treturn new InMemoryStore();\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}