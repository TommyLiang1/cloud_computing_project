{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n/*\n * Copyright 2017-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nimport { base64ToArrayBuffer, gzipDecompressToString } from './utils';\nexport var unGzipBase64AsJson = function (gzipBase64) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var decodedArrayBuffer, objString, error_1;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (typeof gzipBase64 === 'undefined') return [2 /*return*/, undefined];\n          _a.label = 1;\n        case 1:\n          _a.trys.push([1, 3,, 4]);\n          decodedArrayBuffer = base64ToArrayBuffer(gzipBase64);\n          return [4 /*yield*/, gzipDecompressToString(decodedArrayBuffer)];\n        case 2:\n          objString = _a.sent();\n          return [2 /*return*/, JSON.parse(objString)];\n        case 3:\n          error_1 = _a.sent();\n          return [2 /*return*/, Promise.reject('unable to decode and decompress ' + error_1)];\n        case 4:\n          return [2 /*return*/];\n      }\n    });\n  });\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;AAYA,SAASA,mBAAmB,EAAEC,sBAAsB,QAAQ,SAAS;AAErE,OAAO,IAAMC,kBAAkB,GAAG,UAAOC,UAA8B;EAAA;;;;;UACtE,IAAI,OAAOA,UAAU,KAAK,WAAW,EAAE,sBAAOC,SAAS;;;;UAGhDC,kBAAkB,GAAGL,mBAAmB,CAACG,UAAU,CAAC;UAEhC,qBAAMF,sBAAsB,CAACI,kBAAkB,CAAC;;UAApEC,SAAS,GAAWC,SAAgD;UAE1E,sBAAOC,IAAI,CAACC,KAAK,CAACH,SAAS,CAAC;;;UAE5B,sBAAOI,OAAO,CAACC,MAAM,CAAC,kCAAkC,GAAGC,OAAK,CAAC;;;;;;CAElE","names":["base64ToArrayBuffer","gzipDecompressToString","unGzipBase64AsJson","gzipBase64","undefined","decodedArrayBuffer","objString","_a","JSON","parse","Promise","reject","error_1"],"sources":["C:\\Users\\weida\\Desktop\\playground_CC\\node_modules\\@aws-amplify\\interactions\\src\\Providers\\AWSLexProviderHelper\\commonUtils.ts"],"sourcesContent":["/*\n * Copyright 2017-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nimport { base64ToArrayBuffer, gzipDecompressToString } from './utils';\n\nexport const unGzipBase64AsJson = async (gzipBase64: string | undefined) => {\n\tif (typeof gzipBase64 === 'undefined') return undefined;\n\n\ttry {\n\t\tconst decodedArrayBuffer = base64ToArrayBuffer(gzipBase64);\n\n\t\tconst objString: string = await gzipDecompressToString(decodedArrayBuffer);\n\n\t\treturn JSON.parse(objString);\n\t} catch (error) {\n\t\treturn Promise.reject('unable to decode and decompress ' + error);\n\t}\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}