{"ast":null,"code":"import * as e from \"react\";\nexport function usePrevious(r) {\n  const u = e.useRef({\n    value: r,\n    previous: r\n  });\n  return e.useMemo(() => (u.current.value !== r && (u.current.previous = u.current.value, u.current.value = r), u.current.previous), [r]);\n}","map":{"version":3,"mappings":";OAEA,SAASA,YAAeC;EACtB,MAAMC,IAAMC,EAAMC,OAAO;IAAEH;IAAOI,UAAUJ;EAAAA;EAK5C,OAAOE,EAAMG,QAAQ,OACfJ,EAAIK,QAAQN,UAAUA,MACxBC,EAAIK,QAAQF,WAAWH,EAAIK,QAAQN,OACnCC,EAAIK,QAAQN,QAAQA,IAEfC,EAAIK,QAAQF,WAClB,CAACJ;AAAAA","names":["usePrevious","value","ref","React","useRef","previous","useMemo","current"],"sources":["C:\\Users\\weida\\Desktop\\playground_CC\\node_modules\\@aws-amplify\\ui-react\\node_modules\\@radix-ui\\react-slider\\node_modules\\@radix-ui\\react-use-previous\\dist\\packages\\react\\use-previous\\src\\usePrevious.tsx"],"sourcesContent":["import * as React from 'react';\n\nfunction usePrevious<T>(value: T) {\n  const ref = React.useRef({ value, previous: value });\n\n  // We compare values before making an update to ensure that\n  // a change has been made. This ensures the previous value is\n  // persisted correctly between renders.\n  return React.useMemo(() => {\n    if (ref.current.value !== value) {\n      ref.current.previous = ref.current.value;\n      ref.current.value = value;\n    }\n    return ref.current.previous;\n  }, [value]);\n}\n\nexport { usePrevious };\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}